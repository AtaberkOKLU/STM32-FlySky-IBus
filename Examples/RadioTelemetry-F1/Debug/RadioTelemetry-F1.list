
RadioTelemetry-F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800460c  0800460c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800460c  0800460c  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800460c  0800460c  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08004614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200000e0  080046f4  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080046f4  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d50  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c79  00000000  00000000  00027e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00029ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001812e  00000000  00000000  0002aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ece  00000000  00000000  00042b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f07  00000000  00000000  0004ca5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ac  00000000  00000000  000d09b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080044c0 	.word	0x080044c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	080044c0 	.word	0x080044c0

0800014c <Sensor_UART_Telemetry_Init>:
volatile uint8_t Transiever_TX_Buffer[SERVO_BUFFER_SIZE];
volatile struct __FLAGS FLAGS;

extern TelemetrySensorStruct SensorList[NUM_SENSORS];

void Sensor_UART_Telemetry_Init(UART_HandleTypeDef *huart) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	  HAL_UART_RegisterCallback(huart, HAL_UART_RX_COMPLETE_CB_ID, Sensor_UART_RxComplete_Callback);
 8000154:	4a0d      	ldr	r2, [pc, #52]	; (800018c <Sensor_UART_Telemetry_Init+0x40>)
 8000156:	2103      	movs	r1, #3
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f002 fa59 	bl	8002610 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_TX_COMPLETE_CB_ID, Sensor_UART_TxComplete_Callback);
 800015e:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <Sensor_UART_Telemetry_Init+0x44>)
 8000160:	2101      	movs	r1, #1
 8000162:	6878      	ldr	r0, [r7, #4]
 8000164:	f002 fa54 	bl	8002610 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_ERROR_CB_ID, Sensor_UART_Error_Callback);
 8000168:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <Sensor_UART_Telemetry_Init+0x48>)
 800016a:	2104      	movs	r1, #4
 800016c:	6878      	ldr	r0, [r7, #4]
 800016e:	f002 fa4f 	bl	8002610 <HAL_UART_RegisterCallback>
	  HAL_HalfDuplex_EnableReceiver(huart);	// Enable USART1 Receive
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	f002 fe20 	bl	8002db8 <HAL_HalfDuplex_EnableReceiver>
	  HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_RX_Buffer[0], 1);
 8000178:	2201      	movs	r2, #1
 800017a:	4907      	ldr	r1, [pc, #28]	; (8000198 <Sensor_UART_Telemetry_Init+0x4c>)
 800017c:	6878      	ldr	r0, [r7, #4]
 800017e:	f002 fb59 	bl	8002834 <HAL_UART_Receive_DMA>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	080002f9 	.word	0x080002f9
 8000190:	0800056d 	.word	0x0800056d
 8000194:	080001ed 	.word	0x080001ed
 8000198:	200000fc 	.word	0x200000fc

0800019c <Servo_UART_Telemetry_Init>:

void Servo_UART_Telemetry_Init(UART_HandleTypeDef *huart) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	  HAL_UART_RegisterCallback(huart, HAL_UART_RX_COMPLETE_CB_ID, Servo_UART_RxComplete_Callback);
 80001a4:	4a0d      	ldr	r2, [pc, #52]	; (80001dc <Servo_UART_Telemetry_Init+0x40>)
 80001a6:	2103      	movs	r1, #3
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f002 fa31 	bl	8002610 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_ERROR_CB_ID, Servo_UART_Error_Callback);
 80001ae:	4a0c      	ldr	r2, [pc, #48]	; (80001e0 <Servo_UART_Telemetry_Init+0x44>)
 80001b0:	2104      	movs	r1, #4
 80001b2:	6878      	ldr	r0, [r7, #4]
 80001b4:	f002 fa2c 	bl	8002610 <HAL_UART_RegisterCallback>
	  HAL_HalfDuplex_EnableReceiver(huart);	// Enable USART2 Receive
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f002 fdfd 	bl	8002db8 <HAL_HalfDuplex_EnableReceiver>
	  FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 80001be:	4a09      	ldr	r2, [pc, #36]	; (80001e4 <Servo_UART_Telemetry_Init+0x48>)
 80001c0:	7813      	ldrb	r3, [r2, #0]
 80001c2:	f36f 03c4 	bfc	r3, #3, #2
 80001c6:	7013      	strb	r3, [r2, #0]
	  HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_TX_Buffer[0], 1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	4907      	ldr	r1, [pc, #28]	; (80001e8 <Servo_UART_Telemetry_Init+0x4c>)
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f002 fb31 	bl	8002834 <HAL_UART_Receive_DMA>
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	080005a9 	.word	0x080005a9
 80001e0:	08000279 	.word	0x08000279
 80001e4:	20000148 	.word	0x20000148
 80001e8:	20000128 	.word	0x20000128

080001ec <Sensor_UART_Error_Callback>:


void Sensor_UART_Error_Callback(struct __UART_HandleTypeDef *huart){
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_PEFLAG(huart);
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	68fb      	ldr	r3, [r7, #12]
	HAL_UART_DMAStop(huart);
 800020a:	6878      	ldr	r0, [r7, #4]
 800020c:	f002 fb42 	bl	8002894 <HAL_UART_DMAStop>
	HAL_UART_MspDeInit(huart);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 fe0f 	bl	8000e34 <HAL_UART_MspDeInit>
	HAL_UART_MspInit(huart);
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 fd1a 	bl	8000c50 <HAL_UART_MspInit>

	printf("Sensor UART Error %ld DMA RX/TX error 0x%lx-0x%lx \r\n", HAL_UART_GetError(huart), HAL_DMA_GetError(&hdma_usart1_rx), HAL_DMA_GetError(&hdma_usart1_tx));
 800021c:	6878      	ldr	r0, [r7, #4]
 800021e:	f002 fdfe 	bl	8002e1e <HAL_UART_GetError>
 8000222:	4604      	mov	r4, r0
 8000224:	480f      	ldr	r0, [pc, #60]	; (8000264 <Sensor_UART_Error_Callback+0x78>)
 8000226:	f001 faff 	bl	8001828 <HAL_DMA_GetError>
 800022a:	4605      	mov	r5, r0
 800022c:	480e      	ldr	r0, [pc, #56]	; (8000268 <Sensor_UART_Error_Callback+0x7c>)
 800022e:	f001 fafb 	bl	8001828 <HAL_DMA_GetError>
 8000232:	4603      	mov	r3, r0
 8000234:	462a      	mov	r2, r5
 8000236:	4621      	mov	r1, r4
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <Sensor_UART_Error_Callback+0x80>)
 800023a:	f003 f9ad 	bl	8003598 <iprintf>
	FLAGS.Transiever_RX_Sync = 0;
 800023e:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <Sensor_UART_Error_Callback+0x84>)
 8000240:	7813      	ldrb	r3, [r2, #0]
 8000242:	f36f 0382 	bfc	r3, #2, #1
 8000246:	7013      	strb	r3, [r2, #0]
	while(HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_RX_Buffer[0], 1) != HAL_OK);
 8000248:	bf00      	nop
 800024a:	2201      	movs	r2, #1
 800024c:	4909      	ldr	r1, [pc, #36]	; (8000274 <Sensor_UART_Error_Callback+0x88>)
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f002 faf0 	bl	8002834 <HAL_UART_Receive_DMA>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1f7      	bne.n	800024a <Sensor_UART_Error_Callback+0x5e>
}
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bdb0      	pop	{r4, r5, r7, pc}
 8000264:	20000238 	.word	0x20000238
 8000268:	2000027c 	.word	0x2000027c
 800026c:	080044d8 	.word	0x080044d8
 8000270:	20000148 	.word	0x20000148
 8000274:	200000fc 	.word	0x200000fc

08000278 <Servo_UART_Error_Callback>:

void Servo_UART_Error_Callback(struct __UART_HandleTypeDef *huart){
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
	HAL_UART_DMAStop(huart);
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f002 fafc 	bl	8002894 <HAL_UART_DMAStop>
	HAL_UART_MspDeInit(huart);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f000 fdc9 	bl	8000e34 <HAL_UART_MspDeInit>
	HAL_UART_MspInit(huart);
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f000 fcd4 	bl	8000c50 <HAL_UART_MspInit>
	printf("Servo UART Error %ld DMA error 0x%lx \r\n", HAL_UART_GetError(huart), HAL_DMA_GetError(&hdma_usart2_rx));
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f002 fdb8 	bl	8002e1e <HAL_UART_GetError>
 80002ae:	4604      	mov	r4, r0
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <Servo_UART_Error_Callback+0x70>)
 80002b2:	f001 fab9 	bl	8001828 <HAL_DMA_GetError>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4621      	mov	r1, r4
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <Servo_UART_Error_Callback+0x74>)
 80002be:	f003 f96b 	bl	8003598 <iprintf>
	FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 80002c2:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <Servo_UART_Error_Callback+0x78>)
 80002c4:	7813      	ldrb	r3, [r2, #0]
 80002c6:	f36f 03c4 	bfc	r3, #3, #2
 80002ca:	7013      	strb	r3, [r2, #0]
	while(HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_TX_Buffer[0], 1) != HAL_OK);
 80002cc:	bf00      	nop
 80002ce:	2201      	movs	r2, #1
 80002d0:	4908      	ldr	r1, [pc, #32]	; (80002f4 <Servo_UART_Error_Callback+0x7c>)
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f002 faae 	bl	8002834 <HAL_UART_Receive_DMA>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f7      	bne.n	80002ce <Servo_UART_Error_Callback+0x56>
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd90      	pop	{r4, r7, pc}
 80002e8:	200002c0 	.word	0x200002c0
 80002ec:	08004510 	.word	0x08004510
 80002f0:	20000148 	.word	0x20000148
 80002f4:	20000128 	.word	0x20000128

080002f8 <Sensor_UART_RxComplete_Callback>:

void Sensor_UART_RxComplete_Callback(struct __UART_HandleTypeDef *huart){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	uint16_t t, chksum = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	81fb      	strh	r3, [r7, #14]

	if(!FLAGS.Transiever_RX_Sync) {
 8000304:	4b93      	ldr	r3, [pc, #588]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d12a      	bne.n	8000368 <Sensor_UART_RxComplete_Callback+0x70>
		FLAGS.Transiever_RX_Sync = Transiever_RX_Buffer[0] == SENSOR_HEADER;
 8000312:	4b91      	ldr	r3, [pc, #580]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b04      	cmp	r3, #4
 800031a:	bf0c      	ite	eq
 800031c:	2301      	moveq	r3, #1
 800031e:	2300      	movne	r3, #0
 8000320:	b2d9      	uxtb	r1, r3
 8000322:	4a8c      	ldr	r2, [pc, #560]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 8000324:	7813      	ldrb	r3, [r2, #0]
 8000326:	f361 0382 	bfi	r3, r1, #2, #1
 800032a:	7013      	strb	r3, [r2, #0]
		if(!FLAGS.Transiever_RX_Sync) {
 800032c:	4b89      	ldr	r3, [pc, #548]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d109      	bne.n	800034e <Sensor_UART_RxComplete_Callback+0x56>
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) &Transiever_RX_Buffer[0], 1) != HAL_OK);
 800033a:	bf00      	nop
 800033c:	2201      	movs	r2, #1
 800033e:	4986      	ldr	r1, [pc, #536]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000340:	4886      	ldr	r0, [pc, #536]	; (800055c <Sensor_UART_RxComplete_Callback+0x264>)
 8000342:	f002 fa77 	bl	8002834 <HAL_UART_Receive_DMA>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d1f7      	bne.n	800033c <Sensor_UART_RxComplete_Callback+0x44>
		} else {
			Transiever_RX_Buffer[0] = SENSOR_HEADER;
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) &Transiever_RX_Buffer[1], 3) != HAL_OK);
		}
		return;
 800034c:	e0fe      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
			Transiever_RX_Buffer[0] = SENSOR_HEADER;
 800034e:	4b82      	ldr	r3, [pc, #520]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000350:	2204      	movs	r2, #4
 8000352:	701a      	strb	r2, [r3, #0]
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) &Transiever_RX_Buffer[1], 3) != HAL_OK);
 8000354:	bf00      	nop
 8000356:	2203      	movs	r2, #3
 8000358:	4981      	ldr	r1, [pc, #516]	; (8000560 <Sensor_UART_RxComplete_Callback+0x268>)
 800035a:	4880      	ldr	r0, [pc, #512]	; (800055c <Sensor_UART_RxComplete_Callback+0x264>)
 800035c:	f002 fa6a 	bl	8002834 <HAL_UART_Receive_DMA>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f7      	bne.n	8000356 <Sensor_UART_RxComplete_Callback+0x5e>
		return;
 8000366:	e0f1      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
	} else {

		FLAGS.Transiever_RX_Sync = Transiever_RX_Buffer[0] == SENSOR_HEADER;
 8000368:	4b7b      	ldr	r3, [pc, #492]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b04      	cmp	r3, #4
 8000370:	bf0c      	ite	eq
 8000372:	2301      	moveq	r3, #1
 8000374:	2300      	movne	r3, #0
 8000376:	b2d9      	uxtb	r1, r3
 8000378:	4a76      	ldr	r2, [pc, #472]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 800037a:	7813      	ldrb	r3, [r2, #0]
 800037c:	f361 0382 	bfi	r3, r1, #2, #1
 8000380:	7013      	strb	r3, [r2, #0]
		if(!FLAGS.Transiever_RX_Sync) {
 8000382:	4b74      	ldr	r3, [pc, #464]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2b00      	cmp	r3, #0
 800038e:	d109      	bne.n	80003a4 <Sensor_UART_RxComplete_Callback+0xac>
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) &Transiever_RX_Buffer[0], 1) != HAL_OK);
 8000390:	bf00      	nop
 8000392:	2201      	movs	r2, #1
 8000394:	4970      	ldr	r1, [pc, #448]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000396:	4871      	ldr	r0, [pc, #452]	; (800055c <Sensor_UART_RxComplete_Callback+0x264>)
 8000398:	f002 fa4c 	bl	8002834 <HAL_UART_Receive_DMA>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1f7      	bne.n	8000392 <Sensor_UART_RxComplete_Callback+0x9a>
			return;
 80003a2:	e0d3      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
		}

		uint8_t CHNL = (Transiever_RX_Buffer[1] & SENSOR_CHNL_MASK);
 80003a4:	4b6c      	ldr	r3, [pc, #432]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 80003a6:	785b      	ldrb	r3, [r3, #1]
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	f003 030f 	and.w	r3, r3, #15
 80003ae:	733b      	strb	r3, [r7, #12]
		uint8_t SIZE = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	72fb      	strb	r3, [r7, #11]
		uint8_t i = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	737b      	strb	r3, [r7, #13]

		if((CHNL <= NUM_SENSORS) && (CHNL > 0)) {
 80003b8:	7b3b      	ldrb	r3, [r7, #12]
 80003ba:	2b0e      	cmp	r3, #14
 80003bc:	d81d      	bhi.n	80003fa <Sensor_UART_RxComplete_Callback+0x102>
 80003be:	7b3b      	ldrb	r3, [r7, #12]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d01a      	beq.n	80003fa <Sensor_UART_RxComplete_Callback+0x102>
			SIZE = (SensorList[CHNL-1].SensorType & 0x80) ? SENSOR_TX_BUF_SIZE_8 : SENSOR_TX_BUF_SIZE_6;
 80003c4:	7b3b      	ldrb	r3, [r7, #12]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4a66      	ldr	r2, [pc, #408]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 80003ca:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da01      	bge.n	80003d8 <Sensor_UART_RxComplete_Callback+0xe0>
 80003d4:	2308      	movs	r3, #8
 80003d6:	e000      	b.n	80003da <Sensor_UART_RxComplete_Callback+0xe2>
 80003d8:	2306      	movs	r3, #6
 80003da:	72fb      	strb	r3, [r7, #11]
		} else {
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
			return;
		}

		switch(Transiever_RX_Buffer[1] & SENSOR_CMND_MASK) {
 80003dc:	4b5e      	ldr	r3, [pc, #376]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 80003de:	785b      	ldrb	r3, [r3, #1]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003e6:	2ba0      	cmp	r3, #160	; 0xa0
 80003e8:	d04d      	beq.n	8000486 <Sensor_UART_RxComplete_Callback+0x18e>
 80003ea:	2ba0      	cmp	r3, #160	; 0xa0
 80003ec:	f300 808f 	bgt.w	800050e <Sensor_UART_RxComplete_Callback+0x216>
 80003f0:	2b80      	cmp	r3, #128	; 0x80
 80003f2:	d00c      	beq.n	800040e <Sensor_UART_RxComplete_Callback+0x116>
 80003f4:	2b90      	cmp	r3, #144	; 0x90
 80003f6:	d00f      	beq.n	8000418 <Sensor_UART_RxComplete_Callback+0x120>
 80003f8:	e089      	b.n	800050e <Sensor_UART_RxComplete_Callback+0x216>
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
 80003fa:	bf00      	nop
 80003fc:	2204      	movs	r2, #4
 80003fe:	4956      	ldr	r1, [pc, #344]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000400:	4856      	ldr	r0, [pc, #344]	; (800055c <Sensor_UART_RxComplete_Callback+0x264>)
 8000402:	f002 fa17 	bl	8002834 <HAL_UART_Receive_DMA>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1f7      	bne.n	80003fc <Sensor_UART_RxComplete_Callback+0x104>
			return;
 800040c:	e09e      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
 800040e:	4b52      	ldr	r3, [pc, #328]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000410:	681b      	ldr	r3, [r3, #0]
			case SENSOR_CMD_DSCVR:
				memcpy((uint8_t *) TX_Buffer, (uint8_t*) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE);
 8000412:	4a55      	ldr	r2, [pc, #340]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 8000414:	6013      	str	r3, [r2, #0]
				break;
 8000416:	e084      	b.n	8000522 <Sensor_UART_RxComplete_Callback+0x22a>

			case SENSOR_CMD_TYPE:
				TX_Buffer[0] = SENSOR_TX_BUF_SIZE_6;
 8000418:	4b53      	ldr	r3, [pc, #332]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 800041a:	2206      	movs	r2, #6
 800041c:	701a      	strb	r2, [r3, #0]
				chksum = TELM_CHECKSUM_CONST - SENSOR_TX_BUF_SIZE_6;
 800041e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8000422:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[1] = t = Transiever_RX_Buffer[1];
 8000424:	4b4c      	ldr	r3, [pc, #304]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000426:	785b      	ldrb	r3, [r3, #1]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	813b      	strh	r3, [r7, #8]
 800042c:	893b      	ldrh	r3, [r7, #8]
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b4d      	ldr	r3, [pc, #308]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 8000432:	705a      	strb	r2, [r3, #1]
				chksum -= t;
 8000434:	89fa      	ldrh	r2, [r7, #14]
 8000436:	893b      	ldrh	r3, [r7, #8]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[2] = t = SensorList[CHNL-1].SensorType;
 800043c:	7b3b      	ldrb	r3, [r7, #12]
 800043e:	3b01      	subs	r3, #1
 8000440:	4a48      	ldr	r2, [pc, #288]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 8000442:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000446:	813b      	strh	r3, [r7, #8]
 8000448:	893b      	ldrh	r3, [r7, #8]
 800044a:	b2da      	uxtb	r2, r3
 800044c:	4b46      	ldr	r3, [pc, #280]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 800044e:	709a      	strb	r2, [r3, #2]
				chksum -= t;
 8000450:	89fa      	ldrh	r2, [r7, #14]
 8000452:	893b      	ldrh	r3, [r7, #8]
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[3] = t = SIZE - 0x04;
 8000458:	7afb      	ldrb	r3, [r7, #11]
 800045a:	b29b      	uxth	r3, r3
 800045c:	3b04      	subs	r3, #4
 800045e:	813b      	strh	r3, [r7, #8]
 8000460:	893b      	ldrh	r3, [r7, #8]
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b40      	ldr	r3, [pc, #256]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 8000466:	70da      	strb	r2, [r3, #3]
				chksum -= t;
 8000468:	89fa      	ldrh	r2, [r7, #14]
 800046a:	893b      	ldrh	r3, [r7, #8]
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[4] = chksum;
 8000470:	89fb      	ldrh	r3, [r7, #14]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b3c      	ldr	r3, [pc, #240]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 8000476:	711a      	strb	r2, [r3, #4]
				TX_Buffer[5] = chksum >> 8;
 8000478:	89fb      	ldrh	r3, [r7, #14]
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	b29b      	uxth	r3, r3
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b39      	ldr	r3, [pc, #228]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 8000482:	715a      	strb	r2, [r3, #5]
				break;
 8000484:	e04d      	b.n	8000522 <Sensor_UART_RxComplete_Callback+0x22a>

			case SENSOR_CMD_MEAS:
				TX_Buffer[0] = SIZE;
 8000486:	4a38      	ldr	r2, [pc, #224]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	7013      	strb	r3, [r2, #0]
				chksum = TELM_CHECKSUM_CONST - SIZE;
 800048c:	7afb      	ldrb	r3, [r7, #11]
 800048e:	b29b      	uxth	r3, r3
 8000490:	43db      	mvns	r3, r3
 8000492:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[1] = t = Transiever_RX_Buffer[1];
 8000494:	4b30      	ldr	r3, [pc, #192]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000496:	785b      	ldrb	r3, [r3, #1]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	813b      	strh	r3, [r7, #8]
 800049c:	893b      	ldrh	r3, [r7, #8]
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b31      	ldr	r3, [pc, #196]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 80004a2:	705a      	strb	r2, [r3, #1]
				chksum -= t;
 80004a4:	89fa      	ldrh	r2, [r7, #14]
 80004a6:	893b      	ldrh	r3, [r7, #8]
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	81fb      	strh	r3, [r7, #14]
				for (i = 2; i < SIZE - 2; i++) {
 80004ac:	2302      	movs	r3, #2
 80004ae:	737b      	strb	r3, [r7, #13]
 80004b0:	e018      	b.n	80004e4 <Sensor_UART_RxComplete_Callback+0x1ec>
					TX_Buffer[i] = t = (uint8_t) (SensorList[CHNL-1].SensorMeas >> 8*(i-2));
 80004b2:	7b3b      	ldrb	r3, [r7, #12]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a2b      	ldr	r2, [pc, #172]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	4413      	add	r3, r2
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	7b7b      	ldrb	r3, [r7, #13]
 80004c0:	3b02      	subs	r3, #2
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	fa42 f303 	asr.w	r3, r2, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	813b      	strh	r3, [r7, #8]
 80004cc:	7b7b      	ldrb	r3, [r7, #13]
 80004ce:	893a      	ldrh	r2, [r7, #8]
 80004d0:	b2d1      	uxtb	r1, r2
 80004d2:	4a25      	ldr	r2, [pc, #148]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 80004d4:	54d1      	strb	r1, [r2, r3]
					chksum -= t;
 80004d6:	89fa      	ldrh	r2, [r7, #14]
 80004d8:	893b      	ldrh	r3, [r7, #8]
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	81fb      	strh	r3, [r7, #14]
				for (i = 2; i < SIZE - 2; i++) {
 80004de:	7b7b      	ldrb	r3, [r7, #13]
 80004e0:	3301      	adds	r3, #1
 80004e2:	737b      	strb	r3, [r7, #13]
 80004e4:	7b7a      	ldrb	r2, [r7, #13]
 80004e6:	7afb      	ldrb	r3, [r7, #11]
 80004e8:	3b02      	subs	r3, #2
 80004ea:	429a      	cmp	r2, r3
 80004ec:	dbe1      	blt.n	80004b2 <Sensor_UART_RxComplete_Callback+0x1ba>
				}
				TX_Buffer[i++] = chksum;
 80004ee:	7b7b      	ldrb	r3, [r7, #13]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	737a      	strb	r2, [r7, #13]
 80004f4:	461a      	mov	r2, r3
 80004f6:	89fb      	ldrh	r3, [r7, #14]
 80004f8:	b2d9      	uxtb	r1, r3
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 80004fc:	5499      	strb	r1, [r3, r2]
				TX_Buffer[i  ] = chksum >> 8;
 80004fe:	89fb      	ldrh	r3, [r7, #14]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	b29a      	uxth	r2, r3
 8000504:	7b7b      	ldrb	r3, [r7, #13]
 8000506:	b2d1      	uxtb	r1, r2
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 800050a:	54d1      	strb	r1, [r2, r3]

				break;
 800050c:	e009      	b.n	8000522 <Sensor_UART_RxComplete_Callback+0x22a>

			default:
				while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
 800050e:	bf00      	nop
 8000510:	2204      	movs	r2, #4
 8000512:	4911      	ldr	r1, [pc, #68]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000514:	4811      	ldr	r0, [pc, #68]	; (800055c <Sensor_UART_RxComplete_Callback+0x264>)
 8000516:	f002 f98d 	bl	8002834 <HAL_UART_Receive_DMA>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f7      	bne.n	8000510 <Sensor_UART_RxComplete_Callback+0x218>
				return;
 8000520:	e014      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
		}

			while(HAL_HalfDuplex_EnableTransmitter(&huart1) != HAL_OK);
 8000522:	bf00      	nop
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <Sensor_UART_RxComplete_Callback+0x264>)
 8000526:	f002 fc14 	bl	8002d52 <HAL_HalfDuplex_EnableTransmitter>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1f9      	bne.n	8000524 <Sensor_UART_RxComplete_Callback+0x22c>
			while(HAL_UART_Transmit_DMA(&huart1, (uint8_t *) TX_Buffer, TX_Buffer[0]) != HAL_OK);
 8000530:	bf00      	nop
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	b29b      	uxth	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	490a      	ldr	r1, [pc, #40]	; (8000568 <Sensor_UART_RxComplete_Callback+0x270>)
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <Sensor_UART_RxComplete_Callback+0x264>)
 8000540:	f002 f90c 	bl	800275c <HAL_UART_Transmit_DMA>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1f3      	bne.n	8000532 <Sensor_UART_RxComplete_Callback+0x23a>
			return;
 800054a:	bf00      	nop
	}
}
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000148 	.word	0x20000148
 8000558:	200000fc 	.word	0x200000fc
 800055c:	20000150 	.word	0x20000150
 8000560:	200000fd 	.word	0x200000fd
 8000564:	20000000 	.word	0x20000000
 8000568:	20000100 	.word	0x20000100

0800056c <Sensor_UART_TxComplete_Callback>:

void Sensor_UART_TxComplete_Callback(struct __UART_HandleTypeDef *huart){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	while(HAL_HalfDuplex_EnableReceiver(&huart1) != HAL_OK);
 8000574:	bf00      	nop
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <Sensor_UART_TxComplete_Callback+0x34>)
 8000578:	f002 fc1e 	bl	8002db8 <HAL_HalfDuplex_EnableReceiver>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f9      	bne.n	8000576 <Sensor_UART_TxComplete_Callback+0xa>
	while(HAL_UART_Receive_DMA(&huart1, (uint8_t*) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
 8000582:	bf00      	nop
 8000584:	2204      	movs	r2, #4
 8000586:	4907      	ldr	r1, [pc, #28]	; (80005a4 <Sensor_UART_TxComplete_Callback+0x38>)
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <Sensor_UART_TxComplete_Callback+0x34>)
 800058a:	f002 f953 	bl	8002834 <HAL_UART_Receive_DMA>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f7      	bne.n	8000584 <Sensor_UART_TxComplete_Callback+0x18>
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000150 	.word	0x20000150
 80005a4:	200000fc 	.word	0x200000fc

080005a8 <Servo_UART_RxComplete_Callback>:

void Servo_UART_RxComplete_Callback(struct __UART_HandleTypeDef *huart){
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint16_t t, chksum = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	817b      	strh	r3, [r7, #10]

	switch (FLAGS.TELEMETRY_SYNC_STATES) {
 80005b4:	4b53      	ldr	r3, [pc, #332]	; (8000704 <Servo_UART_RxComplete_Callback+0x15c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d032      	beq.n	8000628 <Servo_UART_RxComplete_Callback+0x80>
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	dc03      	bgt.n	80005ce <Servo_UART_RxComplete_Callback+0x26>
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d012      	beq.n	80005f0 <Servo_UART_RxComplete_Callback+0x48>
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d041      	beq.n	8000652 <Servo_UART_RxComplete_Callback+0xaa>
		case TELEMETRY_SYNC_SYNC0:
			if(Transiever_TX_Buffer[0] == SERVO_HEADER_1) {
 80005ce:	4b4e      	ldr	r3, [pc, #312]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b20      	cmp	r3, #32
 80005d6:	d105      	bne.n	80005e4 <Servo_UART_RxComplete_Callback+0x3c>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC1;
 80005d8:	4a4a      	ldr	r2, [pc, #296]	; (8000704 <Servo_UART_RxComplete_Callback+0x15c>)
 80005da:	7813      	ldrb	r3, [r2, #0]
 80005dc:	2101      	movs	r1, #1
 80005de:	f361 03c4 	bfi	r3, r1, #3, #2
 80005e2:	7013      	strb	r3, [r2, #0]
			}
			HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[1], 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	4949      	ldr	r1, [pc, #292]	; (800070c <Servo_UART_RxComplete_Callback+0x164>)
 80005e8:	4849      	ldr	r0, [pc, #292]	; (8000710 <Servo_UART_RxComplete_Callback+0x168>)
 80005ea:	f002 f923 	bl	8002834 <HAL_UART_Receive_DMA>
			break;
 80005ee:	e084      	b.n	80006fa <Servo_UART_RxComplete_Callback+0x152>

		case TELEMETRY_SYNC_SYNC1:
			if(Transiever_TX_Buffer[1] == SERVO_HEADER_2) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b40      	cmp	r3, #64	; 0x40
 80005f8:	d10b      	bne.n	8000612 <Servo_UART_RxComplete_Callback+0x6a>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNCED;
 80005fa:	4a42      	ldr	r2, [pc, #264]	; (8000704 <Servo_UART_RxComplete_Callback+0x15c>)
 80005fc:	7813      	ldrb	r3, [r2, #0]
 80005fe:	2102      	movs	r1, #2
 8000600:	f361 03c4 	bfi	r3, r1, #3, #2
 8000604:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[2], SERVO_BUFFER_SIZE-2);
 8000606:	221e      	movs	r2, #30
 8000608:	4942      	ldr	r1, [pc, #264]	; (8000714 <Servo_UART_RxComplete_Callback+0x16c>)
 800060a:	4841      	ldr	r0, [pc, #260]	; (8000710 <Servo_UART_RxComplete_Callback+0x168>)
 800060c:	f002 f912 	bl	8002834 <HAL_UART_Receive_DMA>
			} else {
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
			}
			break;
 8000610:	e073      	b.n	80006fa <Servo_UART_RxComplete_Callback+0x152>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 8000612:	4a3c      	ldr	r2, [pc, #240]	; (8000704 <Servo_UART_RxComplete_Callback+0x15c>)
 8000614:	7813      	ldrb	r3, [r2, #0]
 8000616:	f36f 03c4 	bfc	r3, #3, #2
 800061a:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
 800061c:	2201      	movs	r2, #1
 800061e:	493a      	ldr	r1, [pc, #232]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 8000620:	483b      	ldr	r0, [pc, #236]	; (8000710 <Servo_UART_RxComplete_Callback+0x168>)
 8000622:	f002 f907 	bl	8002834 <HAL_UART_Receive_DMA>
			break;
 8000626:	e068      	b.n	80006fa <Servo_UART_RxComplete_Callback+0x152>

		case TELEMETRY_SYNC_VERIFIED:
			if((Transiever_TX_Buffer[0] != SERVO_HEADER_1) || (Transiever_TX_Buffer[1] != SERVO_HEADER_2)) {
 8000628:	4b37      	ldr	r3, [pc, #220]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b20      	cmp	r3, #32
 8000630:	d104      	bne.n	800063c <Servo_UART_RxComplete_Callback+0x94>
 8000632:	4b35      	ldr	r3, [pc, #212]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b40      	cmp	r3, #64	; 0x40
 800063a:	d00a      	beq.n	8000652 <Servo_UART_RxComplete_Callback+0xaa>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 800063c:	4a31      	ldr	r2, [pc, #196]	; (8000704 <Servo_UART_RxComplete_Callback+0x15c>)
 800063e:	7813      	ldrb	r3, [r2, #0]
 8000640:	f36f 03c4 	bfc	r3, #3, #2
 8000644:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
 8000646:	2201      	movs	r2, #1
 8000648:	492f      	ldr	r1, [pc, #188]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 800064a:	4831      	ldr	r0, [pc, #196]	; (8000710 <Servo_UART_RxComplete_Callback+0x168>)
 800064c:	f002 f8f2 	bl	8002834 <HAL_UART_Receive_DMA>
				break;
 8000650:	e053      	b.n	80006fa <Servo_UART_RxComplete_Callback+0x152>
			}
		case TELEMETRY_SYNC_SYNCED:
			t = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	81fb      	strh	r3, [r7, #14]
			for(uint8_t i = 0; i < SERVO_BUFFER_SIZE-2; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	737b      	strb	r3, [r7, #13]
 800065a:	e00a      	b.n	8000672 <Servo_UART_RxComplete_Callback+0xca>
				t += Transiever_TX_Buffer[i];
 800065c:	7b7b      	ldrb	r3, [r7, #13]
 800065e:	4a2a      	ldr	r2, [pc, #168]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 8000660:	5cd3      	ldrb	r3, [r2, r3]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	b29a      	uxth	r2, r3
 8000666:	89fb      	ldrh	r3, [r7, #14]
 8000668:	4413      	add	r3, r2
 800066a:	81fb      	strh	r3, [r7, #14]
			for(uint8_t i = 0; i < SERVO_BUFFER_SIZE-2; i++)
 800066c:	7b7b      	ldrb	r3, [r7, #13]
 800066e:	3301      	adds	r3, #1
 8000670:	737b      	strb	r3, [r7, #13]
 8000672:	7b7b      	ldrb	r3, [r7, #13]
 8000674:	2b1d      	cmp	r3, #29
 8000676:	d9f1      	bls.n	800065c <Servo_UART_RxComplete_Callback+0xb4>

			t = TELM_CHECKSUM_CONST-t;
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	43db      	mvns	r3, r3
 800067c:	81fb      	strh	r3, [r7, #14]
			chksum = (Transiever_TX_Buffer[31]<<8 | Transiever_TX_Buffer[30]);
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 8000680:	7fdb      	ldrb	r3, [r3, #31]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b21a      	sxth	r2, r3
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 800068a:	7f9b      	ldrb	r3, [r3, #30]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21b      	sxth	r3, r3
 8000694:	817b      	strh	r3, [r7, #10]
			if(t == chksum) {
 8000696:	89fa      	ldrh	r2, [r7, #14]
 8000698:	897b      	ldrh	r3, [r7, #10]
 800069a:	429a      	cmp	r2, r3
 800069c:	d122      	bne.n	80006e4 <Servo_UART_RxComplete_Callback+0x13c>
				memcpy(&ServoList, (uint8_t *) Transiever_TX_Buffer, SERVO_BUFFER_SIZE);
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <Servo_UART_RxComplete_Callback+0x170>)
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 80006a2:	4614      	mov	r4, r2
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				FLAGS.FAIL_SAFE = (ServoList.Channel_11 > 1975);
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <Servo_UART_RxComplete_Callback+0x170>)
 80006b4:	8adb      	ldrh	r3, [r3, #22]
 80006b6:	f240 72b7 	movw	r2, #1975	; 0x7b7
 80006ba:	4293      	cmp	r3, r2
 80006bc:	bf8c      	ite	hi
 80006be:	2301      	movhi	r3, #1
 80006c0:	2300      	movls	r3, #0
 80006c2:	b2d9      	uxtb	r1, r3
 80006c4:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <Servo_UART_RxComplete_Callback+0x15c>)
 80006c6:	7813      	ldrb	r3, [r2, #0]
 80006c8:	f361 0341 	bfi	r3, r1, #1, #1
 80006cc:	7013      	strb	r3, [r2, #0]
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_VERIFIED;
 80006ce:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <Servo_UART_RxComplete_Callback+0x15c>)
 80006d0:	7813      	ldrb	r3, [r2, #0]
 80006d2:	f043 0318 	orr.w	r3, r3, #24
 80006d6:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], SERVO_BUFFER_SIZE);
 80006d8:	2220      	movs	r2, #32
 80006da:	490b      	ldr	r1, [pc, #44]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <Servo_UART_RxComplete_Callback+0x168>)
 80006de:	f002 f8a9 	bl	8002834 <HAL_UART_Receive_DMA>
			} else {
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
			}
			break;
 80006e2:	e009      	b.n	80006f8 <Servo_UART_RxComplete_Callback+0x150>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <Servo_UART_RxComplete_Callback+0x15c>)
 80006e6:	7813      	ldrb	r3, [r2, #0]
 80006e8:	f36f 03c4 	bfc	r3, #3, #2
 80006ec:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	4905      	ldr	r1, [pc, #20]	; (8000708 <Servo_UART_RxComplete_Callback+0x160>)
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <Servo_UART_RxComplete_Callback+0x168>)
 80006f4:	f002 f89e 	bl	8002834 <HAL_UART_Receive_DMA>
			break;
 80006f8:	bf00      	nop
	}
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bdb0      	pop	{r4, r5, r7, pc}
 8000702:	bf00      	nop
 8000704:	20000148 	.word	0x20000148
 8000708:	20000128 	.word	0x20000128
 800070c:	20000129 	.word	0x20000129
 8000710:	200001c4 	.word	0x200001c4
 8000714:	2000012a 	.word	0x2000012a
 8000718:	20000108 	.word	0x20000108

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_DMA_Init+0x58>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_DMA_Init+0x58>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_DMA_Init+0x58>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	200e      	movs	r0, #14
 8000740:	f000 fd61 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000744:	200e      	movs	r0, #14
 8000746:	f000 fd7a 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	200f      	movs	r0, #15
 8000750:	f000 fd59 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000754:	200f      	movs	r0, #15
 8000756:	f000 fd72 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2010      	movs	r0, #16
 8000760:	f000 fd51 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000764:	2010      	movs	r0, #16
 8000766:	f000 fd6a 	bl	800123e <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_GPIO_Init+0x58>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_GPIO_Init+0x58>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_GPIO_Init+0x58>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f003 0320 	and.w	r3, r3, #32
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_GPIO_Init+0x58>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <MX_GPIO_Init+0x58>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_GPIO_Init+0x58>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_GPIO_Init+0x58>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <MX_GPIO_Init+0x58>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <MX_GPIO_Init+0x58>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000

080007d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00b      	beq.n	8000814 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007fc:	e000      	b.n	8000800 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f9      	beq.n	80007fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800080a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000814:	687b      	ldr	r3, [r7, #4]
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fb6d 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f83d 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f7ff ffa3 	bl	8000778 <MX_GPIO_Init>
  MX_DMA_Init();
 8000832:	f7ff ff73 	bl	800071c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000836:	f000 f9b7 	bl	8000ba8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800083a:	f000 f9df 	bl	8000bfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Sensor_UART_Telemetry_Init(&huart1);
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <main+0x70>)
 8000840:	f7ff fc84 	bl	800014c <Sensor_UART_Telemetry_Init>
  Servo_UART_Telemetry_Init(&huart2);
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <main+0x74>)
 8000846:	f7ff fca9 	bl	800019c <Servo_UART_Telemetry_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("%ld: ", HAL_GetTick());
 800084a:	f000 fbb3 	bl	8000fb4 <HAL_GetTick>
 800084e:	4603      	mov	r3, r0
 8000850:	4619      	mov	r1, r3
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <main+0x78>)
 8000854:	f002 fea0 	bl	8003598 <iprintf>
	  for(uint8_t i = 1; i <= NUM_SENSORS; i++)
 8000858:	2301      	movs	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	e00b      	b.n	8000876 <main+0x56>
		  printf("%d\t", (uint16_t) *(((uint16_t*) &ServoList)+i) );
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <main+0x7c>)
 8000864:	4413      	add	r3, r2
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <main+0x80>)
 800086c:	f002 fe94 	bl	8003598 <iprintf>
	  for(uint8_t i = 1; i <= NUM_SENSORS; i++)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	3301      	adds	r3, #1
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b0e      	cmp	r3, #14
 800087a:	d9f0      	bls.n	800085e <main+0x3e>
	  printf("\t%d\n", sizeof(FLAGS));
 800087c:	2101      	movs	r1, #1
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <main+0x84>)
 8000880:	f002 fe8a 	bl	8003598 <iprintf>

	  HAL_Delay(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f000 fb9e 	bl	8000fc8 <HAL_Delay>
	  printf("%ld: ", HAL_GetTick());
 800088c:	e7dd      	b.n	800084a <main+0x2a>
 800088e:	bf00      	nop
 8000890:	20000150 	.word	0x20000150
 8000894:	200001c4 	.word	0x200001c4
 8000898:	08004538 	.word	0x08004538
 800089c:	20000108 	.word	0x20000108
 80008a0:	08004540 	.word	0x08004540
 80008a4:	08004544 	.word	0x08004544

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b090      	sub	sp, #64	; 0x40
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2228      	movs	r2, #40	; 0x28
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fe66 	bl	8003588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fa11 	bl	8001d18 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008fc:	f000 f826 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2302      	movs	r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fc7e 	bl	800221c <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000926:	f000 f811 	bl	800094c <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3740      	adds	r7, #64	; 0x40
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <__io_putchar>:

/* USER CODE BEGIN 4 */

// ITM SWO Printf Implementation
int __io_putchar(int ch)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff49 	bl	80007d4 <ITM_SendChar>
	return(ch);
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_MspInit+0x5c>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <HAL_MspInit+0x5c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_MspInit+0x5c>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x5c>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x5c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x5c>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_MspInit+0x60>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_MspInit+0x60>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010000 	.word	0x40010000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a02:	f000 fac5 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <DMA1_Channel4_IRQHandler+0x10>)
 8000a12:	f000 fe03 	bl	800161c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000027c 	.word	0x2000027c

08000a20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <DMA1_Channel5_IRQHandler+0x10>)
 8000a26:	f000 fdf9 	bl	800161c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000238 	.word	0x20000238

08000a34 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <DMA1_Channel6_IRQHandler+0x10>)
 8000a3a:	f000 fdef 	bl	800161c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002c0 	.word	0x200002c0

08000a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <USART1_IRQHandler+0x10>)
 8000a4e:	f001 ff7d 	bl	800294c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000150 	.word	0x20000150

08000a5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a6e:	f3af 8000 	nop.w
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
	}

return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e009      	b.n	8000abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff3e 	bl	8000932 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf1      	blt.n	8000aa8 <_write+0x12>
	}
	return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_close>:

int _close(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af4:	605a      	str	r2, [r3, #4]
	return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <_isatty>:

int _isatty(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
	return 1;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr

08000b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
	return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
	...

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f002 fce8 	bl	8003534 <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20005000 	.word	0x20005000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	2000014c 	.word	0x2000014c
 8000b98:	20000318 	.word	0x20000318

08000b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_USART1_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000be0:	f001 fcb4 	bl	800254c <HAL_HalfDuplex_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f7ff feaf 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000150 	.word	0x20000150
 8000bf8:	40013800 	.word	0x40013800

08000bfc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f001 fc8a 	bl	800254c <HAL_HalfDuplex_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f7ff fe85 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001c4 	.word	0x200001c4
 8000c4c:	40004400 	.word	0x40004400

08000c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a68      	ldr	r2, [pc, #416]	; (8000e0c <HAL_UART_MspInit+0x1bc>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d179      	bne.n	8000d64 <HAL_UART_MspInit+0x114>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c70:	4b67      	ldr	r3, [pc, #412]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a66      	ldr	r2, [pc, #408]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b64      	ldr	r3, [pc, #400]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b61      	ldr	r3, [pc, #388]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a60      	ldr	r2, [pc, #384]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca6:	2312      	movs	r3, #18
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4857      	ldr	r0, [pc, #348]	; (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000cb6:	f000 fdef 	bl	8001898 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000cba:	4b57      	ldr	r3, [pc, #348]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000cbc:	4a57      	ldr	r2, [pc, #348]	; (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000cbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc0:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc6:	4b54      	ldr	r3, [pc, #336]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ccc:	4b52      	ldr	r3, [pc, #328]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd2:	4b51      	ldr	r3, [pc, #324]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cde:	4b4e      	ldr	r3, [pc, #312]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce4:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cea:	484b      	ldr	r0, [pc, #300]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000cec:	f000 fad0 	bl	8001290 <HAL_DMA_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 8000cf6:	f7ff fe29 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a46      	ldr	r2, [pc, #280]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000cfe:	639a      	str	r2, [r3, #56]	; 0x38
 8000d00:	4a45      	ldr	r2, [pc, #276]	; (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d06:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d08:	4a46      	ldr	r2, [pc, #280]	; (8000e24 <HAL_UART_MspInit+0x1d4>)
 8000d0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d0c:	4b44      	ldr	r3, [pc, #272]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d0e:	2210      	movs	r2, #16
 8000d10:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d18:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d1e:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d24:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d30:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d36:	483a      	ldr	r0, [pc, #232]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d38:	f000 faaa 	bl	8001290 <HAL_DMA_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000d42:	f7ff fe03 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a35      	ldr	r2, [pc, #212]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4c:	4a34      	ldr	r2, [pc, #208]	; (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2025      	movs	r0, #37	; 0x25
 8000d58:	f000 fa55 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d5c:	2025      	movs	r0, #37	; 0x25
 8000d5e:	f000 fa6e 	bl	800123e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d62:	e04e      	b.n	8000e02 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d149      	bne.n	8000e02 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	4a27      	ldr	r2, [pc, #156]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	61d3      	str	r3, [r2, #28]
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da2:	2312      	movs	r3, #18
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4818      	ldr	r0, [pc, #96]	; (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000db2:	f000 fd71 	bl	8001898 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_UART_MspInit+0x1e0>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000de6:	4811      	ldr	r0, [pc, #68]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000de8:	f000 fa52 	bl	8001290 <HAL_DMA_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8000df2:	f7ff fdab 	bl	800094c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010800 	.word	0x40010800
 8000e18:	20000238 	.word	0x20000238
 8000e1c:	40020058 	.word	0x40020058
 8000e20:	2000027c 	.word	0x2000027c
 8000e24:	40020044 	.word	0x40020044
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	200002c0 	.word	0x200002c0
 8000e30:	4002006c 	.word	0x4002006c

08000e34 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <HAL_UART_MspDeInit+0x74>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d118      	bne.n	8000e78 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_UART_MspDeInit+0x78>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4a18      	ldr	r2, [pc, #96]	; (8000eac <HAL_UART_MspDeInit+0x78>)
 8000e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e50:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8000e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e56:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <HAL_UART_MspDeInit+0x7c>)
 8000e58:	f000 fea2 	bl	8001ba0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fa6f 	bl	8001344 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fa6a 	bl	8001344 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000e70:	2025      	movs	r0, #37	; 0x25
 8000e72:	f000 f9f2 	bl	800125a <HAL_NVIC_DisableIRQ>
    HAL_DMA_DeInit(uartHandle->hdmarx);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000e76:	e013      	b.n	8000ea0 <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_UART_MspDeInit+0x80>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10e      	bne.n	8000ea0 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_UART_MspDeInit+0x78>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <HAL_UART_MspDeInit+0x78>)
 8000e88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e8c:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <HAL_UART_MspDeInit+0x7c>)
 8000e92:	f000 fe85 	bl	8001ba0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fa52 	bl	8001344 <HAL_DMA_DeInit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <Reset_Handler>:
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <LoopFillZerobss+0x12>)
 8000eba:	490d      	ldr	r1, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x16>)
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x1a>)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:
 8000ec2:	58d4      	ldr	r4, [r2, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:
 8000ec8:	18c4      	adds	r4, r0, r3
 8000eca:	428c      	cmp	r4, r1
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <LoopFillZerobss+0x1e>)
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	; (8000efc <LoopFillZerobss+0x22>)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:
 8000eda:	42a2      	cmp	r2, r4
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>
 8000ede:	f7ff fe5d 	bl	8000b9c <SystemInit>
 8000ee2:	f002 fb2d 	bl	8003540 <__libc_init_array>
 8000ee6:	f7ff fc9b 	bl	8000820 <main>
 8000eea:	4770      	bx	lr
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	200000e0 	.word	0x200000e0
 8000ef4:	08004614 	.word	0x08004614
 8000ef8:	200000e0 	.word	0x200000e0
 8000efc:	20000318 	.word	0x20000318

08000f00 <ADC1_2_IRQHandler>:
 8000f00:	e7fe      	b.n	8000f00 <ADC1_2_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x28>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x28>)
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f96b 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fd1a 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40022000 	.word	0x40022000

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f991 	bl	8001276 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f94b 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000070 	.word	0x20000070
 8000f88:	20000078 	.word	0x20000078
 8000f8c:	20000074 	.word	0x20000074

08000f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_IncTick+0x1c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a03      	ldr	r2, [pc, #12]	; (8000fb0 <HAL_IncTick+0x20>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000078 	.word	0x20000078
 8000fb0:	20000304 	.word	0x20000304

08000fb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <HAL_GetTick+0x10>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000304 	.word	0x20000304

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff fff0 	bl	8000fb4 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffe0 	bl	8000fb4 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000078 	.word	0x20000078

08001010 <__NVIC_SetPriorityGrouping>:
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4906      	ldr	r1, [pc, #24]	; (80010a8 <__NVIC_EnableIRQ+0x34>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_DisableIRQ>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db12      	blt.n	80010e4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	490a      	ldr	r1, [pc, #40]	; (80010f0 <__NVIC_DisableIRQ+0x44>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	3320      	adds	r3, #32
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010d8:	f3bf 8f4f 	dsb	sy
}
 80010dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010de:	f3bf 8f6f 	isb	sy
}
 80010e2:	bf00      	nop
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <SysTick_Config>:
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff90 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff09 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff1e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff90 	bl	8001148 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5f 	bl	80010f4 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff11 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff1f 	bl	80010ac <__NVIC_DisableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff94 	bl	80011ac <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e043      	b.n	800132e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_DMA_Init+0xa8>)
 80012ae:	4413      	add	r3, r2
 80012b0:	4a22      	ldr	r2, [pc, #136]	; (800133c <HAL_DMA_Init+0xac>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	009a      	lsls	r2, r3, #2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_DMA_Init+0xb0>)
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	bffdfff8 	.word	0xbffdfff8
 800133c:	cccccccd 	.word	0xcccccccd
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e046      	b.n	80013e4 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0201 	bic.w	r2, r2, #1
 8001364:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_DMA_DeInit+0xac>)
 800138e:	4413      	add	r3, r2
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_DMA_DeInit+0xb0>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	009a      	lsls	r2, r3, #2
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <HAL_DMA_DeInit+0xb4>)
 80013a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ac:	2101      	movs	r1, #1
 80013ae:	fa01 f202 	lsl.w	r2, r1, r2
 80013b2:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	bffdfff8 	.word	0xbffdfff8
 80013f4:	cccccccd 	.word	0xcccccccd
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_DMA_Start_IT+0x20>
 8001418:	2302      	movs	r3, #2
 800141a:	e04a      	b.n	80014b2 <HAL_DMA_Start_IT+0xb6>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800142a:	2b01      	cmp	r3, #1
 800142c:	d13a      	bne.n	80014a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2202      	movs	r2, #2
 8001432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2200      	movs	r2, #0
 800143a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 f9f3 	bl	800183e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 020e 	orr.w	r2, r2, #14
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e00f      	b.n	8001492 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0204 	bic.w	r2, r2, #4
 8001480:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 020a 	orr.w	r2, r2, #10
 8001490:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e005      	b.n	80014b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014ac:	2302      	movs	r3, #2
 80014ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d008      	beq.n	80014e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2204      	movs	r2, #4
 80014d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e020      	b.n	8001524 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 020e 	bic.w	r2, r2, #14
 80014f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
	...

08001530 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001542:	2b02      	cmp	r3, #2
 8001544:	d005      	beq.n	8001552 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2204      	movs	r2, #4
 800154a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e051      	b.n	80015f6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 020e 	bic.w	r2, r2, #14
 8001560:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0201 	bic.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a22      	ldr	r2, [pc, #136]	; (8001600 <HAL_DMA_Abort_IT+0xd0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d029      	beq.n	80015d0 <HAL_DMA_Abort_IT+0xa0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a20      	ldr	r2, [pc, #128]	; (8001604 <HAL_DMA_Abort_IT+0xd4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d022      	beq.n	80015cc <HAL_DMA_Abort_IT+0x9c>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_DMA_Abort_IT+0xd8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d01a      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x96>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_DMA_Abort_IT+0xdc>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d012      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x90>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <HAL_DMA_Abort_IT+0xe0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d00a      	beq.n	80015ba <HAL_DMA_Abort_IT+0x8a>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_DMA_Abort_IT+0xe4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d102      	bne.n	80015b4 <HAL_DMA_Abort_IT+0x84>
 80015ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015b2:	e00e      	b.n	80015d2 <HAL_DMA_Abort_IT+0xa2>
 80015b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b8:	e00b      	b.n	80015d2 <HAL_DMA_Abort_IT+0xa2>
 80015ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015be:	e008      	b.n	80015d2 <HAL_DMA_Abort_IT+0xa2>
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	e005      	b.n	80015d2 <HAL_DMA_Abort_IT+0xa2>
 80015c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ca:	e002      	b.n	80015d2 <HAL_DMA_Abort_IT+0xa2>
 80015cc:	2310      	movs	r3, #16
 80015ce:	e000      	b.n	80015d2 <HAL_DMA_Abort_IT+0xa2>
 80015d0:	2301      	movs	r3, #1
 80015d2:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_DMA_Abort_IT+0xe8>)
 80015d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	4798      	blx	r3
    } 
  }
  return status;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40020008 	.word	0x40020008
 8001604:	4002001c 	.word	0x4002001c
 8001608:	40020030 	.word	0x40020030
 800160c:	40020044 	.word	0x40020044
 8001610:	40020058 	.word	0x40020058
 8001614:	4002006c 	.word	0x4002006c
 8001618:	40020000 	.word	0x40020000

0800161c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	2204      	movs	r2, #4
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d04f      	beq.n	80016e4 <HAL_DMA_IRQHandler+0xc8>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d04a      	beq.n	80016e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0204 	bic.w	r2, r2, #4
 800166a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a66      	ldr	r2, [pc, #408]	; (800180c <HAL_DMA_IRQHandler+0x1f0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d029      	beq.n	80016ca <HAL_DMA_IRQHandler+0xae>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a65      	ldr	r2, [pc, #404]	; (8001810 <HAL_DMA_IRQHandler+0x1f4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xaa>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a63      	ldr	r2, [pc, #396]	; (8001814 <HAL_DMA_IRQHandler+0x1f8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01a      	beq.n	80016c0 <HAL_DMA_IRQHandler+0xa4>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a62      	ldr	r2, [pc, #392]	; (8001818 <HAL_DMA_IRQHandler+0x1fc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d012      	beq.n	80016ba <HAL_DMA_IRQHandler+0x9e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a60      	ldr	r2, [pc, #384]	; (800181c <HAL_DMA_IRQHandler+0x200>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00a      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x98>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a5f      	ldr	r2, [pc, #380]	; (8001820 <HAL_DMA_IRQHandler+0x204>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d102      	bne.n	80016ae <HAL_DMA_IRQHandler+0x92>
 80016a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ac:	e00e      	b.n	80016cc <HAL_DMA_IRQHandler+0xb0>
 80016ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016b2:	e00b      	b.n	80016cc <HAL_DMA_IRQHandler+0xb0>
 80016b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016b8:	e008      	b.n	80016cc <HAL_DMA_IRQHandler+0xb0>
 80016ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016be:	e005      	b.n	80016cc <HAL_DMA_IRQHandler+0xb0>
 80016c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c4:	e002      	b.n	80016cc <HAL_DMA_IRQHandler+0xb0>
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	e000      	b.n	80016cc <HAL_DMA_IRQHandler+0xb0>
 80016ca:	2304      	movs	r3, #4
 80016cc:	4a55      	ldr	r2, [pc, #340]	; (8001824 <HAL_DMA_IRQHandler+0x208>)
 80016ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8094 	beq.w	8001802 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016e2:	e08e      	b.n	8001802 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	2202      	movs	r2, #2
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d056      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x186>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d051      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10b      	bne.n	8001724 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 020a 	bic.w	r2, r2, #10
 800171a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a38      	ldr	r2, [pc, #224]	; (800180c <HAL_DMA_IRQHandler+0x1f0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d029      	beq.n	8001782 <HAL_DMA_IRQHandler+0x166>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a37      	ldr	r2, [pc, #220]	; (8001810 <HAL_DMA_IRQHandler+0x1f4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d022      	beq.n	800177e <HAL_DMA_IRQHandler+0x162>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a35      	ldr	r2, [pc, #212]	; (8001814 <HAL_DMA_IRQHandler+0x1f8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01a      	beq.n	8001778 <HAL_DMA_IRQHandler+0x15c>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a34      	ldr	r2, [pc, #208]	; (8001818 <HAL_DMA_IRQHandler+0x1fc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d012      	beq.n	8001772 <HAL_DMA_IRQHandler+0x156>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a32      	ldr	r2, [pc, #200]	; (800181c <HAL_DMA_IRQHandler+0x200>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00a      	beq.n	800176c <HAL_DMA_IRQHandler+0x150>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a31      	ldr	r2, [pc, #196]	; (8001820 <HAL_DMA_IRQHandler+0x204>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d102      	bne.n	8001766 <HAL_DMA_IRQHandler+0x14a>
 8001760:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001764:	e00e      	b.n	8001784 <HAL_DMA_IRQHandler+0x168>
 8001766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800176a:	e00b      	b.n	8001784 <HAL_DMA_IRQHandler+0x168>
 800176c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001770:	e008      	b.n	8001784 <HAL_DMA_IRQHandler+0x168>
 8001772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001776:	e005      	b.n	8001784 <HAL_DMA_IRQHandler+0x168>
 8001778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177c:	e002      	b.n	8001784 <HAL_DMA_IRQHandler+0x168>
 800177e:	2320      	movs	r3, #32
 8001780:	e000      	b.n	8001784 <HAL_DMA_IRQHandler+0x168>
 8001782:	2302      	movs	r3, #2
 8001784:	4a27      	ldr	r2, [pc, #156]	; (8001824 <HAL_DMA_IRQHandler+0x208>)
 8001786:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d034      	beq.n	8001802 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017a0:	e02f      	b.n	8001802 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	2208      	movs	r2, #8
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d028      	beq.n	8001804 <HAL_DMA_IRQHandler+0x1e8>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d023      	beq.n	8001804 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 020e 	bic.w	r2, r2, #14
 80017ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
    }
  }
  return;
 8001802:	bf00      	nop
 8001804:	bf00      	nop
}
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020008 	.word	0x40020008
 8001810:	4002001c 	.word	0x4002001c
 8001814:	40020030 	.word	0x40020030
 8001818:	40020044 	.word	0x40020044
 800181c:	40020058 	.word	0x40020058
 8001820:	4002006c 	.word	0x4002006c
 8001824:	40020000 	.word	0x40020000

08001828 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b10      	cmp	r3, #16
 800186a:	d108      	bne.n	800187e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800187c:	e007      	b.n	800188e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	60da      	str	r2, [r3, #12]
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b08b      	sub	sp, #44	; 0x2c
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e169      	b.n	8001b80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018ac:	2201      	movs	r2, #1
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8158 	bne.w	8001b7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a9a      	ldr	r2, [pc, #616]	; (8001b38 <HAL_GPIO_Init+0x2a0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d05e      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018d4:	4a98      	ldr	r2, [pc, #608]	; (8001b38 <HAL_GPIO_Init+0x2a0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d875      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018da:	4a98      	ldr	r2, [pc, #608]	; (8001b3c <HAL_GPIO_Init+0x2a4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d058      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018e0:	4a96      	ldr	r2, [pc, #600]	; (8001b3c <HAL_GPIO_Init+0x2a4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d86f      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018e6:	4a96      	ldr	r2, [pc, #600]	; (8001b40 <HAL_GPIO_Init+0x2a8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d052      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018ec:	4a94      	ldr	r2, [pc, #592]	; (8001b40 <HAL_GPIO_Init+0x2a8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d869      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018f2:	4a94      	ldr	r2, [pc, #592]	; (8001b44 <HAL_GPIO_Init+0x2ac>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d04c      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018f8:	4a92      	ldr	r2, [pc, #584]	; (8001b44 <HAL_GPIO_Init+0x2ac>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d863      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018fe:	4a92      	ldr	r2, [pc, #584]	; (8001b48 <HAL_GPIO_Init+0x2b0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d046      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 8001904:	4a90      	ldr	r2, [pc, #576]	; (8001b48 <HAL_GPIO_Init+0x2b0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d85d      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d82a      	bhi.n	8001964 <HAL_GPIO_Init+0xcc>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d859      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <HAL_GPIO_Init+0x80>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001993 	.word	0x08001993
 800191c:	0800196d 	.word	0x0800196d
 8001920:	0800197f 	.word	0x0800197f
 8001924:	080019c1 	.word	0x080019c1
 8001928:	080019c7 	.word	0x080019c7
 800192c:	080019c7 	.word	0x080019c7
 8001930:	080019c7 	.word	0x080019c7
 8001934:	080019c7 	.word	0x080019c7
 8001938:	080019c7 	.word	0x080019c7
 800193c:	080019c7 	.word	0x080019c7
 8001940:	080019c7 	.word	0x080019c7
 8001944:	080019c7 	.word	0x080019c7
 8001948:	080019c7 	.word	0x080019c7
 800194c:	080019c7 	.word	0x080019c7
 8001950:	080019c7 	.word	0x080019c7
 8001954:	080019c7 	.word	0x080019c7
 8001958:	080019c7 	.word	0x080019c7
 800195c:	08001975 	.word	0x08001975
 8001960:	08001989 	.word	0x08001989
 8001964:	4a79      	ldr	r2, [pc, #484]	; (8001b4c <HAL_GPIO_Init+0x2b4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196a:	e02c      	b.n	80019c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e029      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	3304      	adds	r3, #4
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e024      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	3308      	adds	r3, #8
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e01f      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	330c      	adds	r3, #12
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e01a      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199a:	2304      	movs	r3, #4
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e013      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	611a      	str	r2, [r3, #16]
          break;
 80019b2:	e009      	b.n	80019c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2308      	movs	r3, #8
 80019b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	615a      	str	r2, [r3, #20]
          break;
 80019be:	e003      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          break;
 80019c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	; 0xff
 80019cc:	d801      	bhi.n	80019d2 <HAL_GPIO_Init+0x13a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	e001      	b.n	80019d6 <HAL_GPIO_Init+0x13e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3304      	adds	r3, #4
 80019d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d802      	bhi.n	80019e4 <HAL_GPIO_Init+0x14c>
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0x152>
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	3b08      	subs	r3, #8
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	210f      	movs	r1, #15
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	401a      	ands	r2, r3
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	431a      	orrs	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80b1 	beq.w	8001b7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a18:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <HAL_GPIO_Init+0x2b8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a4c      	ldr	r2, [pc, #304]	; (8001b50 <HAL_GPIO_Init+0x2b8>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_GPIO_Init+0x2b8>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a30:	4a48      	ldr	r2, [pc, #288]	; (8001b54 <HAL_GPIO_Init+0x2bc>)
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a40      	ldr	r2, [pc, #256]	; (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d013      	beq.n	8001a84 <HAL_GPIO_Init+0x1ec>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <HAL_GPIO_Init+0x2c4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00d      	beq.n	8001a80 <HAL_GPIO_Init+0x1e8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a3e      	ldr	r2, [pc, #248]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d007      	beq.n	8001a7c <HAL_GPIO_Init+0x1e4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a3d      	ldr	r2, [pc, #244]	; (8001b64 <HAL_GPIO_Init+0x2cc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_GPIO_Init+0x1e0>
 8001a74:	2303      	movs	r3, #3
 8001a76:	e006      	b.n	8001a86 <HAL_GPIO_Init+0x1ee>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e004      	b.n	8001a86 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e002      	b.n	8001a86 <HAL_GPIO_Init+0x1ee>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_GPIO_Init+0x1ee>
 8001a84:	2300      	movs	r3, #0
 8001a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a88:	f002 0203 	and.w	r2, r2, #3
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a96:	492f      	ldr	r1, [pc, #188]	; (8001b54 <HAL_GPIO_Init+0x2bc>)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	492c      	ldr	r1, [pc, #176]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4928      	ldr	r1, [pc, #160]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4922      	ldr	r1, [pc, #136]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	491e      	ldr	r1, [pc, #120]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	4918      	ldr	r1, [pc, #96]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4914      	ldr	r1, [pc, #80]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d021      	beq.n	8001b6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	490e      	ldr	r1, [pc, #56]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
 8001b34:	e021      	b.n	8001b7a <HAL_GPIO_Init+0x2e2>
 8001b36:	bf00      	nop
 8001b38:	10320000 	.word	0x10320000
 8001b3c:	10310000 	.word	0x10310000
 8001b40:	10220000 	.word	0x10220000
 8001b44:	10210000 	.word	0x10210000
 8001b48:	10120000 	.word	0x10120000
 8001b4c:	10110000 	.word	0x10110000
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40010800 	.word	0x40010800
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	40011000 	.word	0x40011000
 8001b64:	40011400 	.word	0x40011400
 8001b68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4909      	ldr	r1, [pc, #36]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f47f ae8e 	bne.w	80018ac <HAL_GPIO_Init+0x14>
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	372c      	adds	r7, #44	; 0x2c
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001bae:	e09a      	b.n	8001ce6 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 808d 	beq.w	8001ce0 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_GPIO_DeInit+0x160>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4013      	ands	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a46      	ldr	r2, [pc, #280]	; (8001d04 <HAL_GPIO_DeInit+0x164>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <HAL_GPIO_DeInit+0x78>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <HAL_GPIO_DeInit+0x168>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00d      	beq.n	8001c14 <HAL_GPIO_DeInit+0x74>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a44      	ldr	r2, [pc, #272]	; (8001d0c <HAL_GPIO_DeInit+0x16c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d007      	beq.n	8001c10 <HAL_GPIO_DeInit+0x70>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a43      	ldr	r2, [pc, #268]	; (8001d10 <HAL_GPIO_DeInit+0x170>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_GPIO_DeInit+0x6c>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e006      	b.n	8001c1a <HAL_GPIO_DeInit+0x7a>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e004      	b.n	8001c1a <HAL_GPIO_DeInit+0x7a>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e002      	b.n	8001c1a <HAL_GPIO_DeInit+0x7a>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_GPIO_DeInit+0x7a>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	f002 0203 	and.w	r2, r2, #3
 8001c20:	0092      	lsls	r2, r2, #2
 8001c22:	4093      	lsls	r3, r2
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d132      	bne.n	8001c90 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001c3a:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <HAL_GPIO_DeInit+0x160>)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	43da      	mvns	r2, r3
 8001c4a:	482d      	ldr	r0, [pc, #180]	; (8001d00 <HAL_GPIO_DeInit+0x160>)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	400a      	ands	r2, r1
 8001c52:	3302      	adds	r3, #2
 8001c54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001c58:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <HAL_GPIO_DeInit+0x174>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	492c      	ldr	r1, [pc, #176]	; (8001d14 <HAL_GPIO_DeInit+0x174>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_GPIO_DeInit+0x174>)
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4929      	ldr	r1, [pc, #164]	; (8001d14 <HAL_GPIO_DeInit+0x174>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_GPIO_DeInit+0x174>)
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	4925      	ldr	r1, [pc, #148]	; (8001d14 <HAL_GPIO_DeInit+0x174>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_GPIO_DeInit+0x174>)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4922      	ldr	r1, [pc, #136]	; (8001d14 <HAL_GPIO_DeInit+0x174>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d801      	bhi.n	8001c9a <HAL_GPIO_DeInit+0xfa>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e001      	b.n	8001c9e <HAL_GPIO_DeInit+0xfe>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d802      	bhi.n	8001cac <HAL_GPIO_DeInit+0x10c>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_DeInit+0x112>
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	3b08      	subs	r3, #8
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	210f      	movs	r1, #15
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f47f af5e 	bne.w	8001bb0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40010800 	.word	0x40010800
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40011400 	.word	0x40011400
 8001d14:	40010400 	.word	0x40010400

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e272      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8087 	beq.w	8001e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d38:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d00c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d44:	4b8f      	ldr	r3, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d112      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
 8001d50:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d06c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x12c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d168      	bne.n	8001e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e24c      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x76>
 8001d80:	4b80      	ldr	r3, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7f      	ldr	r2, [pc, #508]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e02e      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x98>
 8001d96:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xbc>
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a71      	ldr	r2, [pc, #452]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6e      	ldr	r2, [pc, #440]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001dd4:	4b6b      	ldr	r3, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6a      	ldr	r2, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a67      	ldr	r2, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff f8de 	bl	8000fb4 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff f8da 	bl	8000fb4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e200      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xe4>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f8ca 	bl	8000fb4 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff f8c6 	bl	8000fb4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1ec      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x10c>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e52:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1c0      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4939      	ldr	r1, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f87f 	bl	8000fb4 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff f87b 	bl	8000fb4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1a1      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f85e 	bl	8000fb4 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efc:	f7ff f85a 	bl	8000fb4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e180      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03a      	beq.n	8001f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d019      	beq.n	8001f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff f83e 	bl	8000fb4 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff f83a 	bl	8000fb4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e160      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f000 fad8 	bl	8002510 <RCC_Delay>
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff f824 	bl	8000fb4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7ff f820 	bl	8000fb4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e146      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	42420000 	.word	0x42420000
 8001f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b92      	ldr	r3, [pc, #584]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e9      	bne.n	8001f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a6 	beq.w	80020f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b8b      	ldr	r3, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a87      	ldr	r2, [pc, #540]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b85      	ldr	r3, [pc, #532]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7e      	ldr	r2, [pc, #504]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7fe ffe1 	bl	8000fb4 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7fe ffdd 	bl	8000fb4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e103      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b75      	ldr	r3, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4c8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x312>
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a6e      	ldr	r2, [pc, #440]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	e02d      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x334>
 8002032:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a66      	ldr	r2, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	e01c      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x356>
 8002054:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a5a      	ldr	r2, [pc, #360]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d015      	beq.n	80020ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7fe ff91 	bl	8000fb4 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe ff8d 	bl	8000fb4 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0b1      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ee      	beq.n	8002096 <HAL_RCC_OscConfig+0x37e>
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7fe ff7b 	bl	8000fb4 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7fe ff77 	bl	8000fb4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e09b      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	4b40      	ldr	r3, [pc, #256]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ee      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8087 	beq.w	800220e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d061      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d146      	bne.n	80021a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7fe ff4b 	bl	8000fb4 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe ff47 	bl	8000fb4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e06d      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d108      	bne.n	800215c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4921      	ldr	r1, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a19      	ldr	r1, [r3, #32]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	430b      	orrs	r3, r1
 800216e:	491b      	ldr	r1, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe ff1b 	bl	8000fb4 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe ff17 	bl	8000fb4 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e03d      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x46a>
 80021a0:	e035      	b.n	800220e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_RCC_OscConfig+0x4cc>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe ff04 	bl	8000fb4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe ff00 	bl	8000fb4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e026      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x498>
 80021ce:	e01e      	b.n	800220e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e019      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_OscConfig+0x500>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0d0      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d910      	bls.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b67      	ldr	r3, [pc, #412]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 0207 	bic.w	r2, r3, #7
 8002246:	4965      	ldr	r1, [pc, #404]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0b8      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800229a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	494d      	ldr	r1, [pc, #308]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d040      	beq.n	800233c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d115      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e07f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e073      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4936      	ldr	r1, [pc, #216]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7fe fe52 	bl	8000fb4 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe fe4e 	bl	8000fb4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e053      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d210      	bcs.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4922      	ldr	r1, [pc, #136]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e032      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4916      	ldr	r1, [pc, #88]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023aa:	f000 f821 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490a      	ldr	r1, [pc, #40]	; (80023e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1cc>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1d0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fdb0 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	0800455c 	.word	0x0800455c
 80023e8:	20000070 	.word	0x20000070
 80023ec:	20000074 	.word	0x20000074

080023f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b490      	push	{r4, r7}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_RCC_GetSysClockFreq+0xac>)
 80023f8:	1d3c      	adds	r4, r7, #4
 80023fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002400:	f240 2301 	movw	r3, #513	; 0x201
 8002404:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800241a:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b04      	cmp	r3, #4
 8002428:	d002      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x40>
 800242a:	2b08      	cmp	r3, #8
 800242c:	d003      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0x46>
 800242e:	e02b      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002432:	623b      	str	r3, [r7, #32]
      break;
 8002434:	e02b      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	0c9b      	lsrs	r3, r3, #18
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3328      	adds	r3, #40	; 0x28
 8002440:	443b      	add	r3, r7
 8002442:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002446:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	0c5b      	lsrs	r3, r3, #17
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	3328      	adds	r3, #40	; 0x28
 800245e:	443b      	add	r3, r7
 8002460:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002464:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800246a:	fb03 f202 	mul.w	r2, r3, r2
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	e004      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	623b      	str	r3, [r7, #32]
      break;
 8002486:	e002      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800248a:	623b      	str	r3, [r7, #32]
      break;
 800248c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248e:	6a3b      	ldr	r3, [r7, #32]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bc90      	pop	{r4, r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	0800454c 	.word	0x0800454c
 80024a0:	40021000 	.word	0x40021000
 80024a4:	007a1200 	.word	0x007a1200
 80024a8:	003d0900 	.word	0x003d0900

080024ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b02      	ldr	r3, [pc, #8]	; (80024bc <HAL_RCC_GetHCLKFreq+0x10>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	20000070 	.word	0x20000070

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024c4:	f7ff fff2 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	0800456c 	.word	0x0800456c

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024ec:	f7ff ffde 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	0adb      	lsrs	r3, r3, #11
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	0800456c 	.word	0x0800456c

08002510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <RCC_Delay+0x34>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <RCC_Delay+0x38>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	0a5b      	lsrs	r3, r3, #9
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800252c:	bf00      	nop
  }
  while (Delay --);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	60fa      	str	r2, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f9      	bne.n	800252c <RCC_Delay+0x1c>
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	20000070 	.word	0x20000070
 8002548:	10624dd3 	.word	0x10624dd3

0800254c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e052      	b.n	8002604 <HAL_HalfDuplex_Init+0xb8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d111      	bne.n	800258e <HAL_HalfDuplex_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fc5e 	bl	8002e34 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <HAL_HalfDuplex_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a22      	ldr	r2, [pc, #136]	; (800260c <HAL_HalfDuplex_Init+0xc0>)
 8002584:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2224      	movs	r2, #36	; 0x24
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 ff36 	bl	8003418 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80025ca:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	08000c51 	.word	0x08000c51

08002610 <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	460b      	mov	r3, r1
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e08c      	b.n	8002752 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_UART_RegisterCallback+0x36>
 8002642:	2302      	movs	r3, #2
 8002644:	e085      	b.n	8002752 <HAL_UART_RegisterCallback+0x142>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	d151      	bne.n	80026fe <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800265a:	7afb      	ldrb	r3, [r7, #11]
 800265c:	2b0c      	cmp	r3, #12
 800265e:	d845      	bhi.n	80026ec <HAL_UART_RegisterCallback+0xdc>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <HAL_UART_RegisterCallback+0x58>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	0800269d 	.word	0x0800269d
 800266c:	080026a5 	.word	0x080026a5
 8002670:	080026ad 	.word	0x080026ad
 8002674:	080026b5 	.word	0x080026b5
 8002678:	080026bd 	.word	0x080026bd
 800267c:	080026c5 	.word	0x080026c5
 8002680:	080026cd 	.word	0x080026cd
 8002684:	080026d5 	.word	0x080026d5
 8002688:	080026ed 	.word	0x080026ed
 800268c:	080026ed 	.word	0x080026ed
 8002690:	080026ed 	.word	0x080026ed
 8002694:	080026dd 	.word	0x080026dd
 8002698:	080026e5 	.word	0x080026e5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80026a2:	e051      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80026aa:	e04d      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80026b2:	e049      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80026ba:	e045      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80026c2:	e041      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80026ca:	e03d      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80026d2:	e039      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80026da:	e035      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80026e2:	e031      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80026ea:	e02d      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
        break;
 80026fc:	e024      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d116      	bne.n	8002738 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800270a:	7afb      	ldrb	r3, [r7, #11]
 800270c:	2b0b      	cmp	r3, #11
 800270e:	d002      	beq.n	8002716 <HAL_UART_RegisterCallback+0x106>
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d004      	beq.n	800271e <HAL_UART_RegisterCallback+0x10e>
 8002714:	e007      	b.n	8002726 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800271c:	e014      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002724:	e010      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0220 	orr.w	r2, r3, #32
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
        break;
 8002736:	e007      	b.n	8002748 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002750:	7dfb      	ldrb	r3, [r7, #23]
}
 8002752:	4618      	mov	r0, r3
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b20      	cmp	r3, #32
 8002774:	d153      	bne.n	800281e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_UART_Transmit_DMA+0x26>
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e04c      	b.n	8002820 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_UART_Transmit_DMA+0x38>
 8002790:	2302      	movs	r3, #2
 8002792:	e045      	b.n	8002820 <HAL_UART_Transmit_DMA+0xc4>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	88fa      	ldrh	r2, [r7, #6]
 80027a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	88fa      	ldrh	r2, [r7, #6]
 80027ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2221      	movs	r2, #33	; 0x21
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_UART_Transmit_DMA+0xcc>)
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_UART_Transmit_DMA+0xd0>)
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	4a17      	ldr	r2, [pc, #92]	; (8002830 <HAL_UART_Transmit_DMA+0xd4>)
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	2200      	movs	r2, #0
 80027da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3304      	adds	r3, #4
 80027f0:	461a      	mov	r2, r3
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	f7fe fe02 	bl	80013fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002800:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002818:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	08002ea1 	.word	0x08002ea1
 800282c:	08002ef5 	.word	0x08002ef5
 8002830:	08002fe7 	.word	0x08002fe7

08002834 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b20      	cmp	r3, #32
 800284c:	d11d      	bne.n	800288a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_UART_Receive_DMA+0x26>
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e016      	b.n	800288c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_UART_Receive_DMA+0x38>
 8002868:	2302      	movs	r3, #2
 800286a:	e00f      	b.n	800288c <HAL_UART_Receive_DMA+0x58>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	461a      	mov	r2, r3
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fbfb 	bl	800307c <UART_Start_Receive_DMA>
 8002886:	4603      	mov	r3, r0
 8002888:	e000      	b.n	800288c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf14      	ite	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	2300      	moveq	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b21      	cmp	r3, #33	; 0x21
 80028c0:	d116      	bne.n	80028f0 <HAL_UART_DMAStop+0x5c>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fde8 	bl	80014ba <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fc2a 	bl	8003144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b22      	cmp	r3, #34	; 0x22
 8002910:	d116      	bne.n	8002940 <HAL_UART_DMAStop+0xac>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002926:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fdc0 	bl	80014ba <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fc17 	bl	800316e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_UART_IRQHandler+0x52>
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fc92 	bl	80032c0 <UART_Receive_IT>
      return;
 800299c:	e180      	b.n	8002ca0 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80b4 	beq.w	8002b0e <HAL_UART_IRQHandler+0x1c2>
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_UART_IRQHandler+0x70>
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 80a9 	beq.w	8002b0e <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_UART_IRQHandler+0x90>
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_UART_IRQHandler+0xb0>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0202 	orr.w	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_UART_IRQHandler+0xd0>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f043 0204 	orr.w	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00f      	beq.n	8002a46 <HAL_UART_IRQHandler+0xfa>
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d104      	bne.n	8002a3a <HAL_UART_IRQHandler+0xee>
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f043 0208 	orr.w	r2, r3, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8123 	beq.w	8002c96 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_UART_IRQHandler+0x11e>
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fc2b 	bl	80032c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <HAL_UART_IRQHandler+0x146>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d033      	beq.n	8002afa <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fb6b 	bl	800316e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d024      	beq.n	8002af0 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d013      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	4a79      	ldr	r2, [pc, #484]	; (8002ca8 <HAL_UART_IRQHandler+0x35c>)
 8002ac4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fd30 	bl	8001530 <HAL_DMA_Abort_IT>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d019      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	e011      	b.n	8002b0a <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aee:	e00c      	b.n	8002b0a <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af8:	e007      	b.n	8002b0a <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b08:	e0c5      	b.n	8002c96 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0a:	bf00      	nop
    return;
 8002b0c:	e0c3      	b.n	8002c96 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	f040 80a3 	bne.w	8002c5e <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 809d 	beq.w	8002c5e <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8097 	beq.w	8002c5e <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d04f      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002b5e:	8a3b      	ldrh	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 809a 	beq.w	8002c9a <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b6a:	8a3a      	ldrh	r2, [r7, #16]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	f080 8094 	bcs.w	8002c9a <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	8a3a      	ldrh	r2, [r7, #16]
 8002b76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d02b      	beq.n	8002bda <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b90:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0210 	bic.w	r2, r2, #16
 8002bce:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe fc70 	bl	80014ba <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002be6:	b292      	uxth	r2, r2
 8002be8:	1a8a      	subs	r2, r1, r2
 8002bea:	b292      	uxth	r2, r2
 8002bec:	4611      	mov	r1, r2
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8002bf2:	e052      	b.n	8002c9a <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d048      	beq.n	8002c9e <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8002c0c:	8a7b      	ldrh	r3, [r7, #18]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d045      	beq.n	8002c9e <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c20:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0210 	bic.w	r2, r2, #16
 8002c4e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c54:	8a7a      	ldrh	r2, [r7, #18]
 8002c56:	4611      	mov	r1, r2
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8002c5c:	e01f      	b.n	8002c9e <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_UART_IRQHandler+0x32e>
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fabc 	bl	80031f0 <UART_Transmit_IT>
    return;
 8002c78:	e012      	b.n	8002ca0 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00d      	beq.n	8002ca0 <HAL_UART_IRQHandler+0x354>
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fafd 	bl	800328e <UART_EndTransmit_IT>
    return;
 8002c94:	e004      	b.n	8002ca0 <HAL_UART_IRQHandler+0x354>
    return;
 8002c96:	bf00      	nop
 8002c98:	e002      	b.n	8002ca0 <HAL_UART_IRQHandler+0x354>
      return;
 8002c9a:	bf00      	nop
 8002c9c:	e000      	b.n	8002ca0 <HAL_UART_IRQHandler+0x354>
      return;
 8002c9e:	bf00      	nop
  }
}
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	080031c7 	.word	0x080031c7

08002cac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e020      	b.n	8002dae <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	; 0x24
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 030c 	bic.w	r3, r3, #12
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f043 0308 	orr.w	r3, r3, #8
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e020      	b.n	8002e14 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2224      	movs	r2, #36	; 0x24
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f023 030c 	bic.w	r3, r3, #12
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	; (8002e7c <UART_InitCallbacksToDefault+0x48>)
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <UART_InitCallbacksToDefault+0x4c>)
 8002e46:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <UART_InitCallbacksToDefault+0x50>)
 8002e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <UART_InitCallbacksToDefault+0x54>)
 8002e52:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <UART_InitCallbacksToDefault+0x58>)
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a0c      	ldr	r2, [pc, #48]	; (8002e90 <UART_InitCallbacksToDefault+0x5c>)
 8002e5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <UART_InitCallbacksToDefault+0x60>)
 8002e64:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <UART_InitCallbacksToDefault+0x64>)
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <UART_InitCallbacksToDefault+0x68>)
 8002e70:	669a      	str	r2, [r3, #104]	; 0x68

}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	08002cbf 	.word	0x08002cbf
 8002e80:	08002cad 	.word	0x08002cad
 8002e84:	08002ce3 	.word	0x08002ce3
 8002e88:	08002cd1 	.word	0x08002cd1
 8002e8c:	08002cf5 	.word	0x08002cf5
 8002e90:	08002d07 	.word	0x08002d07
 8002e94:	08002d19 	.word	0x08002d19
 8002e98:	08002d2b 	.word	0x08002d2b
 8002e9c:	08002d3d 	.word	0x08002d3d

08002ea0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d113      	bne.n	8002ee4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ee2:	e003      	b.n	8002eec <UART_DMATransmitCplt+0x4c>
    huart->TxCpltCallback(huart);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	4798      	blx	r3
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d12a      	bne.n	8002f84 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f42:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f62:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d107      	bne.n	8002f84 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0210 	bic.w	r2, r2, #16
 8002f82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d107      	bne.n	8002f9c <UART_DMAReceiveCplt+0x8a>
  {  
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002f94:	4611      	mov	r1, r2
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f9a:	e003      	b.n	8002fa4 <UART_DMAReceiveCplt+0x92>
    huart->RxCpltCallback(huart);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	4798      	blx	r3
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d109      	bne.n	8002fd6 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002fca:	0852      	lsrs	r2, r2, #1
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fd4:	e003      	b.n	8002fde <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	4798      	blx	r3
}
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b21      	cmp	r3, #33	; 0x21
 8003018:	d108      	bne.n	800302c <UART_DMAError+0x46>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2200      	movs	r2, #0
 8003024:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003026:	68b8      	ldr	r0, [r7, #8]
 8003028:	f000 f88c 	bl	8003144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b22      	cmp	r3, #34	; 0x22
 800304c:	d108      	bne.n	8003060 <UART_DMAError+0x7a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800305a:	68b8      	ldr	r0, [r7, #8]
 800305c:	f000 f887 	bl	800316e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0210 	orr.w	r2, r3, #16
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	68b8      	ldr	r0, [r7, #8]
 8003072:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	4613      	mov	r3, r2
 8003088:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2222      	movs	r2, #34	; 0x22
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	4a23      	ldr	r2, [pc, #140]	; (8003138 <UART_Start_Receive_DMA+0xbc>)
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <UART_Start_Receive_DMA+0xc0>)
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	4a21      	ldr	r2, [pc, #132]	; (8003140 <UART_Start_Receive_DMA+0xc4>)
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	2200      	movs	r2, #0
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	f7fe f98e 	bl	80013fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	08002f13 	.word	0x08002f13
 800313c:	08002fad 	.word	0x08002fad
 8003140:	08002fe7 	.word	0x08002fe7

08003144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800315a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003184:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	2b01      	cmp	r3, #1
 800319c:	d107      	bne.n	80031ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0210 	bic.w	r2, r2, #16
 80031ac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b21      	cmp	r3, #33	; 0x21
 8003202:	d13e      	bne.n	8003282 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d114      	bne.n	8003238 <UART_Transmit_IT+0x48>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d110      	bne.n	8003238 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	1c9a      	adds	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	621a      	str	r2, [r3, #32]
 8003236:	e008      	b.n	800324a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	1c59      	adds	r1, r3, #1
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6211      	str	r1, [r2, #32]
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29b      	uxth	r3, r3
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4619      	mov	r1, r3
 8003258:	84d1      	strh	r1, [r2, #38]	; 0x26
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800326c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b22      	cmp	r3, #34	; 0x22
 80032d2:	f040 809b 	bne.w	800340c <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d117      	bne.n	8003310 <UART_Receive_IT+0x50>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d113      	bne.n	8003310 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	b29a      	uxth	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
 800330e:	e026      	b.n	800335e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003322:	d007      	beq.n	8003334 <UART_Receive_IT+0x74>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <UART_Receive_IT+0x82>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e008      	b.n	8003354 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800334e:	b2da      	uxtb	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4619      	mov	r1, r3
 800336c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800336e:	2b00      	cmp	r3, #0
 8003370:	d14a      	bne.n	8003408 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0220 	bic.w	r2, r2, #32
 8003380:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003390:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d124      	bne.n	80033fc <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0210 	bic.w	r2, r2, #16
 80033c6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b10      	cmp	r3, #16
 80033d4:	d10a      	bne.n	80033ec <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80033f4:	4611      	mov	r1, r2
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
 80033fa:	e003      	b.n	8003404 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e002      	b.n	800340e <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	e000      	b.n	800340e <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800340c:	2302      	movs	r3, #2
  }
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003452:	f023 030c 	bic.w	r3, r3, #12
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	430b      	orrs	r3, r1
 800345e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2c      	ldr	r2, [pc, #176]	; (800352c <UART_SetConfig+0x114>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d103      	bne.n	8003488 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003480:	f7ff f832 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	e002      	b.n	800348e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7ff f81a 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 800348c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009a      	lsls	r2, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	4a22      	ldr	r2, [pc, #136]	; (8003530 <UART_SetConfig+0x118>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	0119      	lsls	r1, r3, #4
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	009a      	lsls	r2, r3, #2
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <UART_SetConfig+0x118>)
 80034c6:	fba3 0302 	umull	r0, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2064      	movs	r0, #100	; 0x64
 80034ce:	fb00 f303 	mul.w	r3, r0, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	3332      	adds	r3, #50	; 0x32
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <UART_SetConfig+0x118>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e4:	4419      	add	r1, r3
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009a      	lsls	r2, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <UART_SetConfig+0x118>)
 80034fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2064      	movs	r0, #100	; 0x64
 8003506:	fb00 f303 	mul.w	r3, r0, r3
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	3332      	adds	r3, #50	; 0x32
 8003510:	4a07      	ldr	r2, [pc, #28]	; (8003530 <UART_SetConfig+0x118>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	440a      	add	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40013800 	.word	0x40013800
 8003530:	51eb851f 	.word	0x51eb851f

08003534 <__errno>:
 8003534:	4b01      	ldr	r3, [pc, #4]	; (800353c <__errno+0x8>)
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	2000007c 	.word	0x2000007c

08003540 <__libc_init_array>:
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	2600      	movs	r6, #0
 8003544:	4d0c      	ldr	r5, [pc, #48]	; (8003578 <__libc_init_array+0x38>)
 8003546:	4c0d      	ldr	r4, [pc, #52]	; (800357c <__libc_init_array+0x3c>)
 8003548:	1b64      	subs	r4, r4, r5
 800354a:	10a4      	asrs	r4, r4, #2
 800354c:	42a6      	cmp	r6, r4
 800354e:	d109      	bne.n	8003564 <__libc_init_array+0x24>
 8003550:	f000 ffb6 	bl	80044c0 <_init>
 8003554:	2600      	movs	r6, #0
 8003556:	4d0a      	ldr	r5, [pc, #40]	; (8003580 <__libc_init_array+0x40>)
 8003558:	4c0a      	ldr	r4, [pc, #40]	; (8003584 <__libc_init_array+0x44>)
 800355a:	1b64      	subs	r4, r4, r5
 800355c:	10a4      	asrs	r4, r4, #2
 800355e:	42a6      	cmp	r6, r4
 8003560:	d105      	bne.n	800356e <__libc_init_array+0x2e>
 8003562:	bd70      	pop	{r4, r5, r6, pc}
 8003564:	f855 3b04 	ldr.w	r3, [r5], #4
 8003568:	4798      	blx	r3
 800356a:	3601      	adds	r6, #1
 800356c:	e7ee      	b.n	800354c <__libc_init_array+0xc>
 800356e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003572:	4798      	blx	r3
 8003574:	3601      	adds	r6, #1
 8003576:	e7f2      	b.n	800355e <__libc_init_array+0x1e>
 8003578:	0800460c 	.word	0x0800460c
 800357c:	0800460c 	.word	0x0800460c
 8003580:	0800460c 	.word	0x0800460c
 8003584:	08004610 	.word	0x08004610

08003588 <memset>:
 8003588:	4603      	mov	r3, r0
 800358a:	4402      	add	r2, r0
 800358c:	4293      	cmp	r3, r2
 800358e:	d100      	bne.n	8003592 <memset+0xa>
 8003590:	4770      	bx	lr
 8003592:	f803 1b01 	strb.w	r1, [r3], #1
 8003596:	e7f9      	b.n	800358c <memset+0x4>

08003598 <iprintf>:
 8003598:	b40f      	push	{r0, r1, r2, r3}
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <iprintf+0x2c>)
 800359c:	b513      	push	{r0, r1, r4, lr}
 800359e:	681c      	ldr	r4, [r3, #0]
 80035a0:	b124      	cbz	r4, 80035ac <iprintf+0x14>
 80035a2:	69a3      	ldr	r3, [r4, #24]
 80035a4:	b913      	cbnz	r3, 80035ac <iprintf+0x14>
 80035a6:	4620      	mov	r0, r4
 80035a8:	f000 f866 	bl	8003678 <__sinit>
 80035ac:	ab05      	add	r3, sp, #20
 80035ae:	4620      	mov	r0, r4
 80035b0:	9a04      	ldr	r2, [sp, #16]
 80035b2:	68a1      	ldr	r1, [r4, #8]
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	f000 f9bb 	bl	8003930 <_vfiprintf_r>
 80035ba:	b002      	add	sp, #8
 80035bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c0:	b004      	add	sp, #16
 80035c2:	4770      	bx	lr
 80035c4:	2000007c 	.word	0x2000007c

080035c8 <std>:
 80035c8:	2300      	movs	r3, #0
 80035ca:	b510      	push	{r4, lr}
 80035cc:	4604      	mov	r4, r0
 80035ce:	e9c0 3300 	strd	r3, r3, [r0]
 80035d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035d6:	6083      	str	r3, [r0, #8]
 80035d8:	8181      	strh	r1, [r0, #12]
 80035da:	6643      	str	r3, [r0, #100]	; 0x64
 80035dc:	81c2      	strh	r2, [r0, #14]
 80035de:	6183      	str	r3, [r0, #24]
 80035e0:	4619      	mov	r1, r3
 80035e2:	2208      	movs	r2, #8
 80035e4:	305c      	adds	r0, #92	; 0x5c
 80035e6:	f7ff ffcf 	bl	8003588 <memset>
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <std+0x38>)
 80035ec:	6224      	str	r4, [r4, #32]
 80035ee:	6263      	str	r3, [r4, #36]	; 0x24
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <std+0x3c>)
 80035f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <std+0x40>)
 80035f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <std+0x44>)
 80035fa:	6323      	str	r3, [r4, #48]	; 0x30
 80035fc:	bd10      	pop	{r4, pc}
 80035fe:	bf00      	nop
 8003600:	08003edd 	.word	0x08003edd
 8003604:	08003eff 	.word	0x08003eff
 8003608:	08003f37 	.word	0x08003f37
 800360c:	08003f5b 	.word	0x08003f5b

08003610 <_cleanup_r>:
 8003610:	4901      	ldr	r1, [pc, #4]	; (8003618 <_cleanup_r+0x8>)
 8003612:	f000 b8af 	b.w	8003774 <_fwalk_reent>
 8003616:	bf00      	nop
 8003618:	0800422d 	.word	0x0800422d

0800361c <__sfmoreglue>:
 800361c:	2268      	movs	r2, #104	; 0x68
 800361e:	b570      	push	{r4, r5, r6, lr}
 8003620:	1e4d      	subs	r5, r1, #1
 8003622:	4355      	muls	r5, r2
 8003624:	460e      	mov	r6, r1
 8003626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800362a:	f000 f8e5 	bl	80037f8 <_malloc_r>
 800362e:	4604      	mov	r4, r0
 8003630:	b140      	cbz	r0, 8003644 <__sfmoreglue+0x28>
 8003632:	2100      	movs	r1, #0
 8003634:	e9c0 1600 	strd	r1, r6, [r0]
 8003638:	300c      	adds	r0, #12
 800363a:	60a0      	str	r0, [r4, #8]
 800363c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003640:	f7ff ffa2 	bl	8003588 <memset>
 8003644:	4620      	mov	r0, r4
 8003646:	bd70      	pop	{r4, r5, r6, pc}

08003648 <__sfp_lock_acquire>:
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <__sfp_lock_acquire+0x8>)
 800364a:	f000 b8b3 	b.w	80037b4 <__retarget_lock_acquire_recursive>
 800364e:	bf00      	nop
 8003650:	20000309 	.word	0x20000309

08003654 <__sfp_lock_release>:
 8003654:	4801      	ldr	r0, [pc, #4]	; (800365c <__sfp_lock_release+0x8>)
 8003656:	f000 b8ae 	b.w	80037b6 <__retarget_lock_release_recursive>
 800365a:	bf00      	nop
 800365c:	20000309 	.word	0x20000309

08003660 <__sinit_lock_acquire>:
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <__sinit_lock_acquire+0x8>)
 8003662:	f000 b8a7 	b.w	80037b4 <__retarget_lock_acquire_recursive>
 8003666:	bf00      	nop
 8003668:	2000030a 	.word	0x2000030a

0800366c <__sinit_lock_release>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__sinit_lock_release+0x8>)
 800366e:	f000 b8a2 	b.w	80037b6 <__retarget_lock_release_recursive>
 8003672:	bf00      	nop
 8003674:	2000030a 	.word	0x2000030a

08003678 <__sinit>:
 8003678:	b510      	push	{r4, lr}
 800367a:	4604      	mov	r4, r0
 800367c:	f7ff fff0 	bl	8003660 <__sinit_lock_acquire>
 8003680:	69a3      	ldr	r3, [r4, #24]
 8003682:	b11b      	cbz	r3, 800368c <__sinit+0x14>
 8003684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003688:	f7ff bff0 	b.w	800366c <__sinit_lock_release>
 800368c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003690:	6523      	str	r3, [r4, #80]	; 0x50
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <__sinit+0x68>)
 8003694:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <__sinit+0x6c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	62a2      	str	r2, [r4, #40]	; 0x28
 800369a:	42a3      	cmp	r3, r4
 800369c:	bf08      	it	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	4620      	mov	r0, r4
 80036a2:	bf08      	it	eq
 80036a4:	61a3      	streq	r3, [r4, #24]
 80036a6:	f000 f81f 	bl	80036e8 <__sfp>
 80036aa:	6060      	str	r0, [r4, #4]
 80036ac:	4620      	mov	r0, r4
 80036ae:	f000 f81b 	bl	80036e8 <__sfp>
 80036b2:	60a0      	str	r0, [r4, #8]
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 f817 	bl	80036e8 <__sfp>
 80036ba:	2200      	movs	r2, #0
 80036bc:	2104      	movs	r1, #4
 80036be:	60e0      	str	r0, [r4, #12]
 80036c0:	6860      	ldr	r0, [r4, #4]
 80036c2:	f7ff ff81 	bl	80035c8 <std>
 80036c6:	2201      	movs	r2, #1
 80036c8:	2109      	movs	r1, #9
 80036ca:	68a0      	ldr	r0, [r4, #8]
 80036cc:	f7ff ff7c 	bl	80035c8 <std>
 80036d0:	2202      	movs	r2, #2
 80036d2:	2112      	movs	r1, #18
 80036d4:	68e0      	ldr	r0, [r4, #12]
 80036d6:	f7ff ff77 	bl	80035c8 <std>
 80036da:	2301      	movs	r3, #1
 80036dc:	61a3      	str	r3, [r4, #24]
 80036de:	e7d1      	b.n	8003684 <__sinit+0xc>
 80036e0:	08004574 	.word	0x08004574
 80036e4:	08003611 	.word	0x08003611

080036e8 <__sfp>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	4607      	mov	r7, r0
 80036ec:	f7ff ffac 	bl	8003648 <__sfp_lock_acquire>
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <__sfp+0x84>)
 80036f2:	681e      	ldr	r6, [r3, #0]
 80036f4:	69b3      	ldr	r3, [r6, #24]
 80036f6:	b913      	cbnz	r3, 80036fe <__sfp+0x16>
 80036f8:	4630      	mov	r0, r6
 80036fa:	f7ff ffbd 	bl	8003678 <__sinit>
 80036fe:	3648      	adds	r6, #72	; 0x48
 8003700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003704:	3b01      	subs	r3, #1
 8003706:	d503      	bpl.n	8003710 <__sfp+0x28>
 8003708:	6833      	ldr	r3, [r6, #0]
 800370a:	b30b      	cbz	r3, 8003750 <__sfp+0x68>
 800370c:	6836      	ldr	r6, [r6, #0]
 800370e:	e7f7      	b.n	8003700 <__sfp+0x18>
 8003710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003714:	b9d5      	cbnz	r5, 800374c <__sfp+0x64>
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <__sfp+0x88>)
 8003718:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800371c:	60e3      	str	r3, [r4, #12]
 800371e:	6665      	str	r5, [r4, #100]	; 0x64
 8003720:	f000 f847 	bl	80037b2 <__retarget_lock_init_recursive>
 8003724:	f7ff ff96 	bl	8003654 <__sfp_lock_release>
 8003728:	2208      	movs	r2, #8
 800372a:	4629      	mov	r1, r5
 800372c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003730:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003734:	6025      	str	r5, [r4, #0]
 8003736:	61a5      	str	r5, [r4, #24]
 8003738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800373c:	f7ff ff24 	bl	8003588 <memset>
 8003740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003748:	4620      	mov	r0, r4
 800374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800374c:	3468      	adds	r4, #104	; 0x68
 800374e:	e7d9      	b.n	8003704 <__sfp+0x1c>
 8003750:	2104      	movs	r1, #4
 8003752:	4638      	mov	r0, r7
 8003754:	f7ff ff62 	bl	800361c <__sfmoreglue>
 8003758:	4604      	mov	r4, r0
 800375a:	6030      	str	r0, [r6, #0]
 800375c:	2800      	cmp	r0, #0
 800375e:	d1d5      	bne.n	800370c <__sfp+0x24>
 8003760:	f7ff ff78 	bl	8003654 <__sfp_lock_release>
 8003764:	230c      	movs	r3, #12
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	e7ee      	b.n	8003748 <__sfp+0x60>
 800376a:	bf00      	nop
 800376c:	08004574 	.word	0x08004574
 8003770:	ffff0001 	.word	0xffff0001

08003774 <_fwalk_reent>:
 8003774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003778:	4606      	mov	r6, r0
 800377a:	4688      	mov	r8, r1
 800377c:	2700      	movs	r7, #0
 800377e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003782:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003786:	f1b9 0901 	subs.w	r9, r9, #1
 800378a:	d505      	bpl.n	8003798 <_fwalk_reent+0x24>
 800378c:	6824      	ldr	r4, [r4, #0]
 800378e:	2c00      	cmp	r4, #0
 8003790:	d1f7      	bne.n	8003782 <_fwalk_reent+0xe>
 8003792:	4638      	mov	r0, r7
 8003794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003798:	89ab      	ldrh	r3, [r5, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d907      	bls.n	80037ae <_fwalk_reent+0x3a>
 800379e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037a2:	3301      	adds	r3, #1
 80037a4:	d003      	beq.n	80037ae <_fwalk_reent+0x3a>
 80037a6:	4629      	mov	r1, r5
 80037a8:	4630      	mov	r0, r6
 80037aa:	47c0      	blx	r8
 80037ac:	4307      	orrs	r7, r0
 80037ae:	3568      	adds	r5, #104	; 0x68
 80037b0:	e7e9      	b.n	8003786 <_fwalk_reent+0x12>

080037b2 <__retarget_lock_init_recursive>:
 80037b2:	4770      	bx	lr

080037b4 <__retarget_lock_acquire_recursive>:
 80037b4:	4770      	bx	lr

080037b6 <__retarget_lock_release_recursive>:
 80037b6:	4770      	bx	lr

080037b8 <sbrk_aligned>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4e0e      	ldr	r6, [pc, #56]	; (80037f4 <sbrk_aligned+0x3c>)
 80037bc:	460c      	mov	r4, r1
 80037be:	6831      	ldr	r1, [r6, #0]
 80037c0:	4605      	mov	r5, r0
 80037c2:	b911      	cbnz	r1, 80037ca <sbrk_aligned+0x12>
 80037c4:	f000 fb7a 	bl	8003ebc <_sbrk_r>
 80037c8:	6030      	str	r0, [r6, #0]
 80037ca:	4621      	mov	r1, r4
 80037cc:	4628      	mov	r0, r5
 80037ce:	f000 fb75 	bl	8003ebc <_sbrk_r>
 80037d2:	1c43      	adds	r3, r0, #1
 80037d4:	d00a      	beq.n	80037ec <sbrk_aligned+0x34>
 80037d6:	1cc4      	adds	r4, r0, #3
 80037d8:	f024 0403 	bic.w	r4, r4, #3
 80037dc:	42a0      	cmp	r0, r4
 80037de:	d007      	beq.n	80037f0 <sbrk_aligned+0x38>
 80037e0:	1a21      	subs	r1, r4, r0
 80037e2:	4628      	mov	r0, r5
 80037e4:	f000 fb6a 	bl	8003ebc <_sbrk_r>
 80037e8:	3001      	adds	r0, #1
 80037ea:	d101      	bne.n	80037f0 <sbrk_aligned+0x38>
 80037ec:	f04f 34ff 	mov.w	r4, #4294967295
 80037f0:	4620      	mov	r0, r4
 80037f2:	bd70      	pop	{r4, r5, r6, pc}
 80037f4:	20000310 	.word	0x20000310

080037f8 <_malloc_r>:
 80037f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037fc:	1ccd      	adds	r5, r1, #3
 80037fe:	f025 0503 	bic.w	r5, r5, #3
 8003802:	3508      	adds	r5, #8
 8003804:	2d0c      	cmp	r5, #12
 8003806:	bf38      	it	cc
 8003808:	250c      	movcc	r5, #12
 800380a:	2d00      	cmp	r5, #0
 800380c:	4607      	mov	r7, r0
 800380e:	db01      	blt.n	8003814 <_malloc_r+0x1c>
 8003810:	42a9      	cmp	r1, r5
 8003812:	d905      	bls.n	8003820 <_malloc_r+0x28>
 8003814:	230c      	movs	r3, #12
 8003816:	2600      	movs	r6, #0
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	4630      	mov	r0, r6
 800381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003820:	4e2e      	ldr	r6, [pc, #184]	; (80038dc <_malloc_r+0xe4>)
 8003822:	f000 fdc5 	bl	80043b0 <__malloc_lock>
 8003826:	6833      	ldr	r3, [r6, #0]
 8003828:	461c      	mov	r4, r3
 800382a:	bb34      	cbnz	r4, 800387a <_malloc_r+0x82>
 800382c:	4629      	mov	r1, r5
 800382e:	4638      	mov	r0, r7
 8003830:	f7ff ffc2 	bl	80037b8 <sbrk_aligned>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	4604      	mov	r4, r0
 8003838:	d14d      	bne.n	80038d6 <_malloc_r+0xde>
 800383a:	6834      	ldr	r4, [r6, #0]
 800383c:	4626      	mov	r6, r4
 800383e:	2e00      	cmp	r6, #0
 8003840:	d140      	bne.n	80038c4 <_malloc_r+0xcc>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	4631      	mov	r1, r6
 8003846:	4638      	mov	r0, r7
 8003848:	eb04 0803 	add.w	r8, r4, r3
 800384c:	f000 fb36 	bl	8003ebc <_sbrk_r>
 8003850:	4580      	cmp	r8, r0
 8003852:	d13a      	bne.n	80038ca <_malloc_r+0xd2>
 8003854:	6821      	ldr	r1, [r4, #0]
 8003856:	3503      	adds	r5, #3
 8003858:	1a6d      	subs	r5, r5, r1
 800385a:	f025 0503 	bic.w	r5, r5, #3
 800385e:	3508      	adds	r5, #8
 8003860:	2d0c      	cmp	r5, #12
 8003862:	bf38      	it	cc
 8003864:	250c      	movcc	r5, #12
 8003866:	4638      	mov	r0, r7
 8003868:	4629      	mov	r1, r5
 800386a:	f7ff ffa5 	bl	80037b8 <sbrk_aligned>
 800386e:	3001      	adds	r0, #1
 8003870:	d02b      	beq.n	80038ca <_malloc_r+0xd2>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	442b      	add	r3, r5
 8003876:	6023      	str	r3, [r4, #0]
 8003878:	e00e      	b.n	8003898 <_malloc_r+0xa0>
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	1b52      	subs	r2, r2, r5
 800387e:	d41e      	bmi.n	80038be <_malloc_r+0xc6>
 8003880:	2a0b      	cmp	r2, #11
 8003882:	d916      	bls.n	80038b2 <_malloc_r+0xba>
 8003884:	1961      	adds	r1, r4, r5
 8003886:	42a3      	cmp	r3, r4
 8003888:	6025      	str	r5, [r4, #0]
 800388a:	bf18      	it	ne
 800388c:	6059      	strne	r1, [r3, #4]
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	bf08      	it	eq
 8003892:	6031      	streq	r1, [r6, #0]
 8003894:	5162      	str	r2, [r4, r5]
 8003896:	604b      	str	r3, [r1, #4]
 8003898:	4638      	mov	r0, r7
 800389a:	f104 060b 	add.w	r6, r4, #11
 800389e:	f000 fd8d 	bl	80043bc <__malloc_unlock>
 80038a2:	f026 0607 	bic.w	r6, r6, #7
 80038a6:	1d23      	adds	r3, r4, #4
 80038a8:	1af2      	subs	r2, r6, r3
 80038aa:	d0b6      	beq.n	800381a <_malloc_r+0x22>
 80038ac:	1b9b      	subs	r3, r3, r6
 80038ae:	50a3      	str	r3, [r4, r2]
 80038b0:	e7b3      	b.n	800381a <_malloc_r+0x22>
 80038b2:	6862      	ldr	r2, [r4, #4]
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	bf0c      	ite	eq
 80038b8:	6032      	streq	r2, [r6, #0]
 80038ba:	605a      	strne	r2, [r3, #4]
 80038bc:	e7ec      	b.n	8003898 <_malloc_r+0xa0>
 80038be:	4623      	mov	r3, r4
 80038c0:	6864      	ldr	r4, [r4, #4]
 80038c2:	e7b2      	b.n	800382a <_malloc_r+0x32>
 80038c4:	4634      	mov	r4, r6
 80038c6:	6876      	ldr	r6, [r6, #4]
 80038c8:	e7b9      	b.n	800383e <_malloc_r+0x46>
 80038ca:	230c      	movs	r3, #12
 80038cc:	4638      	mov	r0, r7
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	f000 fd74 	bl	80043bc <__malloc_unlock>
 80038d4:	e7a1      	b.n	800381a <_malloc_r+0x22>
 80038d6:	6025      	str	r5, [r4, #0]
 80038d8:	e7de      	b.n	8003898 <_malloc_r+0xa0>
 80038da:	bf00      	nop
 80038dc:	2000030c 	.word	0x2000030c

080038e0 <__sfputc_r>:
 80038e0:	6893      	ldr	r3, [r2, #8]
 80038e2:	b410      	push	{r4}
 80038e4:	3b01      	subs	r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	6093      	str	r3, [r2, #8]
 80038ea:	da07      	bge.n	80038fc <__sfputc_r+0x1c>
 80038ec:	6994      	ldr	r4, [r2, #24]
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	db01      	blt.n	80038f6 <__sfputc_r+0x16>
 80038f2:	290a      	cmp	r1, #10
 80038f4:	d102      	bne.n	80038fc <__sfputc_r+0x1c>
 80038f6:	bc10      	pop	{r4}
 80038f8:	f000 bb34 	b.w	8003f64 <__swbuf_r>
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	1c58      	adds	r0, r3, #1
 8003900:	6010      	str	r0, [r2, #0]
 8003902:	7019      	strb	r1, [r3, #0]
 8003904:	4608      	mov	r0, r1
 8003906:	bc10      	pop	{r4}
 8003908:	4770      	bx	lr

0800390a <__sfputs_r>:
 800390a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390c:	4606      	mov	r6, r0
 800390e:	460f      	mov	r7, r1
 8003910:	4614      	mov	r4, r2
 8003912:	18d5      	adds	r5, r2, r3
 8003914:	42ac      	cmp	r4, r5
 8003916:	d101      	bne.n	800391c <__sfputs_r+0x12>
 8003918:	2000      	movs	r0, #0
 800391a:	e007      	b.n	800392c <__sfputs_r+0x22>
 800391c:	463a      	mov	r2, r7
 800391e:	4630      	mov	r0, r6
 8003920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003924:	f7ff ffdc 	bl	80038e0 <__sfputc_r>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d1f3      	bne.n	8003914 <__sfputs_r+0xa>
 800392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003930 <_vfiprintf_r>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	460d      	mov	r5, r1
 8003936:	4614      	mov	r4, r2
 8003938:	4698      	mov	r8, r3
 800393a:	4606      	mov	r6, r0
 800393c:	b09d      	sub	sp, #116	; 0x74
 800393e:	b118      	cbz	r0, 8003948 <_vfiprintf_r+0x18>
 8003940:	6983      	ldr	r3, [r0, #24]
 8003942:	b90b      	cbnz	r3, 8003948 <_vfiprintf_r+0x18>
 8003944:	f7ff fe98 	bl	8003678 <__sinit>
 8003948:	4b89      	ldr	r3, [pc, #548]	; (8003b70 <_vfiprintf_r+0x240>)
 800394a:	429d      	cmp	r5, r3
 800394c:	d11b      	bne.n	8003986 <_vfiprintf_r+0x56>
 800394e:	6875      	ldr	r5, [r6, #4]
 8003950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003952:	07d9      	lsls	r1, r3, #31
 8003954:	d405      	bmi.n	8003962 <_vfiprintf_r+0x32>
 8003956:	89ab      	ldrh	r3, [r5, #12]
 8003958:	059a      	lsls	r2, r3, #22
 800395a:	d402      	bmi.n	8003962 <_vfiprintf_r+0x32>
 800395c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800395e:	f7ff ff29 	bl	80037b4 <__retarget_lock_acquire_recursive>
 8003962:	89ab      	ldrh	r3, [r5, #12]
 8003964:	071b      	lsls	r3, r3, #28
 8003966:	d501      	bpl.n	800396c <_vfiprintf_r+0x3c>
 8003968:	692b      	ldr	r3, [r5, #16]
 800396a:	b9eb      	cbnz	r3, 80039a8 <_vfiprintf_r+0x78>
 800396c:	4629      	mov	r1, r5
 800396e:	4630      	mov	r0, r6
 8003970:	f000 fb5c 	bl	800402c <__swsetup_r>
 8003974:	b1c0      	cbz	r0, 80039a8 <_vfiprintf_r+0x78>
 8003976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003978:	07dc      	lsls	r4, r3, #31
 800397a:	d50e      	bpl.n	800399a <_vfiprintf_r+0x6a>
 800397c:	f04f 30ff 	mov.w	r0, #4294967295
 8003980:	b01d      	add	sp, #116	; 0x74
 8003982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003986:	4b7b      	ldr	r3, [pc, #492]	; (8003b74 <_vfiprintf_r+0x244>)
 8003988:	429d      	cmp	r5, r3
 800398a:	d101      	bne.n	8003990 <_vfiprintf_r+0x60>
 800398c:	68b5      	ldr	r5, [r6, #8]
 800398e:	e7df      	b.n	8003950 <_vfiprintf_r+0x20>
 8003990:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <_vfiprintf_r+0x248>)
 8003992:	429d      	cmp	r5, r3
 8003994:	bf08      	it	eq
 8003996:	68f5      	ldreq	r5, [r6, #12]
 8003998:	e7da      	b.n	8003950 <_vfiprintf_r+0x20>
 800399a:	89ab      	ldrh	r3, [r5, #12]
 800399c:	0598      	lsls	r0, r3, #22
 800399e:	d4ed      	bmi.n	800397c <_vfiprintf_r+0x4c>
 80039a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039a2:	f7ff ff08 	bl	80037b6 <__retarget_lock_release_recursive>
 80039a6:	e7e9      	b.n	800397c <_vfiprintf_r+0x4c>
 80039a8:	2300      	movs	r3, #0
 80039aa:	9309      	str	r3, [sp, #36]	; 0x24
 80039ac:	2320      	movs	r3, #32
 80039ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039b2:	2330      	movs	r3, #48	; 0x30
 80039b4:	f04f 0901 	mov.w	r9, #1
 80039b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80039bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003b7c <_vfiprintf_r+0x24c>
 80039c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039c4:	4623      	mov	r3, r4
 80039c6:	469a      	mov	sl, r3
 80039c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039cc:	b10a      	cbz	r2, 80039d2 <_vfiprintf_r+0xa2>
 80039ce:	2a25      	cmp	r2, #37	; 0x25
 80039d0:	d1f9      	bne.n	80039c6 <_vfiprintf_r+0x96>
 80039d2:	ebba 0b04 	subs.w	fp, sl, r4
 80039d6:	d00b      	beq.n	80039f0 <_vfiprintf_r+0xc0>
 80039d8:	465b      	mov	r3, fp
 80039da:	4622      	mov	r2, r4
 80039dc:	4629      	mov	r1, r5
 80039de:	4630      	mov	r0, r6
 80039e0:	f7ff ff93 	bl	800390a <__sfputs_r>
 80039e4:	3001      	adds	r0, #1
 80039e6:	f000 80aa 	beq.w	8003b3e <_vfiprintf_r+0x20e>
 80039ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039ec:	445a      	add	r2, fp
 80039ee:	9209      	str	r2, [sp, #36]	; 0x24
 80039f0:	f89a 3000 	ldrb.w	r3, [sl]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a2 	beq.w	8003b3e <_vfiprintf_r+0x20e>
 80039fa:	2300      	movs	r3, #0
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a04:	f10a 0a01 	add.w	sl, sl, #1
 8003a08:	9304      	str	r3, [sp, #16]
 8003a0a:	9307      	str	r3, [sp, #28]
 8003a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a10:	931a      	str	r3, [sp, #104]	; 0x68
 8003a12:	4654      	mov	r4, sl
 8003a14:	2205      	movs	r2, #5
 8003a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a1a:	4858      	ldr	r0, [pc, #352]	; (8003b7c <_vfiprintf_r+0x24c>)
 8003a1c:	f000 fcba 	bl	8004394 <memchr>
 8003a20:	9a04      	ldr	r2, [sp, #16]
 8003a22:	b9d8      	cbnz	r0, 8003a5c <_vfiprintf_r+0x12c>
 8003a24:	06d1      	lsls	r1, r2, #27
 8003a26:	bf44      	itt	mi
 8003a28:	2320      	movmi	r3, #32
 8003a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2e:	0713      	lsls	r3, r2, #28
 8003a30:	bf44      	itt	mi
 8003a32:	232b      	movmi	r3, #43	; 0x2b
 8003a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a38:	f89a 3000 	ldrb.w	r3, [sl]
 8003a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3e:	d015      	beq.n	8003a6c <_vfiprintf_r+0x13c>
 8003a40:	4654      	mov	r4, sl
 8003a42:	2000      	movs	r0, #0
 8003a44:	f04f 0c0a 	mov.w	ip, #10
 8003a48:	9a07      	ldr	r2, [sp, #28]
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a50:	3b30      	subs	r3, #48	; 0x30
 8003a52:	2b09      	cmp	r3, #9
 8003a54:	d94e      	bls.n	8003af4 <_vfiprintf_r+0x1c4>
 8003a56:	b1b0      	cbz	r0, 8003a86 <_vfiprintf_r+0x156>
 8003a58:	9207      	str	r2, [sp, #28]
 8003a5a:	e014      	b.n	8003a86 <_vfiprintf_r+0x156>
 8003a5c:	eba0 0308 	sub.w	r3, r0, r8
 8003a60:	fa09 f303 	lsl.w	r3, r9, r3
 8003a64:	4313      	orrs	r3, r2
 8003a66:	46a2      	mov	sl, r4
 8003a68:	9304      	str	r3, [sp, #16]
 8003a6a:	e7d2      	b.n	8003a12 <_vfiprintf_r+0xe2>
 8003a6c:	9b03      	ldr	r3, [sp, #12]
 8003a6e:	1d19      	adds	r1, r3, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	9103      	str	r1, [sp, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bfbb      	ittet	lt
 8003a78:	425b      	neglt	r3, r3
 8003a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a7e:	9307      	strge	r3, [sp, #28]
 8003a80:	9307      	strlt	r3, [sp, #28]
 8003a82:	bfb8      	it	lt
 8003a84:	9204      	strlt	r2, [sp, #16]
 8003a86:	7823      	ldrb	r3, [r4, #0]
 8003a88:	2b2e      	cmp	r3, #46	; 0x2e
 8003a8a:	d10c      	bne.n	8003aa6 <_vfiprintf_r+0x176>
 8003a8c:	7863      	ldrb	r3, [r4, #1]
 8003a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a90:	d135      	bne.n	8003afe <_vfiprintf_r+0x1ce>
 8003a92:	9b03      	ldr	r3, [sp, #12]
 8003a94:	3402      	adds	r4, #2
 8003a96:	1d1a      	adds	r2, r3, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	9203      	str	r2, [sp, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bfb8      	it	lt
 8003aa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003aa4:	9305      	str	r3, [sp, #20]
 8003aa6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003b80 <_vfiprintf_r+0x250>
 8003aaa:	2203      	movs	r2, #3
 8003aac:	4650      	mov	r0, sl
 8003aae:	7821      	ldrb	r1, [r4, #0]
 8003ab0:	f000 fc70 	bl	8004394 <memchr>
 8003ab4:	b140      	cbz	r0, 8003ac8 <_vfiprintf_r+0x198>
 8003ab6:	2340      	movs	r3, #64	; 0x40
 8003ab8:	eba0 000a 	sub.w	r0, r0, sl
 8003abc:	fa03 f000 	lsl.w	r0, r3, r0
 8003ac0:	9b04      	ldr	r3, [sp, #16]
 8003ac2:	3401      	adds	r4, #1
 8003ac4:	4303      	orrs	r3, r0
 8003ac6:	9304      	str	r3, [sp, #16]
 8003ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003acc:	2206      	movs	r2, #6
 8003ace:	482d      	ldr	r0, [pc, #180]	; (8003b84 <_vfiprintf_r+0x254>)
 8003ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ad4:	f000 fc5e 	bl	8004394 <memchr>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d03f      	beq.n	8003b5c <_vfiprintf_r+0x22c>
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <_vfiprintf_r+0x258>)
 8003ade:	bb1b      	cbnz	r3, 8003b28 <_vfiprintf_r+0x1f8>
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	3307      	adds	r3, #7
 8003ae4:	f023 0307 	bic.w	r3, r3, #7
 8003ae8:	3308      	adds	r3, #8
 8003aea:	9303      	str	r3, [sp, #12]
 8003aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aee:	443b      	add	r3, r7
 8003af0:	9309      	str	r3, [sp, #36]	; 0x24
 8003af2:	e767      	b.n	80039c4 <_vfiprintf_r+0x94>
 8003af4:	460c      	mov	r4, r1
 8003af6:	2001      	movs	r0, #1
 8003af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003afc:	e7a5      	b.n	8003a4a <_vfiprintf_r+0x11a>
 8003afe:	2300      	movs	r3, #0
 8003b00:	f04f 0c0a 	mov.w	ip, #10
 8003b04:	4619      	mov	r1, r3
 8003b06:	3401      	adds	r4, #1
 8003b08:	9305      	str	r3, [sp, #20]
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b10:	3a30      	subs	r2, #48	; 0x30
 8003b12:	2a09      	cmp	r2, #9
 8003b14:	d903      	bls.n	8003b1e <_vfiprintf_r+0x1ee>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0c5      	beq.n	8003aa6 <_vfiprintf_r+0x176>
 8003b1a:	9105      	str	r1, [sp, #20]
 8003b1c:	e7c3      	b.n	8003aa6 <_vfiprintf_r+0x176>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	2301      	movs	r3, #1
 8003b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b26:	e7f0      	b.n	8003b0a <_vfiprintf_r+0x1da>
 8003b28:	ab03      	add	r3, sp, #12
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	462a      	mov	r2, r5
 8003b2e:	4630      	mov	r0, r6
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <_vfiprintf_r+0x25c>)
 8003b32:	a904      	add	r1, sp, #16
 8003b34:	f3af 8000 	nop.w
 8003b38:	4607      	mov	r7, r0
 8003b3a:	1c78      	adds	r0, r7, #1
 8003b3c:	d1d6      	bne.n	8003aec <_vfiprintf_r+0x1bc>
 8003b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b40:	07d9      	lsls	r1, r3, #31
 8003b42:	d405      	bmi.n	8003b50 <_vfiprintf_r+0x220>
 8003b44:	89ab      	ldrh	r3, [r5, #12]
 8003b46:	059a      	lsls	r2, r3, #22
 8003b48:	d402      	bmi.n	8003b50 <_vfiprintf_r+0x220>
 8003b4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b4c:	f7ff fe33 	bl	80037b6 <__retarget_lock_release_recursive>
 8003b50:	89ab      	ldrh	r3, [r5, #12]
 8003b52:	065b      	lsls	r3, r3, #25
 8003b54:	f53f af12 	bmi.w	800397c <_vfiprintf_r+0x4c>
 8003b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b5a:	e711      	b.n	8003980 <_vfiprintf_r+0x50>
 8003b5c:	ab03      	add	r3, sp, #12
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	462a      	mov	r2, r5
 8003b62:	4630      	mov	r0, r6
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <_vfiprintf_r+0x25c>)
 8003b66:	a904      	add	r1, sp, #16
 8003b68:	f000 f882 	bl	8003c70 <_printf_i>
 8003b6c:	e7e4      	b.n	8003b38 <_vfiprintf_r+0x208>
 8003b6e:	bf00      	nop
 8003b70:	08004598 	.word	0x08004598
 8003b74:	080045b8 	.word	0x080045b8
 8003b78:	08004578 	.word	0x08004578
 8003b7c:	080045d8 	.word	0x080045d8
 8003b80:	080045de 	.word	0x080045de
 8003b84:	080045e2 	.word	0x080045e2
 8003b88:	00000000 	.word	0x00000000
 8003b8c:	0800390b 	.word	0x0800390b

08003b90 <_printf_common>:
 8003b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	4616      	mov	r6, r2
 8003b96:	4699      	mov	r9, r3
 8003b98:	688a      	ldr	r2, [r1, #8]
 8003b9a:	690b      	ldr	r3, [r1, #16]
 8003b9c:	4607      	mov	r7, r0
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	bfb8      	it	lt
 8003ba2:	4613      	movlt	r3, r2
 8003ba4:	6033      	str	r3, [r6, #0]
 8003ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003baa:	460c      	mov	r4, r1
 8003bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bb0:	b10a      	cbz	r2, 8003bb6 <_printf_common+0x26>
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	6033      	str	r3, [r6, #0]
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	0699      	lsls	r1, r3, #26
 8003bba:	bf42      	ittt	mi
 8003bbc:	6833      	ldrmi	r3, [r6, #0]
 8003bbe:	3302      	addmi	r3, #2
 8003bc0:	6033      	strmi	r3, [r6, #0]
 8003bc2:	6825      	ldr	r5, [r4, #0]
 8003bc4:	f015 0506 	ands.w	r5, r5, #6
 8003bc8:	d106      	bne.n	8003bd8 <_printf_common+0x48>
 8003bca:	f104 0a19 	add.w	sl, r4, #25
 8003bce:	68e3      	ldr	r3, [r4, #12]
 8003bd0:	6832      	ldr	r2, [r6, #0]
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	42ab      	cmp	r3, r5
 8003bd6:	dc28      	bgt.n	8003c2a <_printf_common+0x9a>
 8003bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bdc:	1e13      	subs	r3, r2, #0
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	bf18      	it	ne
 8003be2:	2301      	movne	r3, #1
 8003be4:	0692      	lsls	r2, r2, #26
 8003be6:	d42d      	bmi.n	8003c44 <_printf_common+0xb4>
 8003be8:	4649      	mov	r1, r9
 8003bea:	4638      	mov	r0, r7
 8003bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bf0:	47c0      	blx	r8
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d020      	beq.n	8003c38 <_printf_common+0xa8>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	68e5      	ldr	r5, [r4, #12]
 8003bfa:	f003 0306 	and.w	r3, r3, #6
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	bf18      	it	ne
 8003c02:	2500      	movne	r5, #0
 8003c04:	6832      	ldr	r2, [r6, #0]
 8003c06:	f04f 0600 	mov.w	r6, #0
 8003c0a:	68a3      	ldr	r3, [r4, #8]
 8003c0c:	bf08      	it	eq
 8003c0e:	1aad      	subeq	r5, r5, r2
 8003c10:	6922      	ldr	r2, [r4, #16]
 8003c12:	bf08      	it	eq
 8003c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bfc4      	itt	gt
 8003c1c:	1a9b      	subgt	r3, r3, r2
 8003c1e:	18ed      	addgt	r5, r5, r3
 8003c20:	341a      	adds	r4, #26
 8003c22:	42b5      	cmp	r5, r6
 8003c24:	d11a      	bne.n	8003c5c <_printf_common+0xcc>
 8003c26:	2000      	movs	r0, #0
 8003c28:	e008      	b.n	8003c3c <_printf_common+0xac>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4652      	mov	r2, sl
 8003c2e:	4649      	mov	r1, r9
 8003c30:	4638      	mov	r0, r7
 8003c32:	47c0      	blx	r8
 8003c34:	3001      	adds	r0, #1
 8003c36:	d103      	bne.n	8003c40 <_printf_common+0xb0>
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	3501      	adds	r5, #1
 8003c42:	e7c4      	b.n	8003bce <_printf_common+0x3e>
 8003c44:	2030      	movs	r0, #48	; 0x30
 8003c46:	18e1      	adds	r1, r4, r3
 8003c48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c52:	4422      	add	r2, r4
 8003c54:	3302      	adds	r3, #2
 8003c56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c5a:	e7c5      	b.n	8003be8 <_printf_common+0x58>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4649      	mov	r1, r9
 8003c62:	4638      	mov	r0, r7
 8003c64:	47c0      	blx	r8
 8003c66:	3001      	adds	r0, #1
 8003c68:	d0e6      	beq.n	8003c38 <_printf_common+0xa8>
 8003c6a:	3601      	adds	r6, #1
 8003c6c:	e7d9      	b.n	8003c22 <_printf_common+0x92>
	...

08003c70 <_printf_i>:
 8003c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	7e0f      	ldrb	r7, [r1, #24]
 8003c76:	4691      	mov	r9, r2
 8003c78:	2f78      	cmp	r7, #120	; 0x78
 8003c7a:	4680      	mov	r8, r0
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	469a      	mov	sl, r3
 8003c80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c86:	d807      	bhi.n	8003c98 <_printf_i+0x28>
 8003c88:	2f62      	cmp	r7, #98	; 0x62
 8003c8a:	d80a      	bhi.n	8003ca2 <_printf_i+0x32>
 8003c8c:	2f00      	cmp	r7, #0
 8003c8e:	f000 80d9 	beq.w	8003e44 <_printf_i+0x1d4>
 8003c92:	2f58      	cmp	r7, #88	; 0x58
 8003c94:	f000 80a4 	beq.w	8003de0 <_printf_i+0x170>
 8003c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ca0:	e03a      	b.n	8003d18 <_printf_i+0xa8>
 8003ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ca6:	2b15      	cmp	r3, #21
 8003ca8:	d8f6      	bhi.n	8003c98 <_printf_i+0x28>
 8003caa:	a101      	add	r1, pc, #4	; (adr r1, 8003cb0 <_printf_i+0x40>)
 8003cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d1d 	.word	0x08003d1d
 8003cb8:	08003c99 	.word	0x08003c99
 8003cbc:	08003c99 	.word	0x08003c99
 8003cc0:	08003c99 	.word	0x08003c99
 8003cc4:	08003c99 	.word	0x08003c99
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003c99 	.word	0x08003c99
 8003cd0:	08003c99 	.word	0x08003c99
 8003cd4:	08003c99 	.word	0x08003c99
 8003cd8:	08003c99 	.word	0x08003c99
 8003cdc:	08003e2b 	.word	0x08003e2b
 8003ce0:	08003d4d 	.word	0x08003d4d
 8003ce4:	08003e0d 	.word	0x08003e0d
 8003ce8:	08003c99 	.word	0x08003c99
 8003cec:	08003c99 	.word	0x08003c99
 8003cf0:	08003e4d 	.word	0x08003e4d
 8003cf4:	08003c99 	.word	0x08003c99
 8003cf8:	08003d4d 	.word	0x08003d4d
 8003cfc:	08003c99 	.word	0x08003c99
 8003d00:	08003c99 	.word	0x08003c99
 8003d04:	08003e15 	.word	0x08003e15
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	1d1a      	adds	r2, r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	602a      	str	r2, [r5, #0]
 8003d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0a4      	b.n	8003e66 <_printf_i+0x1f6>
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	6829      	ldr	r1, [r5, #0]
 8003d20:	0606      	lsls	r6, r0, #24
 8003d22:	f101 0304 	add.w	r3, r1, #4
 8003d26:	d50a      	bpl.n	8003d3e <_printf_i+0xce>
 8003d28:	680e      	ldr	r6, [r1, #0]
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	2e00      	cmp	r6, #0
 8003d2e:	da03      	bge.n	8003d38 <_printf_i+0xc8>
 8003d30:	232d      	movs	r3, #45	; 0x2d
 8003d32:	4276      	negs	r6, r6
 8003d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d38:	230a      	movs	r3, #10
 8003d3a:	485e      	ldr	r0, [pc, #376]	; (8003eb4 <_printf_i+0x244>)
 8003d3c:	e019      	b.n	8003d72 <_printf_i+0x102>
 8003d3e:	680e      	ldr	r6, [r1, #0]
 8003d40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d44:	602b      	str	r3, [r5, #0]
 8003d46:	bf18      	it	ne
 8003d48:	b236      	sxthne	r6, r6
 8003d4a:	e7ef      	b.n	8003d2c <_printf_i+0xbc>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	1d19      	adds	r1, r3, #4
 8003d52:	6029      	str	r1, [r5, #0]
 8003d54:	0601      	lsls	r1, r0, #24
 8003d56:	d501      	bpl.n	8003d5c <_printf_i+0xec>
 8003d58:	681e      	ldr	r6, [r3, #0]
 8003d5a:	e002      	b.n	8003d62 <_printf_i+0xf2>
 8003d5c:	0646      	lsls	r6, r0, #25
 8003d5e:	d5fb      	bpl.n	8003d58 <_printf_i+0xe8>
 8003d60:	881e      	ldrh	r6, [r3, #0]
 8003d62:	2f6f      	cmp	r7, #111	; 0x6f
 8003d64:	bf0c      	ite	eq
 8003d66:	2308      	moveq	r3, #8
 8003d68:	230a      	movne	r3, #10
 8003d6a:	4852      	ldr	r0, [pc, #328]	; (8003eb4 <_printf_i+0x244>)
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d72:	6865      	ldr	r5, [r4, #4]
 8003d74:	2d00      	cmp	r5, #0
 8003d76:	bfa8      	it	ge
 8003d78:	6821      	ldrge	r1, [r4, #0]
 8003d7a:	60a5      	str	r5, [r4, #8]
 8003d7c:	bfa4      	itt	ge
 8003d7e:	f021 0104 	bicge.w	r1, r1, #4
 8003d82:	6021      	strge	r1, [r4, #0]
 8003d84:	b90e      	cbnz	r6, 8003d8a <_printf_i+0x11a>
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	d04d      	beq.n	8003e26 <_printf_i+0x1b6>
 8003d8a:	4615      	mov	r5, r2
 8003d8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d90:	fb03 6711 	mls	r7, r3, r1, r6
 8003d94:	5dc7      	ldrb	r7, [r0, r7]
 8003d96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d9a:	4637      	mov	r7, r6
 8003d9c:	42bb      	cmp	r3, r7
 8003d9e:	460e      	mov	r6, r1
 8003da0:	d9f4      	bls.n	8003d8c <_printf_i+0x11c>
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d10b      	bne.n	8003dbe <_printf_i+0x14e>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	07de      	lsls	r6, r3, #31
 8003daa:	d508      	bpl.n	8003dbe <_printf_i+0x14e>
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	6861      	ldr	r1, [r4, #4]
 8003db0:	4299      	cmp	r1, r3
 8003db2:	bfde      	ittt	le
 8003db4:	2330      	movle	r3, #48	; 0x30
 8003db6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dbe:	1b52      	subs	r2, r2, r5
 8003dc0:	6122      	str	r2, [r4, #16]
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	f8cd a000 	str.w	sl, [sp]
 8003dcc:	aa03      	add	r2, sp, #12
 8003dce:	f7ff fedf 	bl	8003b90 <_printf_common>
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d14c      	bne.n	8003e70 <_printf_i+0x200>
 8003dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dda:	b004      	add	sp, #16
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	4834      	ldr	r0, [pc, #208]	; (8003eb4 <_printf_i+0x244>)
 8003de2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003de6:	6829      	ldr	r1, [r5, #0]
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dee:	6029      	str	r1, [r5, #0]
 8003df0:	061d      	lsls	r5, r3, #24
 8003df2:	d514      	bpl.n	8003e1e <_printf_i+0x1ae>
 8003df4:	07df      	lsls	r7, r3, #31
 8003df6:	bf44      	itt	mi
 8003df8:	f043 0320 	orrmi.w	r3, r3, #32
 8003dfc:	6023      	strmi	r3, [r4, #0]
 8003dfe:	b91e      	cbnz	r6, 8003e08 <_printf_i+0x198>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	f023 0320 	bic.w	r3, r3, #32
 8003e06:	6023      	str	r3, [r4, #0]
 8003e08:	2310      	movs	r3, #16
 8003e0a:	e7af      	b.n	8003d6c <_printf_i+0xfc>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	f043 0320 	orr.w	r3, r3, #32
 8003e12:	6023      	str	r3, [r4, #0]
 8003e14:	2378      	movs	r3, #120	; 0x78
 8003e16:	4828      	ldr	r0, [pc, #160]	; (8003eb8 <_printf_i+0x248>)
 8003e18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e1c:	e7e3      	b.n	8003de6 <_printf_i+0x176>
 8003e1e:	0659      	lsls	r1, r3, #25
 8003e20:	bf48      	it	mi
 8003e22:	b2b6      	uxthmi	r6, r6
 8003e24:	e7e6      	b.n	8003df4 <_printf_i+0x184>
 8003e26:	4615      	mov	r5, r2
 8003e28:	e7bb      	b.n	8003da2 <_printf_i+0x132>
 8003e2a:	682b      	ldr	r3, [r5, #0]
 8003e2c:	6826      	ldr	r6, [r4, #0]
 8003e2e:	1d18      	adds	r0, r3, #4
 8003e30:	6961      	ldr	r1, [r4, #20]
 8003e32:	6028      	str	r0, [r5, #0]
 8003e34:	0635      	lsls	r5, r6, #24
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	d501      	bpl.n	8003e3e <_printf_i+0x1ce>
 8003e3a:	6019      	str	r1, [r3, #0]
 8003e3c:	e002      	b.n	8003e44 <_printf_i+0x1d4>
 8003e3e:	0670      	lsls	r0, r6, #25
 8003e40:	d5fb      	bpl.n	8003e3a <_printf_i+0x1ca>
 8003e42:	8019      	strh	r1, [r3, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	4615      	mov	r5, r2
 8003e48:	6123      	str	r3, [r4, #16]
 8003e4a:	e7ba      	b.n	8003dc2 <_printf_i+0x152>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	2100      	movs	r1, #0
 8003e50:	1d1a      	adds	r2, r3, #4
 8003e52:	602a      	str	r2, [r5, #0]
 8003e54:	681d      	ldr	r5, [r3, #0]
 8003e56:	6862      	ldr	r2, [r4, #4]
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 fa9b 	bl	8004394 <memchr>
 8003e5e:	b108      	cbz	r0, 8003e64 <_printf_i+0x1f4>
 8003e60:	1b40      	subs	r0, r0, r5
 8003e62:	6060      	str	r0, [r4, #4]
 8003e64:	6863      	ldr	r3, [r4, #4]
 8003e66:	6123      	str	r3, [r4, #16]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e6e:	e7a8      	b.n	8003dc2 <_printf_i+0x152>
 8003e70:	462a      	mov	r2, r5
 8003e72:	4649      	mov	r1, r9
 8003e74:	4640      	mov	r0, r8
 8003e76:	6923      	ldr	r3, [r4, #16]
 8003e78:	47d0      	blx	sl
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d0ab      	beq.n	8003dd6 <_printf_i+0x166>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	079b      	lsls	r3, r3, #30
 8003e82:	d413      	bmi.n	8003eac <_printf_i+0x23c>
 8003e84:	68e0      	ldr	r0, [r4, #12]
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	4298      	cmp	r0, r3
 8003e8a:	bfb8      	it	lt
 8003e8c:	4618      	movlt	r0, r3
 8003e8e:	e7a4      	b.n	8003dda <_printf_i+0x16a>
 8003e90:	2301      	movs	r3, #1
 8003e92:	4632      	mov	r2, r6
 8003e94:	4649      	mov	r1, r9
 8003e96:	4640      	mov	r0, r8
 8003e98:	47d0      	blx	sl
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d09b      	beq.n	8003dd6 <_printf_i+0x166>
 8003e9e:	3501      	adds	r5, #1
 8003ea0:	68e3      	ldr	r3, [r4, #12]
 8003ea2:	9903      	ldr	r1, [sp, #12]
 8003ea4:	1a5b      	subs	r3, r3, r1
 8003ea6:	42ab      	cmp	r3, r5
 8003ea8:	dcf2      	bgt.n	8003e90 <_printf_i+0x220>
 8003eaa:	e7eb      	b.n	8003e84 <_printf_i+0x214>
 8003eac:	2500      	movs	r5, #0
 8003eae:	f104 0619 	add.w	r6, r4, #25
 8003eb2:	e7f5      	b.n	8003ea0 <_printf_i+0x230>
 8003eb4:	080045e9 	.word	0x080045e9
 8003eb8:	080045fa 	.word	0x080045fa

08003ebc <_sbrk_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4d05      	ldr	r5, [pc, #20]	; (8003ed8 <_sbrk_r+0x1c>)
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	602b      	str	r3, [r5, #0]
 8003ec8:	f7fc fe32 	bl	8000b30 <_sbrk>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d102      	bne.n	8003ed6 <_sbrk_r+0x1a>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	b103      	cbz	r3, 8003ed6 <_sbrk_r+0x1a>
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	20000314 	.word	0x20000314

08003edc <__sread>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	460c      	mov	r4, r1
 8003ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee4:	f000 fab8 	bl	8004458 <_read_r>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	bfab      	itete	ge
 8003eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003eee:	89a3      	ldrhlt	r3, [r4, #12]
 8003ef0:	181b      	addge	r3, r3, r0
 8003ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ef6:	bfac      	ite	ge
 8003ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003efa:	81a3      	strhlt	r3, [r4, #12]
 8003efc:	bd10      	pop	{r4, pc}

08003efe <__swrite>:
 8003efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f02:	461f      	mov	r7, r3
 8003f04:	898b      	ldrh	r3, [r1, #12]
 8003f06:	4605      	mov	r5, r0
 8003f08:	05db      	lsls	r3, r3, #23
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	d505      	bpl.n	8003f1c <__swrite+0x1e>
 8003f10:	2302      	movs	r3, #2
 8003f12:	2200      	movs	r2, #0
 8003f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f18:	f000 f9c4 	bl	80042a4 <_lseek_r>
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	4632      	mov	r2, r6
 8003f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f24:	81a3      	strh	r3, [r4, #12]
 8003f26:	4628      	mov	r0, r5
 8003f28:	463b      	mov	r3, r7
 8003f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f32:	f000 b869 	b.w	8004008 <_write_r>

08003f36 <__sseek>:
 8003f36:	b510      	push	{r4, lr}
 8003f38:	460c      	mov	r4, r1
 8003f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3e:	f000 f9b1 	bl	80042a4 <_lseek_r>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	bf15      	itete	ne
 8003f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f52:	81a3      	strheq	r3, [r4, #12]
 8003f54:	bf18      	it	ne
 8003f56:	81a3      	strhne	r3, [r4, #12]
 8003f58:	bd10      	pop	{r4, pc}

08003f5a <__sclose>:
 8003f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5e:	f000 b8d3 	b.w	8004108 <_close_r>
	...

08003f64 <__swbuf_r>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	460e      	mov	r6, r1
 8003f68:	4614      	mov	r4, r2
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	b118      	cbz	r0, 8003f76 <__swbuf_r+0x12>
 8003f6e:	6983      	ldr	r3, [r0, #24]
 8003f70:	b90b      	cbnz	r3, 8003f76 <__swbuf_r+0x12>
 8003f72:	f7ff fb81 	bl	8003678 <__sinit>
 8003f76:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <__swbuf_r+0x98>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	d12b      	bne.n	8003fd4 <__swbuf_r+0x70>
 8003f7c:	686c      	ldr	r4, [r5, #4]
 8003f7e:	69a3      	ldr	r3, [r4, #24]
 8003f80:	60a3      	str	r3, [r4, #8]
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	071a      	lsls	r2, r3, #28
 8003f86:	d52f      	bpl.n	8003fe8 <__swbuf_r+0x84>
 8003f88:	6923      	ldr	r3, [r4, #16]
 8003f8a:	b36b      	cbz	r3, 8003fe8 <__swbuf_r+0x84>
 8003f8c:	6923      	ldr	r3, [r4, #16]
 8003f8e:	6820      	ldr	r0, [r4, #0]
 8003f90:	b2f6      	uxtb	r6, r6
 8003f92:	1ac0      	subs	r0, r0, r3
 8003f94:	6963      	ldr	r3, [r4, #20]
 8003f96:	4637      	mov	r7, r6
 8003f98:	4283      	cmp	r3, r0
 8003f9a:	dc04      	bgt.n	8003fa6 <__swbuf_r+0x42>
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 f944 	bl	800422c <_fflush_r>
 8003fa4:	bb30      	cbnz	r0, 8003ff4 <__swbuf_r+0x90>
 8003fa6:	68a3      	ldr	r3, [r4, #8]
 8003fa8:	3001      	adds	r0, #1
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60a3      	str	r3, [r4, #8]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	6022      	str	r2, [r4, #0]
 8003fb4:	701e      	strb	r6, [r3, #0]
 8003fb6:	6963      	ldr	r3, [r4, #20]
 8003fb8:	4283      	cmp	r3, r0
 8003fba:	d004      	beq.n	8003fc6 <__swbuf_r+0x62>
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	07db      	lsls	r3, r3, #31
 8003fc0:	d506      	bpl.n	8003fd0 <__swbuf_r+0x6c>
 8003fc2:	2e0a      	cmp	r6, #10
 8003fc4:	d104      	bne.n	8003fd0 <__swbuf_r+0x6c>
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 f92f 	bl	800422c <_fflush_r>
 8003fce:	b988      	cbnz	r0, 8003ff4 <__swbuf_r+0x90>
 8003fd0:	4638      	mov	r0, r7
 8003fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <__swbuf_r+0x9c>)
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d101      	bne.n	8003fde <__swbuf_r+0x7a>
 8003fda:	68ac      	ldr	r4, [r5, #8]
 8003fdc:	e7cf      	b.n	8003f7e <__swbuf_r+0x1a>
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <__swbuf_r+0xa0>)
 8003fe0:	429c      	cmp	r4, r3
 8003fe2:	bf08      	it	eq
 8003fe4:	68ec      	ldreq	r4, [r5, #12]
 8003fe6:	e7ca      	b.n	8003f7e <__swbuf_r+0x1a>
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 f81e 	bl	800402c <__swsetup_r>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d0cb      	beq.n	8003f8c <__swbuf_r+0x28>
 8003ff4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ff8:	e7ea      	b.n	8003fd0 <__swbuf_r+0x6c>
 8003ffa:	bf00      	nop
 8003ffc:	08004598 	.word	0x08004598
 8004000:	080045b8 	.word	0x080045b8
 8004004:	08004578 	.word	0x08004578

08004008 <_write_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4604      	mov	r4, r0
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	2200      	movs	r2, #0
 8004012:	4d05      	ldr	r5, [pc, #20]	; (8004028 <_write_r+0x20>)
 8004014:	602a      	str	r2, [r5, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	f7fc fd3d 	bl	8000a96 <_write>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_write_r+0x1e>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_write_r+0x1e>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20000314 	.word	0x20000314

0800402c <__swsetup_r>:
 800402c:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <__swsetup_r+0xcc>)
 800402e:	b570      	push	{r4, r5, r6, lr}
 8004030:	681d      	ldr	r5, [r3, #0]
 8004032:	4606      	mov	r6, r0
 8004034:	460c      	mov	r4, r1
 8004036:	b125      	cbz	r5, 8004042 <__swsetup_r+0x16>
 8004038:	69ab      	ldr	r3, [r5, #24]
 800403a:	b913      	cbnz	r3, 8004042 <__swsetup_r+0x16>
 800403c:	4628      	mov	r0, r5
 800403e:	f7ff fb1b 	bl	8003678 <__sinit>
 8004042:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <__swsetup_r+0xd0>)
 8004044:	429c      	cmp	r4, r3
 8004046:	d10f      	bne.n	8004068 <__swsetup_r+0x3c>
 8004048:	686c      	ldr	r4, [r5, #4]
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004050:	0719      	lsls	r1, r3, #28
 8004052:	d42c      	bmi.n	80040ae <__swsetup_r+0x82>
 8004054:	06dd      	lsls	r5, r3, #27
 8004056:	d411      	bmi.n	800407c <__swsetup_r+0x50>
 8004058:	2309      	movs	r3, #9
 800405a:	6033      	str	r3, [r6, #0]
 800405c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004060:	f04f 30ff 	mov.w	r0, #4294967295
 8004064:	81a3      	strh	r3, [r4, #12]
 8004066:	e03e      	b.n	80040e6 <__swsetup_r+0xba>
 8004068:	4b25      	ldr	r3, [pc, #148]	; (8004100 <__swsetup_r+0xd4>)
 800406a:	429c      	cmp	r4, r3
 800406c:	d101      	bne.n	8004072 <__swsetup_r+0x46>
 800406e:	68ac      	ldr	r4, [r5, #8]
 8004070:	e7eb      	b.n	800404a <__swsetup_r+0x1e>
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <__swsetup_r+0xd8>)
 8004074:	429c      	cmp	r4, r3
 8004076:	bf08      	it	eq
 8004078:	68ec      	ldreq	r4, [r5, #12]
 800407a:	e7e6      	b.n	800404a <__swsetup_r+0x1e>
 800407c:	0758      	lsls	r0, r3, #29
 800407e:	d512      	bpl.n	80040a6 <__swsetup_r+0x7a>
 8004080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004082:	b141      	cbz	r1, 8004096 <__swsetup_r+0x6a>
 8004084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004088:	4299      	cmp	r1, r3
 800408a:	d002      	beq.n	8004092 <__swsetup_r+0x66>
 800408c:	4630      	mov	r0, r6
 800408e:	f000 f99b 	bl	80043c8 <_free_r>
 8004092:	2300      	movs	r3, #0
 8004094:	6363      	str	r3, [r4, #52]	; 0x34
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	2300      	movs	r3, #0
 80040a0:	6063      	str	r3, [r4, #4]
 80040a2:	6923      	ldr	r3, [r4, #16]
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	f043 0308 	orr.w	r3, r3, #8
 80040ac:	81a3      	strh	r3, [r4, #12]
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	b94b      	cbnz	r3, 80040c6 <__swsetup_r+0x9a>
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040bc:	d003      	beq.n	80040c6 <__swsetup_r+0x9a>
 80040be:	4621      	mov	r1, r4
 80040c0:	4630      	mov	r0, r6
 80040c2:	f000 f927 	bl	8004314 <__smakebuf_r>
 80040c6:	89a0      	ldrh	r0, [r4, #12]
 80040c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040cc:	f010 0301 	ands.w	r3, r0, #1
 80040d0:	d00a      	beq.n	80040e8 <__swsetup_r+0xbc>
 80040d2:	2300      	movs	r3, #0
 80040d4:	60a3      	str	r3, [r4, #8]
 80040d6:	6963      	ldr	r3, [r4, #20]
 80040d8:	425b      	negs	r3, r3
 80040da:	61a3      	str	r3, [r4, #24]
 80040dc:	6923      	ldr	r3, [r4, #16]
 80040de:	b943      	cbnz	r3, 80040f2 <__swsetup_r+0xc6>
 80040e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040e4:	d1ba      	bne.n	800405c <__swsetup_r+0x30>
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	0781      	lsls	r1, r0, #30
 80040ea:	bf58      	it	pl
 80040ec:	6963      	ldrpl	r3, [r4, #20]
 80040ee:	60a3      	str	r3, [r4, #8]
 80040f0:	e7f4      	b.n	80040dc <__swsetup_r+0xb0>
 80040f2:	2000      	movs	r0, #0
 80040f4:	e7f7      	b.n	80040e6 <__swsetup_r+0xba>
 80040f6:	bf00      	nop
 80040f8:	2000007c 	.word	0x2000007c
 80040fc:	08004598 	.word	0x08004598
 8004100:	080045b8 	.word	0x080045b8
 8004104:	08004578 	.word	0x08004578

08004108 <_close_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	2300      	movs	r3, #0
 800410c:	4d05      	ldr	r5, [pc, #20]	; (8004124 <_close_r+0x1c>)
 800410e:	4604      	mov	r4, r0
 8004110:	4608      	mov	r0, r1
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	f7fc fcdb 	bl	8000ace <_close>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_close_r+0x1a>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_close_r+0x1a>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	20000314 	.word	0x20000314

08004128 <__sflush_r>:
 8004128:	898a      	ldrh	r2, [r1, #12]
 800412a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412c:	4605      	mov	r5, r0
 800412e:	0710      	lsls	r0, r2, #28
 8004130:	460c      	mov	r4, r1
 8004132:	d457      	bmi.n	80041e4 <__sflush_r+0xbc>
 8004134:	684b      	ldr	r3, [r1, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	dc04      	bgt.n	8004144 <__sflush_r+0x1c>
 800413a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	dc01      	bgt.n	8004144 <__sflush_r+0x1c>
 8004140:	2000      	movs	r0, #0
 8004142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004146:	2e00      	cmp	r6, #0
 8004148:	d0fa      	beq.n	8004140 <__sflush_r+0x18>
 800414a:	2300      	movs	r3, #0
 800414c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004150:	682f      	ldr	r7, [r5, #0]
 8004152:	602b      	str	r3, [r5, #0]
 8004154:	d032      	beq.n	80041bc <__sflush_r+0x94>
 8004156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004158:	89a3      	ldrh	r3, [r4, #12]
 800415a:	075a      	lsls	r2, r3, #29
 800415c:	d505      	bpl.n	800416a <__sflush_r+0x42>
 800415e:	6863      	ldr	r3, [r4, #4]
 8004160:	1ac0      	subs	r0, r0, r3
 8004162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004164:	b10b      	cbz	r3, 800416a <__sflush_r+0x42>
 8004166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004168:	1ac0      	subs	r0, r0, r3
 800416a:	2300      	movs	r3, #0
 800416c:	4602      	mov	r2, r0
 800416e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004170:	4628      	mov	r0, r5
 8004172:	6a21      	ldr	r1, [r4, #32]
 8004174:	47b0      	blx	r6
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	d106      	bne.n	800418a <__sflush_r+0x62>
 800417c:	6829      	ldr	r1, [r5, #0]
 800417e:	291d      	cmp	r1, #29
 8004180:	d82c      	bhi.n	80041dc <__sflush_r+0xb4>
 8004182:	4a29      	ldr	r2, [pc, #164]	; (8004228 <__sflush_r+0x100>)
 8004184:	40ca      	lsrs	r2, r1
 8004186:	07d6      	lsls	r6, r2, #31
 8004188:	d528      	bpl.n	80041dc <__sflush_r+0xb4>
 800418a:	2200      	movs	r2, #0
 800418c:	6062      	str	r2, [r4, #4]
 800418e:	6922      	ldr	r2, [r4, #16]
 8004190:	04d9      	lsls	r1, r3, #19
 8004192:	6022      	str	r2, [r4, #0]
 8004194:	d504      	bpl.n	80041a0 <__sflush_r+0x78>
 8004196:	1c42      	adds	r2, r0, #1
 8004198:	d101      	bne.n	800419e <__sflush_r+0x76>
 800419a:	682b      	ldr	r3, [r5, #0]
 800419c:	b903      	cbnz	r3, 80041a0 <__sflush_r+0x78>
 800419e:	6560      	str	r0, [r4, #84]	; 0x54
 80041a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041a2:	602f      	str	r7, [r5, #0]
 80041a4:	2900      	cmp	r1, #0
 80041a6:	d0cb      	beq.n	8004140 <__sflush_r+0x18>
 80041a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041ac:	4299      	cmp	r1, r3
 80041ae:	d002      	beq.n	80041b6 <__sflush_r+0x8e>
 80041b0:	4628      	mov	r0, r5
 80041b2:	f000 f909 	bl	80043c8 <_free_r>
 80041b6:	2000      	movs	r0, #0
 80041b8:	6360      	str	r0, [r4, #52]	; 0x34
 80041ba:	e7c2      	b.n	8004142 <__sflush_r+0x1a>
 80041bc:	6a21      	ldr	r1, [r4, #32]
 80041be:	2301      	movs	r3, #1
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b0      	blx	r6
 80041c4:	1c41      	adds	r1, r0, #1
 80041c6:	d1c7      	bne.n	8004158 <__sflush_r+0x30>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0c4      	beq.n	8004158 <__sflush_r+0x30>
 80041ce:	2b1d      	cmp	r3, #29
 80041d0:	d001      	beq.n	80041d6 <__sflush_r+0xae>
 80041d2:	2b16      	cmp	r3, #22
 80041d4:	d101      	bne.n	80041da <__sflush_r+0xb2>
 80041d6:	602f      	str	r7, [r5, #0]
 80041d8:	e7b2      	b.n	8004140 <__sflush_r+0x18>
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	e7ae      	b.n	8004142 <__sflush_r+0x1a>
 80041e4:	690f      	ldr	r7, [r1, #16]
 80041e6:	2f00      	cmp	r7, #0
 80041e8:	d0aa      	beq.n	8004140 <__sflush_r+0x18>
 80041ea:	0793      	lsls	r3, r2, #30
 80041ec:	bf18      	it	ne
 80041ee:	2300      	movne	r3, #0
 80041f0:	680e      	ldr	r6, [r1, #0]
 80041f2:	bf08      	it	eq
 80041f4:	694b      	ldreq	r3, [r1, #20]
 80041f6:	1bf6      	subs	r6, r6, r7
 80041f8:	600f      	str	r7, [r1, #0]
 80041fa:	608b      	str	r3, [r1, #8]
 80041fc:	2e00      	cmp	r6, #0
 80041fe:	dd9f      	ble.n	8004140 <__sflush_r+0x18>
 8004200:	4633      	mov	r3, r6
 8004202:	463a      	mov	r2, r7
 8004204:	4628      	mov	r0, r5
 8004206:	6a21      	ldr	r1, [r4, #32]
 8004208:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800420c:	47e0      	blx	ip
 800420e:	2800      	cmp	r0, #0
 8004210:	dc06      	bgt.n	8004220 <__sflush_r+0xf8>
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	e790      	b.n	8004142 <__sflush_r+0x1a>
 8004220:	4407      	add	r7, r0
 8004222:	1a36      	subs	r6, r6, r0
 8004224:	e7ea      	b.n	80041fc <__sflush_r+0xd4>
 8004226:	bf00      	nop
 8004228:	20400001 	.word	0x20400001

0800422c <_fflush_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	690b      	ldr	r3, [r1, #16]
 8004230:	4605      	mov	r5, r0
 8004232:	460c      	mov	r4, r1
 8004234:	b913      	cbnz	r3, 800423c <_fflush_r+0x10>
 8004236:	2500      	movs	r5, #0
 8004238:	4628      	mov	r0, r5
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	b118      	cbz	r0, 8004246 <_fflush_r+0x1a>
 800423e:	6983      	ldr	r3, [r0, #24]
 8004240:	b90b      	cbnz	r3, 8004246 <_fflush_r+0x1a>
 8004242:	f7ff fa19 	bl	8003678 <__sinit>
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <_fflush_r+0x6c>)
 8004248:	429c      	cmp	r4, r3
 800424a:	d11b      	bne.n	8004284 <_fflush_r+0x58>
 800424c:	686c      	ldr	r4, [r5, #4]
 800424e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0ef      	beq.n	8004236 <_fflush_r+0xa>
 8004256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004258:	07d0      	lsls	r0, r2, #31
 800425a:	d404      	bmi.n	8004266 <_fflush_r+0x3a>
 800425c:	0599      	lsls	r1, r3, #22
 800425e:	d402      	bmi.n	8004266 <_fflush_r+0x3a>
 8004260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004262:	f7ff faa7 	bl	80037b4 <__retarget_lock_acquire_recursive>
 8004266:	4628      	mov	r0, r5
 8004268:	4621      	mov	r1, r4
 800426a:	f7ff ff5d 	bl	8004128 <__sflush_r>
 800426e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004270:	4605      	mov	r5, r0
 8004272:	07da      	lsls	r2, r3, #31
 8004274:	d4e0      	bmi.n	8004238 <_fflush_r+0xc>
 8004276:	89a3      	ldrh	r3, [r4, #12]
 8004278:	059b      	lsls	r3, r3, #22
 800427a:	d4dd      	bmi.n	8004238 <_fflush_r+0xc>
 800427c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800427e:	f7ff fa9a 	bl	80037b6 <__retarget_lock_release_recursive>
 8004282:	e7d9      	b.n	8004238 <_fflush_r+0xc>
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <_fflush_r+0x70>)
 8004286:	429c      	cmp	r4, r3
 8004288:	d101      	bne.n	800428e <_fflush_r+0x62>
 800428a:	68ac      	ldr	r4, [r5, #8]
 800428c:	e7df      	b.n	800424e <_fflush_r+0x22>
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <_fflush_r+0x74>)
 8004290:	429c      	cmp	r4, r3
 8004292:	bf08      	it	eq
 8004294:	68ec      	ldreq	r4, [r5, #12]
 8004296:	e7da      	b.n	800424e <_fflush_r+0x22>
 8004298:	08004598 	.word	0x08004598
 800429c:	080045b8 	.word	0x080045b8
 80042a0:	08004578 	.word	0x08004578

080042a4 <_lseek_r>:
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	4604      	mov	r4, r0
 80042a8:	4608      	mov	r0, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	2200      	movs	r2, #0
 80042ae:	4d05      	ldr	r5, [pc, #20]	; (80042c4 <_lseek_r+0x20>)
 80042b0:	602a      	str	r2, [r5, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f7fc fc2f 	bl	8000b16 <_lseek>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d102      	bne.n	80042c2 <_lseek_r+0x1e>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	b103      	cbz	r3, 80042c2 <_lseek_r+0x1e>
 80042c0:	6023      	str	r3, [r4, #0]
 80042c2:	bd38      	pop	{r3, r4, r5, pc}
 80042c4:	20000314 	.word	0x20000314

080042c8 <__swhatbuf_r>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	460e      	mov	r6, r1
 80042cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d0:	4614      	mov	r4, r2
 80042d2:	2900      	cmp	r1, #0
 80042d4:	461d      	mov	r5, r3
 80042d6:	b096      	sub	sp, #88	; 0x58
 80042d8:	da08      	bge.n	80042ec <__swhatbuf_r+0x24>
 80042da:	2200      	movs	r2, #0
 80042dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80042e0:	602a      	str	r2, [r5, #0]
 80042e2:	061a      	lsls	r2, r3, #24
 80042e4:	d410      	bmi.n	8004308 <__swhatbuf_r+0x40>
 80042e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ea:	e00e      	b.n	800430a <__swhatbuf_r+0x42>
 80042ec:	466a      	mov	r2, sp
 80042ee:	f000 f8c5 	bl	800447c <_fstat_r>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	dbf1      	blt.n	80042da <__swhatbuf_r+0x12>
 80042f6:	9a01      	ldr	r2, [sp, #4]
 80042f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004300:	425a      	negs	r2, r3
 8004302:	415a      	adcs	r2, r3
 8004304:	602a      	str	r2, [r5, #0]
 8004306:	e7ee      	b.n	80042e6 <__swhatbuf_r+0x1e>
 8004308:	2340      	movs	r3, #64	; 0x40
 800430a:	2000      	movs	r0, #0
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	b016      	add	sp, #88	; 0x58
 8004310:	bd70      	pop	{r4, r5, r6, pc}
	...

08004314 <__smakebuf_r>:
 8004314:	898b      	ldrh	r3, [r1, #12]
 8004316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004318:	079d      	lsls	r5, r3, #30
 800431a:	4606      	mov	r6, r0
 800431c:	460c      	mov	r4, r1
 800431e:	d507      	bpl.n	8004330 <__smakebuf_r+0x1c>
 8004320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	6123      	str	r3, [r4, #16]
 8004328:	2301      	movs	r3, #1
 800432a:	6163      	str	r3, [r4, #20]
 800432c:	b002      	add	sp, #8
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	466a      	mov	r2, sp
 8004332:	ab01      	add	r3, sp, #4
 8004334:	f7ff ffc8 	bl	80042c8 <__swhatbuf_r>
 8004338:	9900      	ldr	r1, [sp, #0]
 800433a:	4605      	mov	r5, r0
 800433c:	4630      	mov	r0, r6
 800433e:	f7ff fa5b 	bl	80037f8 <_malloc_r>
 8004342:	b948      	cbnz	r0, 8004358 <__smakebuf_r+0x44>
 8004344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004348:	059a      	lsls	r2, r3, #22
 800434a:	d4ef      	bmi.n	800432c <__smakebuf_r+0x18>
 800434c:	f023 0303 	bic.w	r3, r3, #3
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	81a3      	strh	r3, [r4, #12]
 8004356:	e7e3      	b.n	8004320 <__smakebuf_r+0xc>
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <__smakebuf_r+0x7c>)
 800435a:	62b3      	str	r3, [r6, #40]	; 0x28
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	6020      	str	r0, [r4, #0]
 8004360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004364:	81a3      	strh	r3, [r4, #12]
 8004366:	9b00      	ldr	r3, [sp, #0]
 8004368:	6120      	str	r0, [r4, #16]
 800436a:	6163      	str	r3, [r4, #20]
 800436c:	9b01      	ldr	r3, [sp, #4]
 800436e:	b15b      	cbz	r3, 8004388 <__smakebuf_r+0x74>
 8004370:	4630      	mov	r0, r6
 8004372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004376:	f000 f893 	bl	80044a0 <_isatty_r>
 800437a:	b128      	cbz	r0, 8004388 <__smakebuf_r+0x74>
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	81a3      	strh	r3, [r4, #12]
 8004388:	89a0      	ldrh	r0, [r4, #12]
 800438a:	4305      	orrs	r5, r0
 800438c:	81a5      	strh	r5, [r4, #12]
 800438e:	e7cd      	b.n	800432c <__smakebuf_r+0x18>
 8004390:	08003611 	.word	0x08003611

08004394 <memchr>:
 8004394:	4603      	mov	r3, r0
 8004396:	b510      	push	{r4, lr}
 8004398:	b2c9      	uxtb	r1, r1
 800439a:	4402      	add	r2, r0
 800439c:	4293      	cmp	r3, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	d101      	bne.n	80043a6 <memchr+0x12>
 80043a2:	2000      	movs	r0, #0
 80043a4:	e003      	b.n	80043ae <memchr+0x1a>
 80043a6:	7804      	ldrb	r4, [r0, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	428c      	cmp	r4, r1
 80043ac:	d1f6      	bne.n	800439c <memchr+0x8>
 80043ae:	bd10      	pop	{r4, pc}

080043b0 <__malloc_lock>:
 80043b0:	4801      	ldr	r0, [pc, #4]	; (80043b8 <__malloc_lock+0x8>)
 80043b2:	f7ff b9ff 	b.w	80037b4 <__retarget_lock_acquire_recursive>
 80043b6:	bf00      	nop
 80043b8:	20000308 	.word	0x20000308

080043bc <__malloc_unlock>:
 80043bc:	4801      	ldr	r0, [pc, #4]	; (80043c4 <__malloc_unlock+0x8>)
 80043be:	f7ff b9fa 	b.w	80037b6 <__retarget_lock_release_recursive>
 80043c2:	bf00      	nop
 80043c4:	20000308 	.word	0x20000308

080043c8 <_free_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4605      	mov	r5, r0
 80043cc:	2900      	cmp	r1, #0
 80043ce:	d040      	beq.n	8004452 <_free_r+0x8a>
 80043d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d4:	1f0c      	subs	r4, r1, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	bfb8      	it	lt
 80043da:	18e4      	addlt	r4, r4, r3
 80043dc:	f7ff ffe8 	bl	80043b0 <__malloc_lock>
 80043e0:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <_free_r+0x8c>)
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	b933      	cbnz	r3, 80043f4 <_free_r+0x2c>
 80043e6:	6063      	str	r3, [r4, #4]
 80043e8:	6014      	str	r4, [r2, #0]
 80043ea:	4628      	mov	r0, r5
 80043ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043f0:	f7ff bfe4 	b.w	80043bc <__malloc_unlock>
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d908      	bls.n	800440a <_free_r+0x42>
 80043f8:	6820      	ldr	r0, [r4, #0]
 80043fa:	1821      	adds	r1, r4, r0
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf01      	itttt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	1809      	addeq	r1, r1, r0
 8004406:	6021      	streq	r1, [r4, #0]
 8004408:	e7ed      	b.n	80043e6 <_free_r+0x1e>
 800440a:	461a      	mov	r2, r3
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b10b      	cbz	r3, 8004414 <_free_r+0x4c>
 8004410:	42a3      	cmp	r3, r4
 8004412:	d9fa      	bls.n	800440a <_free_r+0x42>
 8004414:	6811      	ldr	r1, [r2, #0]
 8004416:	1850      	adds	r0, r2, r1
 8004418:	42a0      	cmp	r0, r4
 800441a:	d10b      	bne.n	8004434 <_free_r+0x6c>
 800441c:	6820      	ldr	r0, [r4, #0]
 800441e:	4401      	add	r1, r0
 8004420:	1850      	adds	r0, r2, r1
 8004422:	4283      	cmp	r3, r0
 8004424:	6011      	str	r1, [r2, #0]
 8004426:	d1e0      	bne.n	80043ea <_free_r+0x22>
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4401      	add	r1, r0
 800442e:	6011      	str	r1, [r2, #0]
 8004430:	6053      	str	r3, [r2, #4]
 8004432:	e7da      	b.n	80043ea <_free_r+0x22>
 8004434:	d902      	bls.n	800443c <_free_r+0x74>
 8004436:	230c      	movs	r3, #12
 8004438:	602b      	str	r3, [r5, #0]
 800443a:	e7d6      	b.n	80043ea <_free_r+0x22>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	1821      	adds	r1, r4, r0
 8004440:	428b      	cmp	r3, r1
 8004442:	bf01      	itttt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	1809      	addeq	r1, r1, r0
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	6063      	str	r3, [r4, #4]
 800444e:	6054      	str	r4, [r2, #4]
 8004450:	e7cb      	b.n	80043ea <_free_r+0x22>
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	2000030c 	.word	0x2000030c

08004458 <_read_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	4604      	mov	r4, r0
 800445c:	4608      	mov	r0, r1
 800445e:	4611      	mov	r1, r2
 8004460:	2200      	movs	r2, #0
 8004462:	4d05      	ldr	r5, [pc, #20]	; (8004478 <_read_r+0x20>)
 8004464:	602a      	str	r2, [r5, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	f7fc faf8 	bl	8000a5c <_read>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_read_r+0x1e>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_read_r+0x1e>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	20000314 	.word	0x20000314

0800447c <_fstat_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	2300      	movs	r3, #0
 8004480:	4d06      	ldr	r5, [pc, #24]	; (800449c <_fstat_r+0x20>)
 8004482:	4604      	mov	r4, r0
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	f7fc fb2b 	bl	8000ae4 <_fstat>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	d102      	bne.n	8004498 <_fstat_r+0x1c>
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	b103      	cbz	r3, 8004498 <_fstat_r+0x1c>
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	bd38      	pop	{r3, r4, r5, pc}
 800449a:	bf00      	nop
 800449c:	20000314 	.word	0x20000314

080044a0 <_isatty_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	2300      	movs	r3, #0
 80044a4:	4d05      	ldr	r5, [pc, #20]	; (80044bc <_isatty_r+0x1c>)
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fc fb29 	bl	8000b02 <_isatty>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_isatty_r+0x1a>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_isatty_r+0x1a>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	20000314 	.word	0x20000314

080044c0 <_init>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr

080044cc <_fini>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr
