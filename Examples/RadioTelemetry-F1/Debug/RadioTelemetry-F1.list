
RadioTelemetry-F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004600  08004600  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08004600  08004600  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004600  08004600  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004604  08004604  00014604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08004608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200000e0  080046e8  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080046e8  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d14  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c79  00000000  00000000  00027e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00029a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001812e  00000000  00000000  0002aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ece  00000000  00000000  00042b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f07  00000000  00000000  0004ca1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ac  00000000  00000000  000d0974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080044b4 	.word	0x080044b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	080044b4 	.word	0x080044b4

0800014c <Sensor_UART_Telemetry_Init>:
volatile uint8_t Transiever_TX_Buffer[SERVO_BUFFER_SIZE];
volatile struct __FLAGS FLAGS;

extern TelemetrySensorStruct SensorList[NUM_SENSORS];

void Sensor_UART_Telemetry_Init(UART_HandleTypeDef *huart) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	  HAL_UART_RegisterCallback(huart, HAL_UART_RX_COMPLETE_CB_ID, Sensor_UART_RxComplete_Callback);
 8000154:	4a0d      	ldr	r2, [pc, #52]	; (800018c <Sensor_UART_Telemetry_Init+0x40>)
 8000156:	2103      	movs	r1, #3
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f002 fa53 	bl	8002604 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_TX_COMPLETE_CB_ID, Sensor_UART_TxComplete_Callback);
 800015e:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <Sensor_UART_Telemetry_Init+0x44>)
 8000160:	2101      	movs	r1, #1
 8000162:	6878      	ldr	r0, [r7, #4]
 8000164:	f002 fa4e 	bl	8002604 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_ERROR_CB_ID, Sensor_UART_Error_Callback);
 8000168:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <Sensor_UART_Telemetry_Init+0x48>)
 800016a:	2104      	movs	r1, #4
 800016c:	6878      	ldr	r0, [r7, #4]
 800016e:	f002 fa49 	bl	8002604 <HAL_UART_RegisterCallback>
	  HAL_HalfDuplex_EnableReceiver(huart);	// Enable USART1 Receive
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	f002 fe1a 	bl	8002dac <HAL_HalfDuplex_EnableReceiver>
	  HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_RX_Buffer[0], 1);
 8000178:	2201      	movs	r2, #1
 800017a:	4907      	ldr	r1, [pc, #28]	; (8000198 <Sensor_UART_Telemetry_Init+0x4c>)
 800017c:	6878      	ldr	r0, [r7, #4]
 800017e:	f002 fb53 	bl	8002828 <HAL_UART_Receive_DMA>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	080002f9 	.word	0x080002f9
 8000190:	08000569 	.word	0x08000569
 8000194:	080001ed 	.word	0x080001ed
 8000198:	200000fc 	.word	0x200000fc

0800019c <Servo_UART_Telemetry_Init>:

void Servo_UART_Telemetry_Init(UART_HandleTypeDef *huart) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	  HAL_UART_RegisterCallback(huart, HAL_UART_RX_COMPLETE_CB_ID, Servo_UART_RxComplete_Callback);
 80001a4:	4a0d      	ldr	r2, [pc, #52]	; (80001dc <Servo_UART_Telemetry_Init+0x40>)
 80001a6:	2103      	movs	r1, #3
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f002 fa2b 	bl	8002604 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_ERROR_CB_ID, Servo_UART_Error_Callback);
 80001ae:	4a0c      	ldr	r2, [pc, #48]	; (80001e0 <Servo_UART_Telemetry_Init+0x44>)
 80001b0:	2104      	movs	r1, #4
 80001b2:	6878      	ldr	r0, [r7, #4]
 80001b4:	f002 fa26 	bl	8002604 <HAL_UART_RegisterCallback>
	  HAL_HalfDuplex_EnableReceiver(huart);	// Enable USART2 Receive
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f002 fdf7 	bl	8002dac <HAL_HalfDuplex_EnableReceiver>
	  FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 80001be:	4a09      	ldr	r2, [pc, #36]	; (80001e4 <Servo_UART_Telemetry_Init+0x48>)
 80001c0:	7813      	ldrb	r3, [r2, #0]
 80001c2:	f36f 03c4 	bfc	r3, #3, #2
 80001c6:	7013      	strb	r3, [r2, #0]
	  HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_TX_Buffer[0], 1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	4907      	ldr	r1, [pc, #28]	; (80001e8 <Servo_UART_Telemetry_Init+0x4c>)
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f002 fb2b 	bl	8002828 <HAL_UART_Receive_DMA>
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	080005a1 	.word	0x080005a1
 80001e0:	08000279 	.word	0x08000279
 80001e4:	20000148 	.word	0x20000148
 80001e8:	20000128 	.word	0x20000128

080001ec <Sensor_UART_Error_Callback>:


void Sensor_UART_Error_Callback(struct __UART_HandleTypeDef *huart){
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_PEFLAG(huart);
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	68fb      	ldr	r3, [r7, #12]
	HAL_UART_DMAStop(huart);
 800020a:	6878      	ldr	r0, [r7, #4]
 800020c:	f002 fb3c 	bl	8002888 <HAL_UART_DMAStop>
	HAL_UART_MspDeInit(huart);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 fe09 	bl	8000e28 <HAL_UART_MspDeInit>
	HAL_UART_MspInit(huart);
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 fd14 	bl	8000c44 <HAL_UART_MspInit>

	printf("Sensor UART Error %ld DMA RX/TX error 0x%lx-0x%lx \r\n", HAL_UART_GetError(huart), HAL_DMA_GetError(huart->hdmarx), HAL_DMA_GetError(huart->hdmatx));
 800021c:	6878      	ldr	r0, [r7, #4]
 800021e:	f002 fdf8 	bl	8002e12 <HAL_UART_GetError>
 8000222:	4604      	mov	r4, r0
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000228:	4618      	mov	r0, r3
 800022a:	f001 faf7 	bl	800181c <HAL_DMA_GetError>
 800022e:	4605      	mov	r5, r0
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000234:	4618      	mov	r0, r3
 8000236:	f001 faf1 	bl	800181c <HAL_DMA_GetError>
 800023a:	4603      	mov	r3, r0
 800023c:	462a      	mov	r2, r5
 800023e:	4621      	mov	r1, r4
 8000240:	480a      	ldr	r0, [pc, #40]	; (800026c <Sensor_UART_Error_Callback+0x80>)
 8000242:	f003 f9a3 	bl	800358c <iprintf>
	FLAGS.Transiever_RX_Sync = 0;
 8000246:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <Sensor_UART_Error_Callback+0x84>)
 8000248:	7813      	ldrb	r3, [r2, #0]
 800024a:	f36f 0382 	bfc	r3, #2, #1
 800024e:	7013      	strb	r3, [r2, #0]
	while(HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_RX_Buffer[0], 1) != HAL_OK);
 8000250:	bf00      	nop
 8000252:	2201      	movs	r2, #1
 8000254:	4907      	ldr	r1, [pc, #28]	; (8000274 <Sensor_UART_Error_Callback+0x88>)
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f002 fae6 	bl	8002828 <HAL_UART_Receive_DMA>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d1f7      	bne.n	8000252 <Sensor_UART_Error_Callback+0x66>
}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bdb0      	pop	{r4, r5, r7, pc}
 800026c:	080044cc 	.word	0x080044cc
 8000270:	20000148 	.word	0x20000148
 8000274:	200000fc 	.word	0x200000fc

08000278 <Servo_UART_Error_Callback>:

void Servo_UART_Error_Callback(struct __UART_HandleTypeDef *huart){
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
	HAL_UART_DMAStop(huart);
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f002 faf6 	bl	8002888 <HAL_UART_DMAStop>
	HAL_UART_MspDeInit(huart);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f000 fdc3 	bl	8000e28 <HAL_UART_MspDeInit>
	HAL_UART_MspInit(huart);
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f000 fcce 	bl	8000c44 <HAL_UART_MspInit>
	printf("Servo UART Error %ld DMA error 0x%lx \r\n", HAL_UART_GetError(huart), HAL_DMA_GetError(huart->hdmarx));
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f002 fdb2 	bl	8002e12 <HAL_UART_GetError>
 80002ae:	4604      	mov	r4, r0
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 fab1 	bl	800181c <HAL_DMA_GetError>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4621      	mov	r1, r4
 80002c0:	480a      	ldr	r0, [pc, #40]	; (80002ec <Servo_UART_Error_Callback+0x74>)
 80002c2:	f003 f963 	bl	800358c <iprintf>
	FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <Servo_UART_Error_Callback+0x78>)
 80002c8:	7813      	ldrb	r3, [r2, #0]
 80002ca:	f36f 03c4 	bfc	r3, #3, #2
 80002ce:	7013      	strb	r3, [r2, #0]
	while(HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_TX_Buffer[0], 1) != HAL_OK);
 80002d0:	bf00      	nop
 80002d2:	2201      	movs	r2, #1
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <Servo_UART_Error_Callback+0x7c>)
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f002 faa6 	bl	8002828 <HAL_UART_Receive_DMA>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d1f7      	bne.n	80002d2 <Servo_UART_Error_Callback+0x5a>
}
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd90      	pop	{r4, r7, pc}
 80002ec:	08004504 	.word	0x08004504
 80002f0:	20000148 	.word	0x20000148
 80002f4:	20000128 	.word	0x20000128

080002f8 <Sensor_UART_RxComplete_Callback>:

void Sensor_UART_RxComplete_Callback(struct __UART_HandleTypeDef *huart){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	uint16_t t, chksum = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	81fb      	strh	r3, [r7, #14]

	if(!FLAGS.Transiever_RX_Sync) {
 8000304:	4b93      	ldr	r3, [pc, #588]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d12a      	bne.n	8000368 <Sensor_UART_RxComplete_Callback+0x70>
		FLAGS.Transiever_RX_Sync = Transiever_RX_Buffer[0] == SENSOR_HEADER;
 8000312:	4b91      	ldr	r3, [pc, #580]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b04      	cmp	r3, #4
 800031a:	bf0c      	ite	eq
 800031c:	2301      	moveq	r3, #1
 800031e:	2300      	movne	r3, #0
 8000320:	b2d9      	uxtb	r1, r3
 8000322:	4a8c      	ldr	r2, [pc, #560]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 8000324:	7813      	ldrb	r3, [r2, #0]
 8000326:	f361 0382 	bfi	r3, r1, #2, #1
 800032a:	7013      	strb	r3, [r2, #0]
		if(!FLAGS.Transiever_RX_Sync) {
 800032c:	4b89      	ldr	r3, [pc, #548]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d109      	bne.n	800034e <Sensor_UART_RxComplete_Callback+0x56>
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_RX_Buffer[0], 1) != HAL_OK);
 800033a:	bf00      	nop
 800033c:	2201      	movs	r2, #1
 800033e:	4986      	ldr	r1, [pc, #536]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f002 fa71 	bl	8002828 <HAL_UART_Receive_DMA>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d1f7      	bne.n	800033c <Sensor_UART_RxComplete_Callback+0x44>
		} else {
			Transiever_RX_Buffer[0] = SENSOR_HEADER;
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_RX_Buffer[1], 3) != HAL_OK);
		}
		return;
 800034c:	e0fe      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
			Transiever_RX_Buffer[0] = SENSOR_HEADER;
 800034e:	4b82      	ldr	r3, [pc, #520]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000350:	2204      	movs	r2, #4
 8000352:	701a      	strb	r2, [r3, #0]
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_RX_Buffer[1], 3) != HAL_OK);
 8000354:	bf00      	nop
 8000356:	2203      	movs	r2, #3
 8000358:	4980      	ldr	r1, [pc, #512]	; (800055c <Sensor_UART_RxComplete_Callback+0x264>)
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f002 fa64 	bl	8002828 <HAL_UART_Receive_DMA>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f7      	bne.n	8000356 <Sensor_UART_RxComplete_Callback+0x5e>
		return;
 8000366:	e0f1      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
	} else {

		FLAGS.Transiever_RX_Sync = Transiever_RX_Buffer[0] == SENSOR_HEADER;
 8000368:	4b7b      	ldr	r3, [pc, #492]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b04      	cmp	r3, #4
 8000370:	bf0c      	ite	eq
 8000372:	2301      	moveq	r3, #1
 8000374:	2300      	movne	r3, #0
 8000376:	b2d9      	uxtb	r1, r3
 8000378:	4a76      	ldr	r2, [pc, #472]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 800037a:	7813      	ldrb	r3, [r2, #0]
 800037c:	f361 0382 	bfi	r3, r1, #2, #1
 8000380:	7013      	strb	r3, [r2, #0]
		if(!FLAGS.Transiever_RX_Sync) {
 8000382:	4b74      	ldr	r3, [pc, #464]	; (8000554 <Sensor_UART_RxComplete_Callback+0x25c>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2b00      	cmp	r3, #0
 800038e:	d109      	bne.n	80003a4 <Sensor_UART_RxComplete_Callback+0xac>
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_RX_Buffer[0], 1) != HAL_OK);
 8000390:	bf00      	nop
 8000392:	2201      	movs	r2, #1
 8000394:	4970      	ldr	r1, [pc, #448]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f002 fa46 	bl	8002828 <HAL_UART_Receive_DMA>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1f7      	bne.n	8000392 <Sensor_UART_RxComplete_Callback+0x9a>
			return;
 80003a2:	e0d3      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
		}

		uint8_t CHNL = (Transiever_RX_Buffer[1] & SENSOR_CHNL_MASK);
 80003a4:	4b6c      	ldr	r3, [pc, #432]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 80003a6:	785b      	ldrb	r3, [r3, #1]
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	f003 030f 	and.w	r3, r3, #15
 80003ae:	733b      	strb	r3, [r7, #12]
		uint8_t SIZE = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	72fb      	strb	r3, [r7, #11]
		uint8_t i = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	737b      	strb	r3, [r7, #13]

		if((CHNL <= NUM_SENSORS) && (CHNL > 0)) {
 80003b8:	7b3b      	ldrb	r3, [r7, #12]
 80003ba:	2b0e      	cmp	r3, #14
 80003bc:	d81d      	bhi.n	80003fa <Sensor_UART_RxComplete_Callback+0x102>
 80003be:	7b3b      	ldrb	r3, [r7, #12]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d01a      	beq.n	80003fa <Sensor_UART_RxComplete_Callback+0x102>
			SIZE = (SensorList[CHNL-1].SensorType & 0x80) ? SENSOR_TX_BUF_SIZE_8 : SENSOR_TX_BUF_SIZE_6;
 80003c4:	7b3b      	ldrb	r3, [r7, #12]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4a65      	ldr	r2, [pc, #404]	; (8000560 <Sensor_UART_RxComplete_Callback+0x268>)
 80003ca:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da01      	bge.n	80003d8 <Sensor_UART_RxComplete_Callback+0xe0>
 80003d4:	2308      	movs	r3, #8
 80003d6:	e000      	b.n	80003da <Sensor_UART_RxComplete_Callback+0xe2>
 80003d8:	2306      	movs	r3, #6
 80003da:	72fb      	strb	r3, [r7, #11]
		} else {
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
			return;
		}

		switch(Transiever_RX_Buffer[1] & SENSOR_CMND_MASK) {
 80003dc:	4b5e      	ldr	r3, [pc, #376]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 80003de:	785b      	ldrb	r3, [r3, #1]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003e6:	2ba0      	cmp	r3, #160	; 0xa0
 80003e8:	d04d      	beq.n	8000486 <Sensor_UART_RxComplete_Callback+0x18e>
 80003ea:	2ba0      	cmp	r3, #160	; 0xa0
 80003ec:	f300 808f 	bgt.w	800050e <Sensor_UART_RxComplete_Callback+0x216>
 80003f0:	2b80      	cmp	r3, #128	; 0x80
 80003f2:	d00c      	beq.n	800040e <Sensor_UART_RxComplete_Callback+0x116>
 80003f4:	2b90      	cmp	r3, #144	; 0x90
 80003f6:	d00f      	beq.n	8000418 <Sensor_UART_RxComplete_Callback+0x120>
 80003f8:	e089      	b.n	800050e <Sensor_UART_RxComplete_Callback+0x216>
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
 80003fa:	bf00      	nop
 80003fc:	2204      	movs	r2, #4
 80003fe:	4956      	ldr	r1, [pc, #344]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f002 fa11 	bl	8002828 <HAL_UART_Receive_DMA>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1f7      	bne.n	80003fc <Sensor_UART_RxComplete_Callback+0x104>
			return;
 800040c:	e09e      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
 800040e:	4b52      	ldr	r3, [pc, #328]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000410:	681b      	ldr	r3, [r3, #0]
			case SENSOR_CMD_DSCVR:
				memcpy((uint8_t *) TX_Buffer, (uint8_t*) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE);
 8000412:	4a54      	ldr	r2, [pc, #336]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 8000414:	6013      	str	r3, [r2, #0]
				break;
 8000416:	e084      	b.n	8000522 <Sensor_UART_RxComplete_Callback+0x22a>

			case SENSOR_CMD_TYPE:
				TX_Buffer[0] = SENSOR_TX_BUF_SIZE_6;
 8000418:	4b52      	ldr	r3, [pc, #328]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 800041a:	2206      	movs	r2, #6
 800041c:	701a      	strb	r2, [r3, #0]
				chksum = TELM_CHECKSUM_CONST - SENSOR_TX_BUF_SIZE_6;
 800041e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8000422:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[1] = t = Transiever_RX_Buffer[1];
 8000424:	4b4c      	ldr	r3, [pc, #304]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000426:	785b      	ldrb	r3, [r3, #1]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	813b      	strh	r3, [r7, #8]
 800042c:	893b      	ldrh	r3, [r7, #8]
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b4c      	ldr	r3, [pc, #304]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 8000432:	705a      	strb	r2, [r3, #1]
				chksum -= t;
 8000434:	89fa      	ldrh	r2, [r7, #14]
 8000436:	893b      	ldrh	r3, [r7, #8]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[2] = t = SensorList[CHNL-1].SensorType;
 800043c:	7b3b      	ldrb	r3, [r7, #12]
 800043e:	3b01      	subs	r3, #1
 8000440:	4a47      	ldr	r2, [pc, #284]	; (8000560 <Sensor_UART_RxComplete_Callback+0x268>)
 8000442:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000446:	813b      	strh	r3, [r7, #8]
 8000448:	893b      	ldrh	r3, [r7, #8]
 800044a:	b2da      	uxtb	r2, r3
 800044c:	4b45      	ldr	r3, [pc, #276]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 800044e:	709a      	strb	r2, [r3, #2]
				chksum -= t;
 8000450:	89fa      	ldrh	r2, [r7, #14]
 8000452:	893b      	ldrh	r3, [r7, #8]
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[3] = t = SIZE - 0x04;
 8000458:	7afb      	ldrb	r3, [r7, #11]
 800045a:	b29b      	uxth	r3, r3
 800045c:	3b04      	subs	r3, #4
 800045e:	813b      	strh	r3, [r7, #8]
 8000460:	893b      	ldrh	r3, [r7, #8]
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b3f      	ldr	r3, [pc, #252]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 8000466:	70da      	strb	r2, [r3, #3]
				chksum -= t;
 8000468:	89fa      	ldrh	r2, [r7, #14]
 800046a:	893b      	ldrh	r3, [r7, #8]
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[4] = chksum;
 8000470:	89fb      	ldrh	r3, [r7, #14]
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 8000476:	711a      	strb	r2, [r3, #4]
				TX_Buffer[5] = chksum >> 8;
 8000478:	89fb      	ldrh	r3, [r7, #14]
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	b29b      	uxth	r3, r3
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b38      	ldr	r3, [pc, #224]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 8000482:	715a      	strb	r2, [r3, #5]
				break;
 8000484:	e04d      	b.n	8000522 <Sensor_UART_RxComplete_Callback+0x22a>

			case SENSOR_CMD_MEAS:
				TX_Buffer[0] = SIZE;
 8000486:	4a37      	ldr	r2, [pc, #220]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	7013      	strb	r3, [r2, #0]
				chksum = TELM_CHECKSUM_CONST - SIZE;
 800048c:	7afb      	ldrb	r3, [r7, #11]
 800048e:	b29b      	uxth	r3, r3
 8000490:	43db      	mvns	r3, r3
 8000492:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[1] = t = Transiever_RX_Buffer[1];
 8000494:	4b30      	ldr	r3, [pc, #192]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000496:	785b      	ldrb	r3, [r3, #1]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	813b      	strh	r3, [r7, #8]
 800049c:	893b      	ldrh	r3, [r7, #8]
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b30      	ldr	r3, [pc, #192]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 80004a2:	705a      	strb	r2, [r3, #1]
				chksum -= t;
 80004a4:	89fa      	ldrh	r2, [r7, #14]
 80004a6:	893b      	ldrh	r3, [r7, #8]
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	81fb      	strh	r3, [r7, #14]
				for (i = 2; i < SIZE - 2; i++) {
 80004ac:	2302      	movs	r3, #2
 80004ae:	737b      	strb	r3, [r7, #13]
 80004b0:	e018      	b.n	80004e4 <Sensor_UART_RxComplete_Callback+0x1ec>
					TX_Buffer[i] = t = (uint8_t) (SensorList[CHNL-1].SensorMeas >> 8*(i-2));
 80004b2:	7b3b      	ldrb	r3, [r7, #12]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a2a      	ldr	r2, [pc, #168]	; (8000560 <Sensor_UART_RxComplete_Callback+0x268>)
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	4413      	add	r3, r2
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	7b7b      	ldrb	r3, [r7, #13]
 80004c0:	3b02      	subs	r3, #2
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	fa42 f303 	asr.w	r3, r2, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	813b      	strh	r3, [r7, #8]
 80004cc:	7b7b      	ldrb	r3, [r7, #13]
 80004ce:	893a      	ldrh	r2, [r7, #8]
 80004d0:	b2d1      	uxtb	r1, r2
 80004d2:	4a24      	ldr	r2, [pc, #144]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 80004d4:	54d1      	strb	r1, [r2, r3]
					chksum -= t;
 80004d6:	89fa      	ldrh	r2, [r7, #14]
 80004d8:	893b      	ldrh	r3, [r7, #8]
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	81fb      	strh	r3, [r7, #14]
				for (i = 2; i < SIZE - 2; i++) {
 80004de:	7b7b      	ldrb	r3, [r7, #13]
 80004e0:	3301      	adds	r3, #1
 80004e2:	737b      	strb	r3, [r7, #13]
 80004e4:	7b7a      	ldrb	r2, [r7, #13]
 80004e6:	7afb      	ldrb	r3, [r7, #11]
 80004e8:	3b02      	subs	r3, #2
 80004ea:	429a      	cmp	r2, r3
 80004ec:	dbe1      	blt.n	80004b2 <Sensor_UART_RxComplete_Callback+0x1ba>
				}
				TX_Buffer[i++] = chksum;
 80004ee:	7b7b      	ldrb	r3, [r7, #13]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	737a      	strb	r2, [r7, #13]
 80004f4:	461a      	mov	r2, r3
 80004f6:	89fb      	ldrh	r3, [r7, #14]
 80004f8:	b2d9      	uxtb	r1, r3
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 80004fc:	5499      	strb	r1, [r3, r2]
				TX_Buffer[i  ] = chksum >> 8;
 80004fe:	89fb      	ldrh	r3, [r7, #14]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	b29a      	uxth	r2, r3
 8000504:	7b7b      	ldrb	r3, [r7, #13]
 8000506:	b2d1      	uxtb	r1, r2
 8000508:	4a16      	ldr	r2, [pc, #88]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 800050a:	54d1      	strb	r1, [r2, r3]

				break;
 800050c:	e009      	b.n	8000522 <Sensor_UART_RxComplete_Callback+0x22a>

			default:
				while(HAL_UART_Receive_DMA(huart, (uint8_t *) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
 800050e:	bf00      	nop
 8000510:	2204      	movs	r2, #4
 8000512:	4911      	ldr	r1, [pc, #68]	; (8000558 <Sensor_UART_RxComplete_Callback+0x260>)
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f002 f987 	bl	8002828 <HAL_UART_Receive_DMA>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f7      	bne.n	8000510 <Sensor_UART_RxComplete_Callback+0x218>
				return;
 8000520:	e014      	b.n	800054c <Sensor_UART_RxComplete_Callback+0x254>
		}

			while(HAL_HalfDuplex_EnableTransmitter(huart) != HAL_OK);
 8000522:	bf00      	nop
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f002 fc0e 	bl	8002d46 <HAL_HalfDuplex_EnableTransmitter>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1f9      	bne.n	8000524 <Sensor_UART_RxComplete_Callback+0x22c>
			while(HAL_UART_Transmit_DMA(huart, (uint8_t *) TX_Buffer, TX_Buffer[0]) != HAL_OK);
 8000530:	bf00      	nop
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	b29b      	uxth	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	4909      	ldr	r1, [pc, #36]	; (8000564 <Sensor_UART_RxComplete_Callback+0x26c>)
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f002 f906 	bl	8002750 <HAL_UART_Transmit_DMA>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1f3      	bne.n	8000532 <Sensor_UART_RxComplete_Callback+0x23a>
			return;
 800054a:	bf00      	nop
	}
}
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000148 	.word	0x20000148
 8000558:	200000fc 	.word	0x200000fc
 800055c:	200000fd 	.word	0x200000fd
 8000560:	20000000 	.word	0x20000000
 8000564:	20000100 	.word	0x20000100

08000568 <Sensor_UART_TxComplete_Callback>:

void Sensor_UART_TxComplete_Callback(struct __UART_HandleTypeDef *huart){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	while(HAL_HalfDuplex_EnableReceiver(huart) != HAL_OK);
 8000570:	bf00      	nop
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f002 fc1a 	bl	8002dac <HAL_HalfDuplex_EnableReceiver>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f9      	bne.n	8000572 <Sensor_UART_TxComplete_Callback+0xa>
	while(HAL_UART_Receive_DMA(huart, (uint8_t*) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
 800057e:	bf00      	nop
 8000580:	2204      	movs	r2, #4
 8000582:	4906      	ldr	r1, [pc, #24]	; (800059c <Sensor_UART_TxComplete_Callback+0x34>)
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f002 f94f 	bl	8002828 <HAL_UART_Receive_DMA>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1f7      	bne.n	8000580 <Sensor_UART_TxComplete_Callback+0x18>
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000fc 	.word	0x200000fc

080005a0 <Servo_UART_RxComplete_Callback>:

void Servo_UART_RxComplete_Callback(struct __UART_HandleTypeDef *huart){
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint16_t t, chksum = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	817b      	strh	r3, [r7, #10]

	switch (FLAGS.TELEMETRY_SYNC_STATES) {
 80005ac:	4b53      	ldr	r3, [pc, #332]	; (80006fc <Servo_UART_RxComplete_Callback+0x15c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d032      	beq.n	8000620 <Servo_UART_RxComplete_Callback+0x80>
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	dc03      	bgt.n	80005c6 <Servo_UART_RxComplete_Callback+0x26>
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d012      	beq.n	80005e8 <Servo_UART_RxComplete_Callback+0x48>
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d041      	beq.n	800064a <Servo_UART_RxComplete_Callback+0xaa>
		case TELEMETRY_SYNC_SYNC0:
			if(Transiever_TX_Buffer[0] == SERVO_HEADER_1) {
 80005c6:	4b4e      	ldr	r3, [pc, #312]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b20      	cmp	r3, #32
 80005ce:	d105      	bne.n	80005dc <Servo_UART_RxComplete_Callback+0x3c>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC1;
 80005d0:	4a4a      	ldr	r2, [pc, #296]	; (80006fc <Servo_UART_RxComplete_Callback+0x15c>)
 80005d2:	7813      	ldrb	r3, [r2, #0]
 80005d4:	2101      	movs	r1, #1
 80005d6:	f361 03c4 	bfi	r3, r1, #3, #2
 80005da:	7013      	strb	r3, [r2, #0]
			}
			HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_TX_Buffer[1], 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4949      	ldr	r1, [pc, #292]	; (8000704 <Servo_UART_RxComplete_Callback+0x164>)
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f002 f921 	bl	8002828 <HAL_UART_Receive_DMA>
			break;
 80005e6:	e084      	b.n	80006f2 <Servo_UART_RxComplete_Callback+0x152>

		case TELEMETRY_SYNC_SYNC1:
			if(Transiever_TX_Buffer[1] == SERVO_HEADER_2) {
 80005e8:	4b45      	ldr	r3, [pc, #276]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b40      	cmp	r3, #64	; 0x40
 80005f0:	d10b      	bne.n	800060a <Servo_UART_RxComplete_Callback+0x6a>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNCED;
 80005f2:	4a42      	ldr	r2, [pc, #264]	; (80006fc <Servo_UART_RxComplete_Callback+0x15c>)
 80005f4:	7813      	ldrb	r3, [r2, #0]
 80005f6:	2102      	movs	r1, #2
 80005f8:	f361 03c4 	bfi	r3, r1, #3, #2
 80005fc:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_TX_Buffer[2], SERVO_BUFFER_SIZE-2);
 80005fe:	221e      	movs	r2, #30
 8000600:	4941      	ldr	r1, [pc, #260]	; (8000708 <Servo_UART_RxComplete_Callback+0x168>)
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f002 f910 	bl	8002828 <HAL_UART_Receive_DMA>
			} else {
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
				HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_TX_Buffer[0], 1);
			}
			break;
 8000608:	e073      	b.n	80006f2 <Servo_UART_RxComplete_Callback+0x152>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 800060a:	4a3c      	ldr	r2, [pc, #240]	; (80006fc <Servo_UART_RxComplete_Callback+0x15c>)
 800060c:	7813      	ldrb	r3, [r2, #0]
 800060e:	f36f 03c4 	bfc	r3, #3, #2
 8000612:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_TX_Buffer[0], 1);
 8000614:	2201      	movs	r2, #1
 8000616:	493a      	ldr	r1, [pc, #232]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f002 f905 	bl	8002828 <HAL_UART_Receive_DMA>
			break;
 800061e:	e068      	b.n	80006f2 <Servo_UART_RxComplete_Callback+0x152>

		case TELEMETRY_SYNC_VERIFIED:
			if((Transiever_TX_Buffer[0] != SERVO_HEADER_1) || (Transiever_TX_Buffer[1] != SERVO_HEADER_2)) {
 8000620:	4b37      	ldr	r3, [pc, #220]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b20      	cmp	r3, #32
 8000628:	d104      	bne.n	8000634 <Servo_UART_RxComplete_Callback+0x94>
 800062a:	4b35      	ldr	r3, [pc, #212]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b40      	cmp	r3, #64	; 0x40
 8000632:	d00a      	beq.n	800064a <Servo_UART_RxComplete_Callback+0xaa>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 8000634:	4a31      	ldr	r2, [pc, #196]	; (80006fc <Servo_UART_RxComplete_Callback+0x15c>)
 8000636:	7813      	ldrb	r3, [r2, #0]
 8000638:	f36f 03c4 	bfc	r3, #3, #2
 800063c:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_TX_Buffer[0], 1);
 800063e:	2201      	movs	r2, #1
 8000640:	492f      	ldr	r1, [pc, #188]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f002 f8f0 	bl	8002828 <HAL_UART_Receive_DMA>
				break;
 8000648:	e053      	b.n	80006f2 <Servo_UART_RxComplete_Callback+0x152>
			}
		case TELEMETRY_SYNC_SYNCED:
			t = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	81fb      	strh	r3, [r7, #14]
			for(uint8_t i = 0; i < SERVO_BUFFER_SIZE-2; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	737b      	strb	r3, [r7, #13]
 8000652:	e00a      	b.n	800066a <Servo_UART_RxComplete_Callback+0xca>
				t += Transiever_TX_Buffer[i];
 8000654:	7b7b      	ldrb	r3, [r7, #13]
 8000656:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 8000658:	5cd3      	ldrb	r3, [r2, r3]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	b29a      	uxth	r2, r3
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	4413      	add	r3, r2
 8000662:	81fb      	strh	r3, [r7, #14]
			for(uint8_t i = 0; i < SERVO_BUFFER_SIZE-2; i++)
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	3301      	adds	r3, #1
 8000668:	737b      	strb	r3, [r7, #13]
 800066a:	7b7b      	ldrb	r3, [r7, #13]
 800066c:	2b1d      	cmp	r3, #29
 800066e:	d9f1      	bls.n	8000654 <Servo_UART_RxComplete_Callback+0xb4>

			t = TELM_CHECKSUM_CONST-t;
 8000670:	89fb      	ldrh	r3, [r7, #14]
 8000672:	43db      	mvns	r3, r3
 8000674:	81fb      	strh	r3, [r7, #14]
			chksum = (Transiever_TX_Buffer[31]<<8 | Transiever_TX_Buffer[30]);
 8000676:	4b22      	ldr	r3, [pc, #136]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 8000678:	7fdb      	ldrb	r3, [r3, #31]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	b21a      	sxth	r2, r3
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 8000682:	7f9b      	ldrb	r3, [r3, #30]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	b21b      	sxth	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b21b      	sxth	r3, r3
 800068c:	817b      	strh	r3, [r7, #10]
			if(t == chksum) {
 800068e:	89fa      	ldrh	r2, [r7, #14]
 8000690:	897b      	ldrh	r3, [r7, #10]
 8000692:	429a      	cmp	r2, r3
 8000694:	d122      	bne.n	80006dc <Servo_UART_RxComplete_Callback+0x13c>
				memcpy(&ServoList, (uint8_t *) Transiever_TX_Buffer, SERVO_BUFFER_SIZE);
 8000696:	4a1d      	ldr	r2, [pc, #116]	; (800070c <Servo_UART_RxComplete_Callback+0x16c>)
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 800069a:	4614      	mov	r4, r2
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				FLAGS.FAIL_SAFE = (ServoList.Channel_11 > 1975);
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <Servo_UART_RxComplete_Callback+0x16c>)
 80006ac:	8adb      	ldrh	r3, [r3, #22]
 80006ae:	f240 72b7 	movw	r2, #1975	; 0x7b7
 80006b2:	4293      	cmp	r3, r2
 80006b4:	bf8c      	ite	hi
 80006b6:	2301      	movhi	r3, #1
 80006b8:	2300      	movls	r3, #0
 80006ba:	b2d9      	uxtb	r1, r3
 80006bc:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <Servo_UART_RxComplete_Callback+0x15c>)
 80006be:	7813      	ldrb	r3, [r2, #0]
 80006c0:	f361 0341 	bfi	r3, r1, #1, #1
 80006c4:	7013      	strb	r3, [r2, #0]
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_VERIFIED;
 80006c6:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <Servo_UART_RxComplete_Callback+0x15c>)
 80006c8:	7813      	ldrb	r3, [r2, #0]
 80006ca:	f043 0318 	orr.w	r3, r3, #24
 80006ce:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_TX_Buffer[0], SERVO_BUFFER_SIZE);
 80006d0:	2220      	movs	r2, #32
 80006d2:	490b      	ldr	r1, [pc, #44]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f002 f8a7 	bl	8002828 <HAL_UART_Receive_DMA>
			} else {
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
				HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_TX_Buffer[0], 1);
			}
			break;
 80006da:	e009      	b.n	80006f0 <Servo_UART_RxComplete_Callback+0x150>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <Servo_UART_RxComplete_Callback+0x15c>)
 80006de:	7813      	ldrb	r3, [r2, #0]
 80006e0:	f36f 03c4 	bfc	r3, #3, #2
 80006e4:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(huart, (uint8_t *) &Transiever_TX_Buffer[0], 1);
 80006e6:	2201      	movs	r2, #1
 80006e8:	4905      	ldr	r1, [pc, #20]	; (8000700 <Servo_UART_RxComplete_Callback+0x160>)
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f002 f89c 	bl	8002828 <HAL_UART_Receive_DMA>
			break;
 80006f0:	bf00      	nop
	}
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bdb0      	pop	{r4, r5, r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000148 	.word	0x20000148
 8000700:	20000128 	.word	0x20000128
 8000704:	20000129 	.word	0x20000129
 8000708:	2000012a 	.word	0x2000012a
 800070c:	20000108 	.word	0x20000108

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_DMA_Init+0x58>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <MX_DMA_Init+0x58>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_DMA_Init+0x58>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200e      	movs	r0, #14
 8000734:	f000 fd61 	bl	80011fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000738:	200e      	movs	r0, #14
 800073a:	f000 fd7a 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200f      	movs	r0, #15
 8000744:	f000 fd59 	bl	80011fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000748:	200f      	movs	r0, #15
 800074a:	f000 fd72 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2010      	movs	r0, #16
 8000754:	f000 fd51 	bl	80011fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000758:	2010      	movs	r0, #16
 800075a:	f000 fd6a 	bl	8001232 <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_GPIO_Init+0x58>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_GPIO_Init+0x58>)
 8000778:	f043 0320 	orr.w	r3, r3, #32
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_GPIO_Init+0x58>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_GPIO_Init+0x58>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <MX_GPIO_Init+0x58>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_GPIO_Init+0x58>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_GPIO_Init+0x58>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <MX_GPIO_Init+0x58>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <MX_GPIO_Init+0x58>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000

080007c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d013      	beq.n	8000808 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00b      	beq.n	8000808 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007f0:	e000      	b.n	80007f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fb6d 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f83d 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f7ff ffa3 	bl	800076c <MX_GPIO_Init>
  MX_DMA_Init();
 8000826:	f7ff ff73 	bl	8000710 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800082a:	f000 f9b7 	bl	8000b9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800082e:	f000 f9df 	bl	8000bf0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Sensor_UART_Telemetry_Init(&huart1);
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <main+0x70>)
 8000834:	f7ff fc8a 	bl	800014c <Sensor_UART_Telemetry_Init>
  Servo_UART_Telemetry_Init(&huart2);
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <main+0x74>)
 800083a:	f7ff fcaf 	bl	800019c <Servo_UART_Telemetry_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("%ld: ", HAL_GetTick());
 800083e:	f000 fbb3 	bl	8000fa8 <HAL_GetTick>
 8000842:	4603      	mov	r3, r0
 8000844:	4619      	mov	r1, r3
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <main+0x78>)
 8000848:	f002 fea0 	bl	800358c <iprintf>
	  for(uint8_t i = 1; i <= NUM_SENSORS; i++)
 800084c:	2301      	movs	r3, #1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	e00b      	b.n	800086a <main+0x56>
		  printf("%d\t", (uint16_t) *(((uint16_t*) &ServoList)+i) );
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <main+0x7c>)
 8000858:	4413      	add	r3, r2
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <main+0x80>)
 8000860:	f002 fe94 	bl	800358c <iprintf>
	  for(uint8_t i = 1; i <= NUM_SENSORS; i++)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	3301      	adds	r3, #1
 8000868:	71fb      	strb	r3, [r7, #7]
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b0e      	cmp	r3, #14
 800086e:	d9f0      	bls.n	8000852 <main+0x3e>
	  printf("\t%d\n", sizeof(FLAGS));
 8000870:	2101      	movs	r1, #1
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <main+0x84>)
 8000874:	f002 fe8a 	bl	800358c <iprintf>

	  HAL_Delay(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087c:	f000 fb9e 	bl	8000fbc <HAL_Delay>
	  printf("%ld: ", HAL_GetTick());
 8000880:	e7dd      	b.n	800083e <main+0x2a>
 8000882:	bf00      	nop
 8000884:	20000150 	.word	0x20000150
 8000888:	200001c4 	.word	0x200001c4
 800088c:	0800452c 	.word	0x0800452c
 8000890:	20000108 	.word	0x20000108
 8000894:	08004534 	.word	0x08004534
 8000898:	08004538 	.word	0x08004538

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b090      	sub	sp, #64	; 0x40
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fe66 	bl	800357c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fa11 	bl	8001d0c <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008f0:	f000 f826 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2302      	movs	r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2102      	movs	r1, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fc7e 	bl	8002210 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800091a:	f000 f811 	bl	8000940 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3740      	adds	r7, #64	; 0x40
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <__io_putchar>:

/* USER CODE BEGIN 4 */

// ITM SWO Printf Implementation
int __io_putchar(int ch)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff49 	bl	80007c8 <ITM_SendChar>
	return(ch);
 8000936:	687b      	ldr	r3, [r7, #4]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_MspInit+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <HAL_MspInit+0x5c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_MspInit+0x5c>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x5c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x5c>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_MspInit+0x60>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_MspInit+0x60>)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010000 	.word	0x40010000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 fac5 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <DMA1_Channel4_IRQHandler+0x10>)
 8000a06:	f000 fe03 	bl	8001610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000027c 	.word	0x2000027c

08000a14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <DMA1_Channel5_IRQHandler+0x10>)
 8000a1a:	f000 fdf9 	bl	8001610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000238 	.word	0x20000238

08000a28 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <DMA1_Channel6_IRQHandler+0x10>)
 8000a2e:	f000 fdef 	bl	8001610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200002c0 	.word	0x200002c0

08000a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <USART1_IRQHandler+0x10>)
 8000a42:	f001 ff7d 	bl	8002940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000150 	.word	0x20000150

08000a50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e00a      	b.n	8000a78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a62:	f3af 8000 	nop.w
 8000a66:	4601      	mov	r1, r0
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	b2ca      	uxtb	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf0      	blt.n	8000a62 <_read+0x12>
	}

return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e009      	b.n	8000ab0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff3e 	bl	8000926 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf1      	blt.n	8000a9c <_write+0x12>
	}
	return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_close>:

int _close(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae8:	605a      	str	r2, [r3, #4]
	return 0;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <_isatty>:

int _isatty(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
	return 1;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr

08000b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
	return 0;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f002 fce8 	bl	8003528 <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20005000 	.word	0x20005000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	2000014c 	.word	0x2000014c
 8000b8c:	20000318 	.word	0x20000318

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART1_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	f001 fcb4 	bl	8002540 <HAL_HalfDuplex_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f7ff feaf 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000150 	.word	0x20000150
 8000bec:	40013800 	.word	0x40013800

08000bf0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_USART2_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c28:	f001 fc8a 	bl	8002540 <HAL_HalfDuplex_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f7ff fe85 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001c4 	.word	0x200001c4
 8000c40:	40004400 	.word	0x40004400

08000c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a68      	ldr	r2, [pc, #416]	; (8000e00 <HAL_UART_MspInit+0x1bc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d179      	bne.n	8000d58 <HAL_UART_MspInit+0x114>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c64:	4b67      	ldr	r3, [pc, #412]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a66      	ldr	r2, [pc, #408]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b64      	ldr	r3, [pc, #400]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b61      	ldr	r3, [pc, #388]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a60      	ldr	r2, [pc, #384]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b5e      	ldr	r3, [pc, #376]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4857      	ldr	r0, [pc, #348]	; (8000e08 <HAL_UART_MspInit+0x1c4>)
 8000caa:	f000 fdef 	bl	800188c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000cae:	4b57      	ldr	r3, [pc, #348]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cb0:	4a57      	ldr	r2, [pc, #348]	; (8000e10 <HAL_UART_MspInit+0x1cc>)
 8000cb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb4:	4b55      	ldr	r3, [pc, #340]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cba:	4b54      	ldr	r3, [pc, #336]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc0:	4b52      	ldr	r3, [pc, #328]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc6:	4b51      	ldr	r3, [pc, #324]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ccc:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cd2:	4b4e      	ldr	r3, [pc, #312]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd8:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cde:	484b      	ldr	r0, [pc, #300]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000ce0:	f000 fad0 	bl	8001284 <HAL_DMA_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 8000cea:	f7ff fe29 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a46      	ldr	r2, [pc, #280]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cf2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cf4:	4a45      	ldr	r2, [pc, #276]	; (8000e0c <HAL_UART_MspInit+0x1c8>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000cfa:	4b46      	ldr	r3, [pc, #280]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000cfc:	4a46      	ldr	r2, [pc, #280]	; (8000e18 <HAL_UART_MspInit+0x1d4>)
 8000cfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d00:	4b44      	ldr	r3, [pc, #272]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d02:	2210      	movs	r2, #16
 8000d04:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d12:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d18:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d2a:	483a      	ldr	r0, [pc, #232]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d2c:	f000 faaa 	bl	8001284 <HAL_DMA_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000d36:	f7ff fe03 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a35      	ldr	r2, [pc, #212]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d3e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d40:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <HAL_UART_MspInit+0x1d0>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2025      	movs	r0, #37	; 0x25
 8000d4c:	f000 fa55 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d50:	2025      	movs	r0, #37	; 0x25
 8000d52:	f000 fa6e 	bl	8001232 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d56:	e04e      	b.n	8000df6 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <HAL_UART_MspInit+0x1d8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d149      	bne.n	8000df6 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <HAL_UART_MspInit+0x1c0>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d92:	2304      	movs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d96:	2312      	movs	r3, #18
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4818      	ldr	r0, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0x1c4>)
 8000da6:	f000 fd71 	bl	800188c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_UART_MspInit+0x1e0>)
 8000dae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000dda:	4811      	ldr	r0, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000ddc:	f000 fa52 	bl	8001284 <HAL_DMA_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8000de6:	f7ff fdab 	bl	8000940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <HAL_UART_MspInit+0x1dc>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	20000238 	.word	0x20000238
 8000e10:	40020058 	.word	0x40020058
 8000e14:	2000027c 	.word	0x2000027c
 8000e18:	40020044 	.word	0x40020044
 8000e1c:	40004400 	.word	0x40004400
 8000e20:	200002c0 	.word	0x200002c0
 8000e24:	4002006c 	.word	0x4002006c

08000e28 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_UART_MspDeInit+0x74>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d118      	bne.n	8000e6c <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_UART_MspDeInit+0x78>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <HAL_UART_MspDeInit+0x78>)
 8000e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e44:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8000e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4a:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <HAL_UART_MspDeInit+0x7c>)
 8000e4c:	f000 fea2 	bl	8001b94 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fa6f 	bl	8001338 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fa6a 	bl	8001338 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000e64:	2025      	movs	r0, #37	; 0x25
 8000e66:	f000 f9f2 	bl	800124e <HAL_NVIC_DisableIRQ>
    HAL_DMA_DeInit(uartHandle->hdmarx);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000e6a:	e013      	b.n	8000e94 <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_UART_MspDeInit+0x80>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10e      	bne.n	8000e94 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_UART_MspDeInit+0x78>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <HAL_UART_MspDeInit+0x78>)
 8000e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e80:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8000e82:	2104      	movs	r1, #4
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <HAL_UART_MspDeInit+0x7c>)
 8000e86:	f000 fe85 	bl	8001b94 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fa52 	bl	8001338 <HAL_DMA_DeInit>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40013800 	.word	0x40013800
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	40004400 	.word	0x40004400

08000eac <Reset_Handler>:
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <LoopFillZerobss+0x12>)
 8000eae:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x1a>)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:
 8000eb6:	58d4      	ldr	r4, [r2, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:
 8000ebc:	18c4      	adds	r4, r0, r3
 8000ebe:	428c      	cmp	r4, r1
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopFillZerobss+0x1e>)
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	; (8000ef0 <LoopFillZerobss+0x22>)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:
 8000ece:	42a2      	cmp	r2, r4
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>
 8000ed2:	f7ff fe5d 	bl	8000b90 <SystemInit>
 8000ed6:	f002 fb2d 	bl	8003534 <__libc_init_array>
 8000eda:	f7ff fc9b 	bl	8000814 <main>
 8000ede:	4770      	bx	lr
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	200000e0 	.word	0x200000e0
 8000ee8:	08004608 	.word	0x08004608
 8000eec:	200000e0 	.word	0x200000e0
 8000ef0:	20000318 	.word	0x20000318

08000ef4 <ADC1_2_IRQHandler>:
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x28>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x28>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f96b 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fd1a 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f991 	bl	800126a <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f94b 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000070 	.word	0x20000070
 8000f7c:	20000078 	.word	0x20000078
 8000f80:	20000074 	.word	0x20000074

08000f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000078 	.word	0x20000078
 8000fa4:	20000304 	.word	0x20000304

08000fa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <HAL_GetTick+0x10>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000304 	.word	0x20000304

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff fff0 	bl	8000fa8 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ffe0 	bl	8000fa8 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000078 	.word	0x20000078

08001004 <__NVIC_SetPriorityGrouping>:
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_EnableIRQ>:
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0b      	blt.n	8001092 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	4906      	ldr	r1, [pc, #24]	; (800109c <__NVIC_EnableIRQ+0x34>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_DisableIRQ>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db12      	blt.n	80010d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	490a      	ldr	r1, [pc, #40]	; (80010e4 <__NVIC_DisableIRQ+0x44>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	3320      	adds	r3, #32
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010cc:	f3bf 8f4f 	dsb	sy
}
 80010d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010d2:	f3bf 8f6f 	isb	sy
}
 80010d6:	bf00      	nop
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <SysTick_Config>:
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff90 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff09 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff1e 	bl	800104c <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff90 	bl	800113c <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5f 	bl	80010e8 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff11 	bl	8001068 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff1f 	bl	80010a0 <__NVIC_DisableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff94 	bl	80011a0 <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e043      	b.n	8001322 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_DMA_Init+0xa8>)
 80012a2:	4413      	add	r3, r2
 80012a4:	4a22      	ldr	r2, [pc, #136]	; (8001330 <HAL_DMA_Init+0xac>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	009a      	lsls	r2, r3, #2
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_DMA_Init+0xb0>)
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	bffdfff8 	.word	0xbffdfff8
 8001330:	cccccccd 	.word	0xcccccccd
 8001334:	40020000 	.word	0x40020000

08001338 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e046      	b.n	80013d8 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0201 	bic.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_DMA_DeInit+0xac>)
 8001382:	4413      	add	r3, r2
 8001384:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <HAL_DMA_DeInit+0xb0>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	009a      	lsls	r2, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a15      	ldr	r2, [pc, #84]	; (80013ec <HAL_DMA_DeInit+0xb4>)
 8001396:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f202 	lsl.w	r2, r1, r2
 80013a6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	bffdfff8 	.word	0xbffdfff8
 80013e8:	cccccccd 	.word	0xcccccccd
 80013ec:	40020000 	.word	0x40020000

080013f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_DMA_Start_IT+0x20>
 800140c:	2302      	movs	r3, #2
 800140e:	e04a      	b.n	80014a6 <HAL_DMA_Start_IT+0xb6>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800141e:	2b01      	cmp	r3, #1
 8001420:	d13a      	bne.n	8001498 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2202      	movs	r2, #2
 8001426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f9f3 	bl	8001832 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 020e 	orr.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	e00f      	b.n	8001486 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0204 	bic.w	r2, r2, #4
 8001474:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 020a 	orr.w	r2, r2, #10
 8001484:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0201 	orr.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e005      	b.n	80014a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014a0:	2302      	movs	r3, #2
 80014a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d008      	beq.n	80014d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2204      	movs	r2, #4
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e020      	b.n	8001518 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 020e 	bic.w	r2, r2, #14
 80014e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
	...

08001524 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001536:	2b02      	cmp	r3, #2
 8001538:	d005      	beq.n	8001546 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2204      	movs	r2, #4
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e051      	b.n	80015ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 020e 	bic.w	r2, r2, #14
 8001554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0201 	bic.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <HAL_DMA_Abort_IT+0xd0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d029      	beq.n	80015c4 <HAL_DMA_Abort_IT+0xa0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <HAL_DMA_Abort_IT+0xd4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d022      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x9c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <HAL_DMA_Abort_IT+0xd8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d01a      	beq.n	80015ba <HAL_DMA_Abort_IT+0x96>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_DMA_Abort_IT+0xdc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d012      	beq.n	80015b4 <HAL_DMA_Abort_IT+0x90>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <HAL_DMA_Abort_IT+0xe0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d00a      	beq.n	80015ae <HAL_DMA_Abort_IT+0x8a>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <HAL_DMA_Abort_IT+0xe4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d102      	bne.n	80015a8 <HAL_DMA_Abort_IT+0x84>
 80015a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015a6:	e00e      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ac:	e00b      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b2:	e008      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	e005      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	e002      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015c0:	2310      	movs	r3, #16
 80015c2:	e000      	b.n	80015c6 <HAL_DMA_Abort_IT+0xa2>
 80015c4:	2301      	movs	r3, #1
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_DMA_Abort_IT+0xe8>)
 80015c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	4798      	blx	r3
    } 
  }
  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40020008 	.word	0x40020008
 80015f8:	4002001c 	.word	0x4002001c
 80015fc:	40020030 	.word	0x40020030
 8001600:	40020044 	.word	0x40020044
 8001604:	40020058 	.word	0x40020058
 8001608:	4002006c 	.word	0x4002006c
 800160c:	40020000 	.word	0x40020000

08001610 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	2204      	movs	r2, #4
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d04f      	beq.n	80016d8 <HAL_DMA_IRQHandler+0xc8>
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	d04a      	beq.n	80016d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	2b00      	cmp	r3, #0
 800164e:	d107      	bne.n	8001660 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0204 	bic.w	r2, r2, #4
 800165e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a66      	ldr	r2, [pc, #408]	; (8001800 <HAL_DMA_IRQHandler+0x1f0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d029      	beq.n	80016be <HAL_DMA_IRQHandler+0xae>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a65      	ldr	r2, [pc, #404]	; (8001804 <HAL_DMA_IRQHandler+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <HAL_DMA_IRQHandler+0xaa>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a63      	ldr	r2, [pc, #396]	; (8001808 <HAL_DMA_IRQHandler+0x1f8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d01a      	beq.n	80016b4 <HAL_DMA_IRQHandler+0xa4>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a62      	ldr	r2, [pc, #392]	; (800180c <HAL_DMA_IRQHandler+0x1fc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d012      	beq.n	80016ae <HAL_DMA_IRQHandler+0x9e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a60      	ldr	r2, [pc, #384]	; (8001810 <HAL_DMA_IRQHandler+0x200>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00a      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x98>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a5f      	ldr	r2, [pc, #380]	; (8001814 <HAL_DMA_IRQHandler+0x204>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d102      	bne.n	80016a2 <HAL_DMA_IRQHandler+0x92>
 800169c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a0:	e00e      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016a6:	e00b      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016ac:	e008      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b2:	e005      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b8:	e002      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016ba:	2340      	movs	r3, #64	; 0x40
 80016bc:	e000      	b.n	80016c0 <HAL_DMA_IRQHandler+0xb0>
 80016be:	2304      	movs	r3, #4
 80016c0:	4a55      	ldr	r2, [pc, #340]	; (8001818 <HAL_DMA_IRQHandler+0x208>)
 80016c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8094 	beq.w	80017f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016d6:	e08e      	b.n	80017f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	2202      	movs	r2, #2
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d056      	beq.n	8001796 <HAL_DMA_IRQHandler+0x186>
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d051      	beq.n	8001796 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10b      	bne.n	8001718 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 020a 	bic.w	r2, r2, #10
 800170e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a38      	ldr	r2, [pc, #224]	; (8001800 <HAL_DMA_IRQHandler+0x1f0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d029      	beq.n	8001776 <HAL_DMA_IRQHandler+0x166>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a37      	ldr	r2, [pc, #220]	; (8001804 <HAL_DMA_IRQHandler+0x1f4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d022      	beq.n	8001772 <HAL_DMA_IRQHandler+0x162>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a35      	ldr	r2, [pc, #212]	; (8001808 <HAL_DMA_IRQHandler+0x1f8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01a      	beq.n	800176c <HAL_DMA_IRQHandler+0x15c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a34      	ldr	r2, [pc, #208]	; (800180c <HAL_DMA_IRQHandler+0x1fc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d012      	beq.n	8001766 <HAL_DMA_IRQHandler+0x156>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_DMA_IRQHandler+0x200>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00a      	beq.n	8001760 <HAL_DMA_IRQHandler+0x150>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_DMA_IRQHandler+0x204>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <HAL_DMA_IRQHandler+0x14a>
 8001754:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001758:	e00e      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 800175a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800175e:	e00b      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 8001760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001764:	e008      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	e005      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 800176c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001770:	e002      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 8001772:	2320      	movs	r3, #32
 8001774:	e000      	b.n	8001778 <HAL_DMA_IRQHandler+0x168>
 8001776:	2302      	movs	r3, #2
 8001778:	4a27      	ldr	r2, [pc, #156]	; (8001818 <HAL_DMA_IRQHandler+0x208>)
 800177a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d034      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001794:	e02f      	b.n	80017f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2208      	movs	r2, #8
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d028      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x1e8>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d023      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 020e 	bic.w	r2, r2, #14
 80017be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
    }
  }
  return;
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
}
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020008 	.word	0x40020008
 8001804:	4002001c 	.word	0x4002001c
 8001808:	40020030 	.word	0x40020030
 800180c:	40020044 	.word	0x40020044
 8001810:	40020058 	.word	0x40020058
 8001814:	4002006c 	.word	0x4002006c
 8001818:	40020000 	.word	0x40020000

0800181c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f202 	lsl.w	r2, r1, r2
 800184e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b10      	cmp	r3, #16
 800185e:	d108      	bne.n	8001872 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001870:	e007      	b.n	8001882 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	60da      	str	r2, [r3, #12]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b08b      	sub	sp, #44	; 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e169      	b.n	8001b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a0:	2201      	movs	r2, #1
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8158 	bne.w	8001b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a9a      	ldr	r2, [pc, #616]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d05e      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018c8:	4a98      	ldr	r2, [pc, #608]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d875      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018ce:	4a98      	ldr	r2, [pc, #608]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d058      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018d4:	4a96      	ldr	r2, [pc, #600]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d86f      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018da:	4a96      	ldr	r2, [pc, #600]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d052      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018e0:	4a94      	ldr	r2, [pc, #592]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d869      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018e6:	4a94      	ldr	r2, [pc, #592]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d04c      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018ec:	4a92      	ldr	r2, [pc, #584]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d863      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018f2:	4a92      	ldr	r2, [pc, #584]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d046      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018f8:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d85d      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d82a      	bhi.n	8001958 <HAL_GPIO_Init+0xcc>
 8001902:	2b12      	cmp	r3, #18
 8001904:	d859      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <HAL_GPIO_Init+0x80>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	08001987 	.word	0x08001987
 8001910:	08001961 	.word	0x08001961
 8001914:	08001973 	.word	0x08001973
 8001918:	080019b5 	.word	0x080019b5
 800191c:	080019bb 	.word	0x080019bb
 8001920:	080019bb 	.word	0x080019bb
 8001924:	080019bb 	.word	0x080019bb
 8001928:	080019bb 	.word	0x080019bb
 800192c:	080019bb 	.word	0x080019bb
 8001930:	080019bb 	.word	0x080019bb
 8001934:	080019bb 	.word	0x080019bb
 8001938:	080019bb 	.word	0x080019bb
 800193c:	080019bb 	.word	0x080019bb
 8001940:	080019bb 	.word	0x080019bb
 8001944:	080019bb 	.word	0x080019bb
 8001948:	080019bb 	.word	0x080019bb
 800194c:	080019bb 	.word	0x080019bb
 8001950:	08001969 	.word	0x08001969
 8001954:	0800197d 	.word	0x0800197d
 8001958:	4a79      	ldr	r2, [pc, #484]	; (8001b40 <HAL_GPIO_Init+0x2b4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195e:	e02c      	b.n	80019ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e029      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	3304      	adds	r3, #4
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e024      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	3308      	adds	r3, #8
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e01f      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	330c      	adds	r3, #12
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e01a      	b.n	80019bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198e:	2304      	movs	r3, #4
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e013      	b.n	80019bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	611a      	str	r2, [r3, #16]
          break;
 80019a6:	e009      	b.n	80019bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	615a      	str	r2, [r3, #20]
          break;
 80019b2:	e003      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x130>
          break;
 80019ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2bff      	cmp	r3, #255	; 0xff
 80019c0:	d801      	bhi.n	80019c6 <HAL_GPIO_Init+0x13a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	e001      	b.n	80019ca <HAL_GPIO_Init+0x13e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	; 0xff
 80019d0:	d802      	bhi.n	80019d8 <HAL_GPIO_Init+0x14c>
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x152>
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	3b08      	subs	r3, #8
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	210f      	movs	r1, #15
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	401a      	ands	r2, r3
 80019f0:	6a39      	ldr	r1, [r7, #32]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80b1 	beq.w	8001b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a24:	4a48      	ldr	r2, [pc, #288]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a40      	ldr	r2, [pc, #256]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d013      	beq.n	8001a78 <HAL_GPIO_Init+0x1ec>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_GPIO_Init+0x2c4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00d      	beq.n	8001a74 <HAL_GPIO_Init+0x1e8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3e      	ldr	r2, [pc, #248]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d007      	beq.n	8001a70 <HAL_GPIO_Init+0x1e4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3d      	ldr	r2, [pc, #244]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_GPIO_Init+0x1e0>
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e006      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	e004      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_GPIO_Init+0x1ee>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a8a:	492f      	ldr	r1, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	492c      	ldr	r1, [pc, #176]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4928      	ldr	r1, [pc, #160]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4922      	ldr	r1, [pc, #136]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	491e      	ldr	r1, [pc, #120]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	4918      	ldr	r1, [pc, #96]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4914      	ldr	r1, [pc, #80]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d021      	beq.n	8001b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	490e      	ldr	r1, [pc, #56]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
 8001b28:	e021      	b.n	8001b6e <HAL_GPIO_Init+0x2e2>
 8001b2a:	bf00      	nop
 8001b2c:	10320000 	.word	0x10320000
 8001b30:	10310000 	.word	0x10310000
 8001b34:	10220000 	.word	0x10220000
 8001b38:	10210000 	.word	0x10210000
 8001b3c:	10120000 	.word	0x10120000
 8001b40:	10110000 	.word	0x10110000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4909      	ldr	r1, [pc, #36]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3301      	adds	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f ae8e 	bne.w	80018a0 <HAL_GPIO_Init+0x14>
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	372c      	adds	r7, #44	; 0x2c
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40010400 	.word	0x40010400

08001b94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001ba2:	e09a      	b.n	8001cda <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 808d 	beq.w	8001cd4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001bba:	4a4e      	ldr	r2, [pc, #312]	; (8001cf4 <HAL_GPIO_DeInit+0x160>)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a46      	ldr	r2, [pc, #280]	; (8001cf8 <HAL_GPIO_DeInit+0x164>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_GPIO_DeInit+0x78>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a45      	ldr	r2, [pc, #276]	; (8001cfc <HAL_GPIO_DeInit+0x168>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00d      	beq.n	8001c08 <HAL_GPIO_DeInit+0x74>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a44      	ldr	r2, [pc, #272]	; (8001d00 <HAL_GPIO_DeInit+0x16c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_DeInit+0x70>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a43      	ldr	r2, [pc, #268]	; (8001d04 <HAL_GPIO_DeInit+0x170>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_GPIO_DeInit+0x6c>
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e006      	b.n	8001c0e <HAL_GPIO_DeInit+0x7a>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e004      	b.n	8001c0e <HAL_GPIO_DeInit+0x7a>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_DeInit+0x7a>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_GPIO_DeInit+0x7a>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	f002 0203 	and.w	r2, r2, #3
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	4093      	lsls	r3, r2
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d132      	bne.n	8001c84 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001c2e:	4a31      	ldr	r2, [pc, #196]	; (8001cf4 <HAL_GPIO_DeInit+0x160>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	482d      	ldr	r0, [pc, #180]	; (8001cf4 <HAL_GPIO_DeInit+0x160>)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	400a      	ands	r2, r1
 8001c46:	3302      	adds	r3, #2
 8001c48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_GPIO_DeInit+0x174>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	492c      	ldr	r1, [pc, #176]	; (8001d08 <HAL_GPIO_DeInit+0x174>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_GPIO_DeInit+0x174>)
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4929      	ldr	r1, [pc, #164]	; (8001d08 <HAL_GPIO_DeInit+0x174>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_GPIO_DeInit+0x174>)
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	4925      	ldr	r1, [pc, #148]	; (8001d08 <HAL_GPIO_DeInit+0x174>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <HAL_GPIO_DeInit+0x174>)
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4922      	ldr	r1, [pc, #136]	; (8001d08 <HAL_GPIO_DeInit+0x174>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2bff      	cmp	r3, #255	; 0xff
 8001c88:	d801      	bhi.n	8001c8e <HAL_GPIO_DeInit+0xfa>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	e001      	b.n	8001c92 <HAL_GPIO_DeInit+0xfe>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3304      	adds	r3, #4
 8001c92:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2bff      	cmp	r3, #255	; 0xff
 8001c98:	d802      	bhi.n	8001ca0 <HAL_GPIO_DeInit+0x10c>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	e002      	b.n	8001ca6 <HAL_GPIO_DeInit+0x112>
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	3b08      	subs	r3, #8
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	210f      	movs	r1, #15
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	2104      	movs	r1, #4
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	401a      	ands	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f47f af5e 	bne.w	8001ba4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	40010800 	.word	0x40010800
 8001cfc:	40010c00 	.word	0x40010c00
 8001d00:	40011000 	.word	0x40011000
 8001d04:	40011400 	.word	0x40011400
 8001d08:	40010400 	.word	0x40010400

08001d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e272      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8087 	beq.w	8001e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d2c:	4b92      	ldr	r3, [pc, #584]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d00c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d38:	4b8f      	ldr	r3, [pc, #572]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d112      	bne.n	8001d6a <HAL_RCC_OscConfig+0x5e>
 8001d44:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d10b      	bne.n	8001d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d52:	4b89      	ldr	r3, [pc, #548]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d06c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x12c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d168      	bne.n	8001e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e24c      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x76>
 8001d74:	4b80      	ldr	r3, [pc, #512]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a7f      	ldr	r2, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	e02e      	b.n	8001de0 <HAL_RCC_OscConfig+0xd4>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x98>
 8001d8a:	4b7b      	ldr	r3, [pc, #492]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7a      	ldr	r2, [pc, #488]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b78      	ldr	r3, [pc, #480]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a77      	ldr	r2, [pc, #476]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e01d      	b.n	8001de0 <HAL_RCC_OscConfig+0xd4>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xbc>
 8001dae:	4b72      	ldr	r3, [pc, #456]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a71      	ldr	r2, [pc, #452]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6e      	ldr	r2, [pc, #440]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0xd4>
 8001dc8:	4b6b      	ldr	r3, [pc, #428]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a6a      	ldr	r2, [pc, #424]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff f8de 	bl	8000fa8 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f8da 	bl	8000fa8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e200      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0xe4>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff f8ca 	bl	8000fa8 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff f8c6 	bl	8000fa8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1ec      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x10c>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d063      	beq.n	8001f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e46:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e52:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d11c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x18c>
 8001e5e:	4b46      	ldr	r3, [pc, #280]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d116      	bne.n	8001e98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_RCC_OscConfig+0x176>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e1c0      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4939      	ldr	r1, [pc, #228]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	e03a      	b.n	8001f0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff f87f 	bl	8000fa8 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eae:	f7ff f87b 	bl	8000fa8 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1a1      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4927      	ldr	r1, [pc, #156]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]
 8001ee0:	e015      	b.n	8001f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f85e 	bl	8000fa8 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef0:	f7ff f85a 	bl	8000fa8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e180      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d03a      	beq.n	8001f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d019      	beq.n	8001f56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f28:	f7ff f83e 	bl	8000fa8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f30:	f7ff f83a 	bl	8000fa8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e160      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f000 fad8 	bl	8002504 <RCC_Delay>
 8001f54:	e01c      	b.n	8001f90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f824 	bl	8000fa8 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f62:	e00f      	b.n	8001f84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f64:	f7ff f820 	bl	8000fa8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d908      	bls.n	8001f84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e146      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	42420000 	.word	0x42420000
 8001f80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e9      	bne.n	8001f64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a6 	beq.w	80020ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b8b      	ldr	r3, [pc, #556]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10d      	bne.n	8001fca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a87      	ldr	r2, [pc, #540]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b85      	ldr	r3, [pc, #532]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <HAL_RCC_OscConfig+0x4c8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d118      	bne.n	8002008 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd6:	4b7f      	ldr	r3, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x4c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7e      	ldr	r2, [pc, #504]	; (80021d4 <HAL_RCC_OscConfig+0x4c8>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe ffe1 	bl	8000fa8 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fea:	f7fe ffdd 	bl	8000fa8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b64      	cmp	r3, #100	; 0x64
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e103      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	4b75      	ldr	r3, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x4c8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x312>
 8002010:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	e02d      	b.n	800207a <HAL_RCC_OscConfig+0x36e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x334>
 8002026:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a69      	ldr	r2, [pc, #420]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4b67      	ldr	r3, [pc, #412]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a66      	ldr	r2, [pc, #408]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	e01c      	b.n	800207a <HAL_RCC_OscConfig+0x36e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d10c      	bne.n	8002062 <HAL_RCC_OscConfig+0x356>
 8002048:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a60      	ldr	r2, [pc, #384]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	4b5e      	ldr	r3, [pc, #376]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a5d      	ldr	r2, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	e00b      	b.n	800207a <HAL_RCC_OscConfig+0x36e>
 8002062:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a5a      	ldr	r2, [pc, #360]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b58      	ldr	r3, [pc, #352]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a57      	ldr	r2, [pc, #348]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d015      	beq.n	80020ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7fe ff91 	bl	8000fa8 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe ff8d 	bl	8000fa8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0b1      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	4b4b      	ldr	r3, [pc, #300]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ee      	beq.n	800208a <HAL_RCC_OscConfig+0x37e>
 80020ac:	e014      	b.n	80020d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7fe ff7b 	bl	8000fa8 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7fe ff77 	bl	8000fa8 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e09b      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020cc:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ee      	bne.n	80020b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d105      	bne.n	80020ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a3b      	ldr	r2, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8087 	beq.w	8002202 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d061      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d146      	bne.n	8002196 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe ff4b 	bl	8000fa8 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7fe ff47 	bl	8000fa8 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e06d      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002128:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d108      	bne.n	8002150 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	4921      	ldr	r1, [pc, #132]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a19      	ldr	r1, [r3, #32]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	430b      	orrs	r3, r1
 8002162:	491b      	ldr	r1, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7fe ff1b 	bl	8000fa8 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002176:	f7fe ff17 	bl	8000fa8 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e03d      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x46a>
 8002194:	e035      	b.n	8002202 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe ff04 	bl	8000fa8 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe ff00 	bl	8000fa8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e026      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x498>
 80021c2:	e01e      	b.n	8002202 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e019      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
 80021d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_OscConfig+0x500>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0d0      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d910      	bls.n	8002254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 0207 	bic.w	r2, r3, #7
 800223a:	4965      	ldr	r1, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002276:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800228e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	494d      	ldr	r1, [pc, #308]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d040      	beq.n	8002330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d115      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e073      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06b      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4936      	ldr	r1, [pc, #216]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7fe fe52 	bl	8000fa8 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fe4e 	bl	8000fa8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e053      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d210      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4922      	ldr	r1, [pc, #136]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e032      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4916      	ldr	r1, [pc, #88]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	490e      	ldr	r1, [pc, #56]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800239e:	f000 f821 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1cc>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1d0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fdb0 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40022000 	.word	0x40022000
 80023d4:	40021000 	.word	0x40021000
 80023d8:	08004550 	.word	0x08004550
 80023dc:	20000070 	.word	0x20000070
 80023e0:	20000074 	.word	0x20000074

080023e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	b490      	push	{r4, r7}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <HAL_RCC_GetSysClockFreq+0xac>)
 80023ec:	1d3c      	adds	r4, r7, #4
 80023ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023f4:	f240 2301 	movw	r3, #513	; 0x201
 80023f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d002      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x40>
 800241e:	2b08      	cmp	r3, #8
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x46>
 8002422:	e02b      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002426:	623b      	str	r3, [r7, #32]
      break;
 8002428:	e02b      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	0c9b      	lsrs	r3, r3, #18
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3328      	adds	r3, #40	; 0x28
 8002434:	443b      	add	r3, r7
 8002436:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800243a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0c5b      	lsrs	r3, r3, #17
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	3328      	adds	r3, #40	; 0x28
 8002452:	443b      	add	r3, r7
 8002454:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002458:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb4>)
 800245e:	fb03 f202 	mul.w	r2, r3, r2
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e004      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	623b      	str	r3, [r7, #32]
      break;
 800247a:	e002      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_GetSysClockFreq+0xb4>)
 800247e:	623b      	str	r3, [r7, #32]
      break;
 8002480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002482:	6a3b      	ldr	r3, [r7, #32]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bc90      	pop	{r4, r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	08004540 	.word	0x08004540
 8002494:	40021000 	.word	0x40021000
 8002498:	007a1200 	.word	0x007a1200
 800249c:	003d0900 	.word	0x003d0900

080024a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a4:	4b02      	ldr	r3, [pc, #8]	; (80024b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000070 	.word	0x20000070

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b8:	f7ff fff2 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4903      	ldr	r1, [pc, #12]	; (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	08004560 	.word	0x08004560

080024dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024e0:	f7ff ffde 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	0adb      	lsrs	r3, r3, #11
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	4903      	ldr	r1, [pc, #12]	; (8002500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	08004560 	.word	0x08004560

08002504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <RCC_Delay+0x34>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <RCC_Delay+0x38>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0a5b      	lsrs	r3, r3, #9
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002520:	bf00      	nop
  }
  while (Delay --);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	60fa      	str	r2, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f9      	bne.n	8002520 <RCC_Delay+0x1c>
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20000070 	.word	0x20000070
 800253c:	10624dd3 	.word	0x10624dd3

08002540 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e052      	b.n	80025f8 <HAL_HalfDuplex_Init+0xb8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d111      	bne.n	8002582 <HAL_HalfDuplex_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fc5e 	bl	8002e28 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <HAL_HalfDuplex_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a22      	ldr	r2, [pc, #136]	; (8002600 <HAL_HalfDuplex_Init+0xc0>)
 8002578:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2224      	movs	r2, #36	; 0x24
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002598:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 ff36 	bl	800340c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80025be:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0208 	orr.w	r2, r2, #8
 80025ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	08000c45 	.word	0x08000c45

08002604 <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	460b      	mov	r3, r1
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	f043 0220 	orr.w	r2, r3, #32
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e08c      	b.n	8002746 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_UART_RegisterCallback+0x36>
 8002636:	2302      	movs	r3, #2
 8002638:	e085      	b.n	8002746 <HAL_UART_RegisterCallback+0x142>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b20      	cmp	r3, #32
 800264c:	d151      	bne.n	80026f2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800264e:	7afb      	ldrb	r3, [r7, #11]
 8002650:	2b0c      	cmp	r3, #12
 8002652:	d845      	bhi.n	80026e0 <HAL_UART_RegisterCallback+0xdc>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_UART_RegisterCallback+0x58>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	08002691 	.word	0x08002691
 8002660:	08002699 	.word	0x08002699
 8002664:	080026a1 	.word	0x080026a1
 8002668:	080026a9 	.word	0x080026a9
 800266c:	080026b1 	.word	0x080026b1
 8002670:	080026b9 	.word	0x080026b9
 8002674:	080026c1 	.word	0x080026c1
 8002678:	080026c9 	.word	0x080026c9
 800267c:	080026e1 	.word	0x080026e1
 8002680:	080026e1 	.word	0x080026e1
 8002684:	080026e1 	.word	0x080026e1
 8002688:	080026d1 	.word	0x080026d1
 800268c:	080026d9 	.word	0x080026d9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8002696:	e051      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800269e:	e04d      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80026a6:	e049      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80026ae:	e045      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80026b6:	e041      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80026be:	e03d      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80026c6:	e039      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80026ce:	e035      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80026d6:	e031      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80026de:	e02d      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	75fb      	strb	r3, [r7, #23]
        break;
 80026f0:	e024      	b.n	800273c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	2b0b      	cmp	r3, #11
 8002702:	d002      	beq.n	800270a <HAL_UART_RegisterCallback+0x106>
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d004      	beq.n	8002712 <HAL_UART_RegisterCallback+0x10e>
 8002708:	e007      	b.n	800271a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8002710:	e014      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002718:	e010      	b.n	800273c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f043 0220 	orr.w	r2, r3, #32
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
        break;
 800272a:	e007      	b.n	800273c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002744:	7dfb      	ldrb	r3, [r7, #23]
}
 8002746:	4618      	mov	r0, r3
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b20      	cmp	r3, #32
 8002768:	d153      	bne.n	8002812 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_UART_Transmit_DMA+0x26>
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e04c      	b.n	8002814 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_UART_Transmit_DMA+0x38>
 8002784:	2302      	movs	r3, #2
 8002786:	e045      	b.n	8002814 <HAL_UART_Transmit_DMA+0xc4>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	88fa      	ldrh	r2, [r7, #6]
 800279a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	88fa      	ldrh	r2, [r7, #6]
 80027a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2221      	movs	r2, #33	; 0x21
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_UART_Transmit_DMA+0xcc>)
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <HAL_UART_Transmit_DMA+0xd0>)
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_UART_Transmit_DMA+0xd4>)
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027cc:	2200      	movs	r2, #0
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80027d0:	f107 0308 	add.w	r3, r7, #8
 80027d4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3304      	adds	r3, #4
 80027e4:	461a      	mov	r2, r3
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	f7fe fe02 	bl	80013f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800280c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002812:	2302      	movs	r3, #2
  }
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	08002e95 	.word	0x08002e95
 8002820:	08002ee9 	.word	0x08002ee9
 8002824:	08002fdb 	.word	0x08002fdb

08002828 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	4613      	mov	r3, r2
 8002834:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b20      	cmp	r3, #32
 8002840:	d11d      	bne.n	800287e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_UART_Receive_DMA+0x26>
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e016      	b.n	8002880 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_UART_Receive_DMA+0x38>
 800285c:	2302      	movs	r3, #2
 800285e:	e00f      	b.n	8002880 <HAL_UART_Receive_DMA+0x58>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	461a      	mov	r2, r3
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fbfb 	bl	8003070 <UART_Start_Receive_DMA>
 800287a:	4603      	mov	r3, r0
 800287c:	e000      	b.n	8002880 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b21      	cmp	r3, #33	; 0x21
 80028b4:	d116      	bne.n	80028e4 <HAL_UART_DMAStop+0x5c>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ca:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe fde8 	bl	80014ae <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fc2a 	bl	8003138 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b22      	cmp	r3, #34	; 0x22
 8002904:	d116      	bne.n	8002934 <HAL_UART_DMAStop+0xac>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800291a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fdc0 	bl	80014ae <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fc17 	bl	8003162 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_UART_IRQHandler+0x52>
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fc92 	bl	80032b4 <UART_Receive_IT>
      return;
 8002990:	e180      	b.n	8002c94 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80b4 	beq.w	8002b02 <HAL_UART_IRQHandler+0x1c2>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_UART_IRQHandler+0x70>
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80a9 	beq.w	8002b02 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_UART_IRQHandler+0x90>
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_UART_IRQHandler+0xb0>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f043 0202 	orr.w	r2, r3, #2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_UART_IRQHandler+0xd0>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0204 	orr.w	r2, r3, #4
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00f      	beq.n	8002a3a <HAL_UART_IRQHandler+0xfa>
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <HAL_UART_IRQHandler+0xee>
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0208 	orr.w	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8123 	beq.w	8002c8a <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_UART_IRQHandler+0x11e>
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fc2b 	bl	80032b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf14      	ite	ne
 8002a6c:	2301      	movne	r3, #1
 8002a6e:	2300      	moveq	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <HAL_UART_IRQHandler+0x146>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d033      	beq.n	8002aee <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fb6b 	bl	8003162 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d024      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695a      	ldr	r2, [r3, #20]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d013      	beq.n	8002ada <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	4a79      	ldr	r2, [pc, #484]	; (8002c9c <HAL_UART_IRQHandler+0x35c>)
 8002ab8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fd30 	bl	8001524 <HAL_DMA_Abort_IT>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d019      	beq.n	8002afe <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	e011      	b.n	8002afe <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae2:	e00c      	b.n	8002afe <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	e007      	b.n	8002afe <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002afc:	e0c5      	b.n	8002c8a <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afe:	bf00      	nop
    return;
 8002b00:	e0c3      	b.n	8002c8a <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	f040 80a3 	bne.w	8002c52 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 809d 	beq.w	8002c52 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8097 	beq.w	8002c52 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d04f      	beq.n	8002be8 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002b52:	8a3b      	ldrh	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 809a 	beq.w	8002c8e <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b5e:	8a3a      	ldrh	r2, [r7, #16]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f080 8094 	bcs.w	8002c8e <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8a3a      	ldrh	r2, [r7, #16]
 8002b6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d02b      	beq.n	8002bce <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b84:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0210 	bic.w	r2, r2, #16
 8002bc2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fc70 	bl	80014ae <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002bda:	b292      	uxth	r2, r2
 8002bdc:	1a8a      	subs	r2, r1, r2
 8002bde:	b292      	uxth	r2, r2
 8002be0:	4611      	mov	r1, r2
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8002be6:	e052      	b.n	8002c8e <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d048      	beq.n	8002c92 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8002c00:	8a7b      	ldrh	r3, [r7, #18]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d045      	beq.n	8002c92 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c14:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0210 	bic.w	r2, r2, #16
 8002c42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c48:	8a7a      	ldrh	r2, [r7, #18]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8002c50:	e01f      	b.n	8002c92 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_UART_IRQHandler+0x32e>
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fabc 	bl	80031e4 <UART_Transmit_IT>
    return;
 8002c6c:	e012      	b.n	8002c94 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00d      	beq.n	8002c94 <HAL_UART_IRQHandler+0x354>
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fafd 	bl	8003282 <UART_EndTransmit_IT>
    return;
 8002c88:	e004      	b.n	8002c94 <HAL_UART_IRQHandler+0x354>
    return;
 8002c8a:	bf00      	nop
 8002c8c:	e002      	b.n	8002c94 <HAL_UART_IRQHandler+0x354>
      return;
 8002c8e:	bf00      	nop
 8002c90:	e000      	b.n	8002c94 <HAL_UART_IRQHandler+0x354>
      return;
 8002c92:	bf00      	nop
  }
}
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	080031bb 	.word	0x080031bb

08002ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e020      	b.n	8002da2 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 030c 	bic.w	r3, r3, #12
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e020      	b.n	8002e08 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2224      	movs	r2, #36	; 0x24
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f023 030c 	bic.w	r3, r3, #12
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0f      	ldr	r2, [pc, #60]	; (8002e70 <UART_InitCallbacksToDefault+0x48>)
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <UART_InitCallbacksToDefault+0x4c>)
 8002e3a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <UART_InitCallbacksToDefault+0x50>)
 8002e40:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <UART_InitCallbacksToDefault+0x54>)
 8002e46:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <UART_InitCallbacksToDefault+0x58>)
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a0c      	ldr	r2, [pc, #48]	; (8002e84 <UART_InitCallbacksToDefault+0x5c>)
 8002e52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <UART_InitCallbacksToDefault+0x60>)
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a0b      	ldr	r2, [pc, #44]	; (8002e8c <UART_InitCallbacksToDefault+0x64>)
 8002e5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <UART_InitCallbacksToDefault+0x68>)
 8002e64:	669a      	str	r2, [r3, #104]	; 0x68

}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	08002cb3 	.word	0x08002cb3
 8002e74:	08002ca1 	.word	0x08002ca1
 8002e78:	08002cd7 	.word	0x08002cd7
 8002e7c:	08002cc5 	.word	0x08002cc5
 8002e80:	08002ce9 	.word	0x08002ce9
 8002e84:	08002cfb 	.word	0x08002cfb
 8002e88:	08002d0d 	.word	0x08002d0d
 8002e8c:	08002d1f 	.word	0x08002d1f
 8002e90:	08002d31 	.word	0x08002d31

08002e94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d113      	bne.n	8002ed8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ed6:	e003      	b.n	8002ee0 <UART_DMATransmitCplt+0x4c>
    huart->TxCpltCallback(huart);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	4798      	blx	r3
}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d12a      	bne.n	8002f78 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f36:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f56:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d107      	bne.n	8002f78 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0210 	bic.w	r2, r2, #16
 8002f76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <UART_DMAReceiveCplt+0x8a>
  {  
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002f88:	4611      	mov	r1, r2
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f8e:	e003      	b.n	8002f98 <UART_DMAReceiveCplt+0x92>
    huart->RxCpltCallback(huart);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	4798      	blx	r3
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d109      	bne.n	8002fca <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002fbe:	0852      	lsrs	r2, r2, #1
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fc8:	e003      	b.n	8002fd2 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	4798      	blx	r3
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b21      	cmp	r3, #33	; 0x21
 800300c:	d108      	bne.n	8003020 <UART_DMAError+0x46>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2200      	movs	r2, #0
 8003018:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800301a:	68b8      	ldr	r0, [r7, #8]
 800301c:	f000 f88c 	bl	8003138 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf14      	ite	ne
 800302e:	2301      	movne	r3, #1
 8003030:	2300      	moveq	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b22      	cmp	r3, #34	; 0x22
 8003040:	d108      	bne.n	8003054 <UART_DMAError+0x7a>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2200      	movs	r2, #0
 800304c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800304e:	68b8      	ldr	r0, [r7, #8]
 8003050:	f000 f887 	bl	8003162 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f043 0210 	orr.w	r2, r3, #16
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	68b8      	ldr	r0, [r7, #8]
 8003066:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2222      	movs	r2, #34	; 0x22
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	4a23      	ldr	r2, [pc, #140]	; (800312c <UART_Start_Receive_DMA+0xbc>)
 800309e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	4a22      	ldr	r2, [pc, #136]	; (8003130 <UART_Start_Receive_DMA+0xc0>)
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	4a21      	ldr	r2, [pc, #132]	; (8003134 <UART_Start_Receive_DMA+0xc4>)
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	2200      	movs	r2, #0
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80030b8:	f107 0308 	add.w	r3, r7, #8
 80030bc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	f7fe f98e 	bl	80013f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003100:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003120:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	08002f07 	.word	0x08002f07
 8003130:	08002fa1 	.word	0x08002fa1
 8003134:	08002fdb 	.word	0x08002fdb

08003138 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800314e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003178:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0210 	bic.w	r2, r2, #16
 80031a0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b21      	cmp	r3, #33	; 0x21
 80031f6:	d13e      	bne.n	8003276 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003200:	d114      	bne.n	800322c <UART_Transmit_IT+0x48>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d110      	bne.n	800322c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800321e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	1c9a      	adds	r2, r3, #2
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	621a      	str	r2, [r3, #32]
 800322a:	e008      	b.n	800323e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	1c59      	adds	r1, r3, #1
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6211      	str	r1, [r2, #32]
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29b      	uxth	r3, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4619      	mov	r1, r3
 800324c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10f      	bne.n	8003272 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003260:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003270:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003298:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b22      	cmp	r3, #34	; 0x22
 80032c6:	f040 809b 	bne.w	8003400 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d117      	bne.n	8003304 <UART_Receive_IT+0x50>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d113      	bne.n	8003304 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	629a      	str	r2, [r3, #40]	; 0x28
 8003302:	e026      	b.n	8003352 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003316:	d007      	beq.n	8003328 <UART_Receive_IT+0x74>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <UART_Receive_IT+0x82>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d106      	bne.n	8003336 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e008      	b.n	8003348 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003342:	b2da      	uxtb	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29b      	uxth	r3, r3
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4619      	mov	r1, r3
 8003360:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003362:	2b00      	cmp	r3, #0
 8003364:	d14a      	bne.n	80033fc <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0220 	bic.w	r2, r2, #32
 8003374:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003384:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d124      	bne.n	80033f0 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0210 	bic.w	r2, r2, #16
 80033ba:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d10a      	bne.n	80033e0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80033e8:	4611      	mov	r1, r2
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
 80033ee:	e003      	b.n	80033f8 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e002      	b.n	8003402 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003446:	f023 030c 	bic.w	r3, r3, #12
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	430b      	orrs	r3, r1
 8003452:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <UART_SetConfig+0x114>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d103      	bne.n	800347c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003474:	f7ff f832 	bl	80024dc <HAL_RCC_GetPCLK2Freq>
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	e002      	b.n	8003482 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800347c:	f7ff f81a 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8003480:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009a      	lsls	r2, r3, #2
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	4a22      	ldr	r2, [pc, #136]	; (8003524 <UART_SetConfig+0x118>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	0119      	lsls	r1, r3, #4
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009a      	lsls	r2, r3, #2
 80034ac:	441a      	add	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b8:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <UART_SetConfig+0x118>)
 80034ba:	fba3 0302 	umull	r0, r3, r3, r2
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	2064      	movs	r0, #100	; 0x64
 80034c2:	fb00 f303 	mul.w	r3, r0, r3
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	3332      	adds	r3, #50	; 0x32
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <UART_SetConfig+0x118>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d8:	4419      	add	r1, r3
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009a      	lsls	r2, r3, #2
 80034e4:	441a      	add	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <UART_SetConfig+0x118>)
 80034f2:	fba3 0302 	umull	r0, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2064      	movs	r0, #100	; 0x64
 80034fa:	fb00 f303 	mul.w	r3, r0, r3
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	3332      	adds	r3, #50	; 0x32
 8003504:	4a07      	ldr	r2, [pc, #28]	; (8003524 <UART_SetConfig+0x118>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	f003 020f 	and.w	r2, r3, #15
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	440a      	add	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40013800 	.word	0x40013800
 8003524:	51eb851f 	.word	0x51eb851f

08003528 <__errno>:
 8003528:	4b01      	ldr	r3, [pc, #4]	; (8003530 <__errno+0x8>)
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000007c 	.word	0x2000007c

08003534 <__libc_init_array>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	2600      	movs	r6, #0
 8003538:	4d0c      	ldr	r5, [pc, #48]	; (800356c <__libc_init_array+0x38>)
 800353a:	4c0d      	ldr	r4, [pc, #52]	; (8003570 <__libc_init_array+0x3c>)
 800353c:	1b64      	subs	r4, r4, r5
 800353e:	10a4      	asrs	r4, r4, #2
 8003540:	42a6      	cmp	r6, r4
 8003542:	d109      	bne.n	8003558 <__libc_init_array+0x24>
 8003544:	f000 ffb6 	bl	80044b4 <_init>
 8003548:	2600      	movs	r6, #0
 800354a:	4d0a      	ldr	r5, [pc, #40]	; (8003574 <__libc_init_array+0x40>)
 800354c:	4c0a      	ldr	r4, [pc, #40]	; (8003578 <__libc_init_array+0x44>)
 800354e:	1b64      	subs	r4, r4, r5
 8003550:	10a4      	asrs	r4, r4, #2
 8003552:	42a6      	cmp	r6, r4
 8003554:	d105      	bne.n	8003562 <__libc_init_array+0x2e>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	f855 3b04 	ldr.w	r3, [r5], #4
 800355c:	4798      	blx	r3
 800355e:	3601      	adds	r6, #1
 8003560:	e7ee      	b.n	8003540 <__libc_init_array+0xc>
 8003562:	f855 3b04 	ldr.w	r3, [r5], #4
 8003566:	4798      	blx	r3
 8003568:	3601      	adds	r6, #1
 800356a:	e7f2      	b.n	8003552 <__libc_init_array+0x1e>
 800356c:	08004600 	.word	0x08004600
 8003570:	08004600 	.word	0x08004600
 8003574:	08004600 	.word	0x08004600
 8003578:	08004604 	.word	0x08004604

0800357c <memset>:
 800357c:	4603      	mov	r3, r0
 800357e:	4402      	add	r2, r0
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <memset+0xa>
 8003584:	4770      	bx	lr
 8003586:	f803 1b01 	strb.w	r1, [r3], #1
 800358a:	e7f9      	b.n	8003580 <memset+0x4>

0800358c <iprintf>:
 800358c:	b40f      	push	{r0, r1, r2, r3}
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <iprintf+0x2c>)
 8003590:	b513      	push	{r0, r1, r4, lr}
 8003592:	681c      	ldr	r4, [r3, #0]
 8003594:	b124      	cbz	r4, 80035a0 <iprintf+0x14>
 8003596:	69a3      	ldr	r3, [r4, #24]
 8003598:	b913      	cbnz	r3, 80035a0 <iprintf+0x14>
 800359a:	4620      	mov	r0, r4
 800359c:	f000 f866 	bl	800366c <__sinit>
 80035a0:	ab05      	add	r3, sp, #20
 80035a2:	4620      	mov	r0, r4
 80035a4:	9a04      	ldr	r2, [sp, #16]
 80035a6:	68a1      	ldr	r1, [r4, #8]
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	f000 f9bb 	bl	8003924 <_vfiprintf_r>
 80035ae:	b002      	add	sp, #8
 80035b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b4:	b004      	add	sp, #16
 80035b6:	4770      	bx	lr
 80035b8:	2000007c 	.word	0x2000007c

080035bc <std>:
 80035bc:	2300      	movs	r3, #0
 80035be:	b510      	push	{r4, lr}
 80035c0:	4604      	mov	r4, r0
 80035c2:	e9c0 3300 	strd	r3, r3, [r0]
 80035c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035ca:	6083      	str	r3, [r0, #8]
 80035cc:	8181      	strh	r1, [r0, #12]
 80035ce:	6643      	str	r3, [r0, #100]	; 0x64
 80035d0:	81c2      	strh	r2, [r0, #14]
 80035d2:	6183      	str	r3, [r0, #24]
 80035d4:	4619      	mov	r1, r3
 80035d6:	2208      	movs	r2, #8
 80035d8:	305c      	adds	r0, #92	; 0x5c
 80035da:	f7ff ffcf 	bl	800357c <memset>
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <std+0x38>)
 80035e0:	6224      	str	r4, [r4, #32]
 80035e2:	6263      	str	r3, [r4, #36]	; 0x24
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <std+0x3c>)
 80035e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <std+0x40>)
 80035ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <std+0x44>)
 80035ee:	6323      	str	r3, [r4, #48]	; 0x30
 80035f0:	bd10      	pop	{r4, pc}
 80035f2:	bf00      	nop
 80035f4:	08003ed1 	.word	0x08003ed1
 80035f8:	08003ef3 	.word	0x08003ef3
 80035fc:	08003f2b 	.word	0x08003f2b
 8003600:	08003f4f 	.word	0x08003f4f

08003604 <_cleanup_r>:
 8003604:	4901      	ldr	r1, [pc, #4]	; (800360c <_cleanup_r+0x8>)
 8003606:	f000 b8af 	b.w	8003768 <_fwalk_reent>
 800360a:	bf00      	nop
 800360c:	08004221 	.word	0x08004221

08003610 <__sfmoreglue>:
 8003610:	2268      	movs	r2, #104	; 0x68
 8003612:	b570      	push	{r4, r5, r6, lr}
 8003614:	1e4d      	subs	r5, r1, #1
 8003616:	4355      	muls	r5, r2
 8003618:	460e      	mov	r6, r1
 800361a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800361e:	f000 f8e5 	bl	80037ec <_malloc_r>
 8003622:	4604      	mov	r4, r0
 8003624:	b140      	cbz	r0, 8003638 <__sfmoreglue+0x28>
 8003626:	2100      	movs	r1, #0
 8003628:	e9c0 1600 	strd	r1, r6, [r0]
 800362c:	300c      	adds	r0, #12
 800362e:	60a0      	str	r0, [r4, #8]
 8003630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003634:	f7ff ffa2 	bl	800357c <memset>
 8003638:	4620      	mov	r0, r4
 800363a:	bd70      	pop	{r4, r5, r6, pc}

0800363c <__sfp_lock_acquire>:
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <__sfp_lock_acquire+0x8>)
 800363e:	f000 b8b3 	b.w	80037a8 <__retarget_lock_acquire_recursive>
 8003642:	bf00      	nop
 8003644:	20000309 	.word	0x20000309

08003648 <__sfp_lock_release>:
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <__sfp_lock_release+0x8>)
 800364a:	f000 b8ae 	b.w	80037aa <__retarget_lock_release_recursive>
 800364e:	bf00      	nop
 8003650:	20000309 	.word	0x20000309

08003654 <__sinit_lock_acquire>:
 8003654:	4801      	ldr	r0, [pc, #4]	; (800365c <__sinit_lock_acquire+0x8>)
 8003656:	f000 b8a7 	b.w	80037a8 <__retarget_lock_acquire_recursive>
 800365a:	bf00      	nop
 800365c:	2000030a 	.word	0x2000030a

08003660 <__sinit_lock_release>:
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <__sinit_lock_release+0x8>)
 8003662:	f000 b8a2 	b.w	80037aa <__retarget_lock_release_recursive>
 8003666:	bf00      	nop
 8003668:	2000030a 	.word	0x2000030a

0800366c <__sinit>:
 800366c:	b510      	push	{r4, lr}
 800366e:	4604      	mov	r4, r0
 8003670:	f7ff fff0 	bl	8003654 <__sinit_lock_acquire>
 8003674:	69a3      	ldr	r3, [r4, #24]
 8003676:	b11b      	cbz	r3, 8003680 <__sinit+0x14>
 8003678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800367c:	f7ff bff0 	b.w	8003660 <__sinit_lock_release>
 8003680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003684:	6523      	str	r3, [r4, #80]	; 0x50
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <__sinit+0x68>)
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <__sinit+0x6c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	62a2      	str	r2, [r4, #40]	; 0x28
 800368e:	42a3      	cmp	r3, r4
 8003690:	bf08      	it	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	4620      	mov	r0, r4
 8003696:	bf08      	it	eq
 8003698:	61a3      	streq	r3, [r4, #24]
 800369a:	f000 f81f 	bl	80036dc <__sfp>
 800369e:	6060      	str	r0, [r4, #4]
 80036a0:	4620      	mov	r0, r4
 80036a2:	f000 f81b 	bl	80036dc <__sfp>
 80036a6:	60a0      	str	r0, [r4, #8]
 80036a8:	4620      	mov	r0, r4
 80036aa:	f000 f817 	bl	80036dc <__sfp>
 80036ae:	2200      	movs	r2, #0
 80036b0:	2104      	movs	r1, #4
 80036b2:	60e0      	str	r0, [r4, #12]
 80036b4:	6860      	ldr	r0, [r4, #4]
 80036b6:	f7ff ff81 	bl	80035bc <std>
 80036ba:	2201      	movs	r2, #1
 80036bc:	2109      	movs	r1, #9
 80036be:	68a0      	ldr	r0, [r4, #8]
 80036c0:	f7ff ff7c 	bl	80035bc <std>
 80036c4:	2202      	movs	r2, #2
 80036c6:	2112      	movs	r1, #18
 80036c8:	68e0      	ldr	r0, [r4, #12]
 80036ca:	f7ff ff77 	bl	80035bc <std>
 80036ce:	2301      	movs	r3, #1
 80036d0:	61a3      	str	r3, [r4, #24]
 80036d2:	e7d1      	b.n	8003678 <__sinit+0xc>
 80036d4:	08004568 	.word	0x08004568
 80036d8:	08003605 	.word	0x08003605

080036dc <__sfp>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	4607      	mov	r7, r0
 80036e0:	f7ff ffac 	bl	800363c <__sfp_lock_acquire>
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <__sfp+0x84>)
 80036e6:	681e      	ldr	r6, [r3, #0]
 80036e8:	69b3      	ldr	r3, [r6, #24]
 80036ea:	b913      	cbnz	r3, 80036f2 <__sfp+0x16>
 80036ec:	4630      	mov	r0, r6
 80036ee:	f7ff ffbd 	bl	800366c <__sinit>
 80036f2:	3648      	adds	r6, #72	; 0x48
 80036f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	d503      	bpl.n	8003704 <__sfp+0x28>
 80036fc:	6833      	ldr	r3, [r6, #0]
 80036fe:	b30b      	cbz	r3, 8003744 <__sfp+0x68>
 8003700:	6836      	ldr	r6, [r6, #0]
 8003702:	e7f7      	b.n	80036f4 <__sfp+0x18>
 8003704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003708:	b9d5      	cbnz	r5, 8003740 <__sfp+0x64>
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <__sfp+0x88>)
 800370c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003710:	60e3      	str	r3, [r4, #12]
 8003712:	6665      	str	r5, [r4, #100]	; 0x64
 8003714:	f000 f847 	bl	80037a6 <__retarget_lock_init_recursive>
 8003718:	f7ff ff96 	bl	8003648 <__sfp_lock_release>
 800371c:	2208      	movs	r2, #8
 800371e:	4629      	mov	r1, r5
 8003720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003728:	6025      	str	r5, [r4, #0]
 800372a:	61a5      	str	r5, [r4, #24]
 800372c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003730:	f7ff ff24 	bl	800357c <memset>
 8003734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800373c:	4620      	mov	r0, r4
 800373e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003740:	3468      	adds	r4, #104	; 0x68
 8003742:	e7d9      	b.n	80036f8 <__sfp+0x1c>
 8003744:	2104      	movs	r1, #4
 8003746:	4638      	mov	r0, r7
 8003748:	f7ff ff62 	bl	8003610 <__sfmoreglue>
 800374c:	4604      	mov	r4, r0
 800374e:	6030      	str	r0, [r6, #0]
 8003750:	2800      	cmp	r0, #0
 8003752:	d1d5      	bne.n	8003700 <__sfp+0x24>
 8003754:	f7ff ff78 	bl	8003648 <__sfp_lock_release>
 8003758:	230c      	movs	r3, #12
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	e7ee      	b.n	800373c <__sfp+0x60>
 800375e:	bf00      	nop
 8003760:	08004568 	.word	0x08004568
 8003764:	ffff0001 	.word	0xffff0001

08003768 <_fwalk_reent>:
 8003768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800376c:	4606      	mov	r6, r0
 800376e:	4688      	mov	r8, r1
 8003770:	2700      	movs	r7, #0
 8003772:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800377a:	f1b9 0901 	subs.w	r9, r9, #1
 800377e:	d505      	bpl.n	800378c <_fwalk_reent+0x24>
 8003780:	6824      	ldr	r4, [r4, #0]
 8003782:	2c00      	cmp	r4, #0
 8003784:	d1f7      	bne.n	8003776 <_fwalk_reent+0xe>
 8003786:	4638      	mov	r0, r7
 8003788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800378c:	89ab      	ldrh	r3, [r5, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d907      	bls.n	80037a2 <_fwalk_reent+0x3a>
 8003792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003796:	3301      	adds	r3, #1
 8003798:	d003      	beq.n	80037a2 <_fwalk_reent+0x3a>
 800379a:	4629      	mov	r1, r5
 800379c:	4630      	mov	r0, r6
 800379e:	47c0      	blx	r8
 80037a0:	4307      	orrs	r7, r0
 80037a2:	3568      	adds	r5, #104	; 0x68
 80037a4:	e7e9      	b.n	800377a <_fwalk_reent+0x12>

080037a6 <__retarget_lock_init_recursive>:
 80037a6:	4770      	bx	lr

080037a8 <__retarget_lock_acquire_recursive>:
 80037a8:	4770      	bx	lr

080037aa <__retarget_lock_release_recursive>:
 80037aa:	4770      	bx	lr

080037ac <sbrk_aligned>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4e0e      	ldr	r6, [pc, #56]	; (80037e8 <sbrk_aligned+0x3c>)
 80037b0:	460c      	mov	r4, r1
 80037b2:	6831      	ldr	r1, [r6, #0]
 80037b4:	4605      	mov	r5, r0
 80037b6:	b911      	cbnz	r1, 80037be <sbrk_aligned+0x12>
 80037b8:	f000 fb7a 	bl	8003eb0 <_sbrk_r>
 80037bc:	6030      	str	r0, [r6, #0]
 80037be:	4621      	mov	r1, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 fb75 	bl	8003eb0 <_sbrk_r>
 80037c6:	1c43      	adds	r3, r0, #1
 80037c8:	d00a      	beq.n	80037e0 <sbrk_aligned+0x34>
 80037ca:	1cc4      	adds	r4, r0, #3
 80037cc:	f024 0403 	bic.w	r4, r4, #3
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	d007      	beq.n	80037e4 <sbrk_aligned+0x38>
 80037d4:	1a21      	subs	r1, r4, r0
 80037d6:	4628      	mov	r0, r5
 80037d8:	f000 fb6a 	bl	8003eb0 <_sbrk_r>
 80037dc:	3001      	adds	r0, #1
 80037de:	d101      	bne.n	80037e4 <sbrk_aligned+0x38>
 80037e0:	f04f 34ff 	mov.w	r4, #4294967295
 80037e4:	4620      	mov	r0, r4
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	20000310 	.word	0x20000310

080037ec <_malloc_r>:
 80037ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f0:	1ccd      	adds	r5, r1, #3
 80037f2:	f025 0503 	bic.w	r5, r5, #3
 80037f6:	3508      	adds	r5, #8
 80037f8:	2d0c      	cmp	r5, #12
 80037fa:	bf38      	it	cc
 80037fc:	250c      	movcc	r5, #12
 80037fe:	2d00      	cmp	r5, #0
 8003800:	4607      	mov	r7, r0
 8003802:	db01      	blt.n	8003808 <_malloc_r+0x1c>
 8003804:	42a9      	cmp	r1, r5
 8003806:	d905      	bls.n	8003814 <_malloc_r+0x28>
 8003808:	230c      	movs	r3, #12
 800380a:	2600      	movs	r6, #0
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4630      	mov	r0, r6
 8003810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003814:	4e2e      	ldr	r6, [pc, #184]	; (80038d0 <_malloc_r+0xe4>)
 8003816:	f000 fdc5 	bl	80043a4 <__malloc_lock>
 800381a:	6833      	ldr	r3, [r6, #0]
 800381c:	461c      	mov	r4, r3
 800381e:	bb34      	cbnz	r4, 800386e <_malloc_r+0x82>
 8003820:	4629      	mov	r1, r5
 8003822:	4638      	mov	r0, r7
 8003824:	f7ff ffc2 	bl	80037ac <sbrk_aligned>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	4604      	mov	r4, r0
 800382c:	d14d      	bne.n	80038ca <_malloc_r+0xde>
 800382e:	6834      	ldr	r4, [r6, #0]
 8003830:	4626      	mov	r6, r4
 8003832:	2e00      	cmp	r6, #0
 8003834:	d140      	bne.n	80038b8 <_malloc_r+0xcc>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	4631      	mov	r1, r6
 800383a:	4638      	mov	r0, r7
 800383c:	eb04 0803 	add.w	r8, r4, r3
 8003840:	f000 fb36 	bl	8003eb0 <_sbrk_r>
 8003844:	4580      	cmp	r8, r0
 8003846:	d13a      	bne.n	80038be <_malloc_r+0xd2>
 8003848:	6821      	ldr	r1, [r4, #0]
 800384a:	3503      	adds	r5, #3
 800384c:	1a6d      	subs	r5, r5, r1
 800384e:	f025 0503 	bic.w	r5, r5, #3
 8003852:	3508      	adds	r5, #8
 8003854:	2d0c      	cmp	r5, #12
 8003856:	bf38      	it	cc
 8003858:	250c      	movcc	r5, #12
 800385a:	4638      	mov	r0, r7
 800385c:	4629      	mov	r1, r5
 800385e:	f7ff ffa5 	bl	80037ac <sbrk_aligned>
 8003862:	3001      	adds	r0, #1
 8003864:	d02b      	beq.n	80038be <_malloc_r+0xd2>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	442b      	add	r3, r5
 800386a:	6023      	str	r3, [r4, #0]
 800386c:	e00e      	b.n	800388c <_malloc_r+0xa0>
 800386e:	6822      	ldr	r2, [r4, #0]
 8003870:	1b52      	subs	r2, r2, r5
 8003872:	d41e      	bmi.n	80038b2 <_malloc_r+0xc6>
 8003874:	2a0b      	cmp	r2, #11
 8003876:	d916      	bls.n	80038a6 <_malloc_r+0xba>
 8003878:	1961      	adds	r1, r4, r5
 800387a:	42a3      	cmp	r3, r4
 800387c:	6025      	str	r5, [r4, #0]
 800387e:	bf18      	it	ne
 8003880:	6059      	strne	r1, [r3, #4]
 8003882:	6863      	ldr	r3, [r4, #4]
 8003884:	bf08      	it	eq
 8003886:	6031      	streq	r1, [r6, #0]
 8003888:	5162      	str	r2, [r4, r5]
 800388a:	604b      	str	r3, [r1, #4]
 800388c:	4638      	mov	r0, r7
 800388e:	f104 060b 	add.w	r6, r4, #11
 8003892:	f000 fd8d 	bl	80043b0 <__malloc_unlock>
 8003896:	f026 0607 	bic.w	r6, r6, #7
 800389a:	1d23      	adds	r3, r4, #4
 800389c:	1af2      	subs	r2, r6, r3
 800389e:	d0b6      	beq.n	800380e <_malloc_r+0x22>
 80038a0:	1b9b      	subs	r3, r3, r6
 80038a2:	50a3      	str	r3, [r4, r2]
 80038a4:	e7b3      	b.n	800380e <_malloc_r+0x22>
 80038a6:	6862      	ldr	r2, [r4, #4]
 80038a8:	42a3      	cmp	r3, r4
 80038aa:	bf0c      	ite	eq
 80038ac:	6032      	streq	r2, [r6, #0]
 80038ae:	605a      	strne	r2, [r3, #4]
 80038b0:	e7ec      	b.n	800388c <_malloc_r+0xa0>
 80038b2:	4623      	mov	r3, r4
 80038b4:	6864      	ldr	r4, [r4, #4]
 80038b6:	e7b2      	b.n	800381e <_malloc_r+0x32>
 80038b8:	4634      	mov	r4, r6
 80038ba:	6876      	ldr	r6, [r6, #4]
 80038bc:	e7b9      	b.n	8003832 <_malloc_r+0x46>
 80038be:	230c      	movs	r3, #12
 80038c0:	4638      	mov	r0, r7
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	f000 fd74 	bl	80043b0 <__malloc_unlock>
 80038c8:	e7a1      	b.n	800380e <_malloc_r+0x22>
 80038ca:	6025      	str	r5, [r4, #0]
 80038cc:	e7de      	b.n	800388c <_malloc_r+0xa0>
 80038ce:	bf00      	nop
 80038d0:	2000030c 	.word	0x2000030c

080038d4 <__sfputc_r>:
 80038d4:	6893      	ldr	r3, [r2, #8]
 80038d6:	b410      	push	{r4}
 80038d8:	3b01      	subs	r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	6093      	str	r3, [r2, #8]
 80038de:	da07      	bge.n	80038f0 <__sfputc_r+0x1c>
 80038e0:	6994      	ldr	r4, [r2, #24]
 80038e2:	42a3      	cmp	r3, r4
 80038e4:	db01      	blt.n	80038ea <__sfputc_r+0x16>
 80038e6:	290a      	cmp	r1, #10
 80038e8:	d102      	bne.n	80038f0 <__sfputc_r+0x1c>
 80038ea:	bc10      	pop	{r4}
 80038ec:	f000 bb34 	b.w	8003f58 <__swbuf_r>
 80038f0:	6813      	ldr	r3, [r2, #0]
 80038f2:	1c58      	adds	r0, r3, #1
 80038f4:	6010      	str	r0, [r2, #0]
 80038f6:	7019      	strb	r1, [r3, #0]
 80038f8:	4608      	mov	r0, r1
 80038fa:	bc10      	pop	{r4}
 80038fc:	4770      	bx	lr

080038fe <__sfputs_r>:
 80038fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003900:	4606      	mov	r6, r0
 8003902:	460f      	mov	r7, r1
 8003904:	4614      	mov	r4, r2
 8003906:	18d5      	adds	r5, r2, r3
 8003908:	42ac      	cmp	r4, r5
 800390a:	d101      	bne.n	8003910 <__sfputs_r+0x12>
 800390c:	2000      	movs	r0, #0
 800390e:	e007      	b.n	8003920 <__sfputs_r+0x22>
 8003910:	463a      	mov	r2, r7
 8003912:	4630      	mov	r0, r6
 8003914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003918:	f7ff ffdc 	bl	80038d4 <__sfputc_r>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d1f3      	bne.n	8003908 <__sfputs_r+0xa>
 8003920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003924 <_vfiprintf_r>:
 8003924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003928:	460d      	mov	r5, r1
 800392a:	4614      	mov	r4, r2
 800392c:	4698      	mov	r8, r3
 800392e:	4606      	mov	r6, r0
 8003930:	b09d      	sub	sp, #116	; 0x74
 8003932:	b118      	cbz	r0, 800393c <_vfiprintf_r+0x18>
 8003934:	6983      	ldr	r3, [r0, #24]
 8003936:	b90b      	cbnz	r3, 800393c <_vfiprintf_r+0x18>
 8003938:	f7ff fe98 	bl	800366c <__sinit>
 800393c:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <_vfiprintf_r+0x240>)
 800393e:	429d      	cmp	r5, r3
 8003940:	d11b      	bne.n	800397a <_vfiprintf_r+0x56>
 8003942:	6875      	ldr	r5, [r6, #4]
 8003944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003946:	07d9      	lsls	r1, r3, #31
 8003948:	d405      	bmi.n	8003956 <_vfiprintf_r+0x32>
 800394a:	89ab      	ldrh	r3, [r5, #12]
 800394c:	059a      	lsls	r2, r3, #22
 800394e:	d402      	bmi.n	8003956 <_vfiprintf_r+0x32>
 8003950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003952:	f7ff ff29 	bl	80037a8 <__retarget_lock_acquire_recursive>
 8003956:	89ab      	ldrh	r3, [r5, #12]
 8003958:	071b      	lsls	r3, r3, #28
 800395a:	d501      	bpl.n	8003960 <_vfiprintf_r+0x3c>
 800395c:	692b      	ldr	r3, [r5, #16]
 800395e:	b9eb      	cbnz	r3, 800399c <_vfiprintf_r+0x78>
 8003960:	4629      	mov	r1, r5
 8003962:	4630      	mov	r0, r6
 8003964:	f000 fb5c 	bl	8004020 <__swsetup_r>
 8003968:	b1c0      	cbz	r0, 800399c <_vfiprintf_r+0x78>
 800396a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800396c:	07dc      	lsls	r4, r3, #31
 800396e:	d50e      	bpl.n	800398e <_vfiprintf_r+0x6a>
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	b01d      	add	sp, #116	; 0x74
 8003976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397a:	4b7b      	ldr	r3, [pc, #492]	; (8003b68 <_vfiprintf_r+0x244>)
 800397c:	429d      	cmp	r5, r3
 800397e:	d101      	bne.n	8003984 <_vfiprintf_r+0x60>
 8003980:	68b5      	ldr	r5, [r6, #8]
 8003982:	e7df      	b.n	8003944 <_vfiprintf_r+0x20>
 8003984:	4b79      	ldr	r3, [pc, #484]	; (8003b6c <_vfiprintf_r+0x248>)
 8003986:	429d      	cmp	r5, r3
 8003988:	bf08      	it	eq
 800398a:	68f5      	ldreq	r5, [r6, #12]
 800398c:	e7da      	b.n	8003944 <_vfiprintf_r+0x20>
 800398e:	89ab      	ldrh	r3, [r5, #12]
 8003990:	0598      	lsls	r0, r3, #22
 8003992:	d4ed      	bmi.n	8003970 <_vfiprintf_r+0x4c>
 8003994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003996:	f7ff ff08 	bl	80037aa <__retarget_lock_release_recursive>
 800399a:	e7e9      	b.n	8003970 <_vfiprintf_r+0x4c>
 800399c:	2300      	movs	r3, #0
 800399e:	9309      	str	r3, [sp, #36]	; 0x24
 80039a0:	2320      	movs	r3, #32
 80039a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039a6:	2330      	movs	r3, #48	; 0x30
 80039a8:	f04f 0901 	mov.w	r9, #1
 80039ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003b70 <_vfiprintf_r+0x24c>
 80039b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039b8:	4623      	mov	r3, r4
 80039ba:	469a      	mov	sl, r3
 80039bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c0:	b10a      	cbz	r2, 80039c6 <_vfiprintf_r+0xa2>
 80039c2:	2a25      	cmp	r2, #37	; 0x25
 80039c4:	d1f9      	bne.n	80039ba <_vfiprintf_r+0x96>
 80039c6:	ebba 0b04 	subs.w	fp, sl, r4
 80039ca:	d00b      	beq.n	80039e4 <_vfiprintf_r+0xc0>
 80039cc:	465b      	mov	r3, fp
 80039ce:	4622      	mov	r2, r4
 80039d0:	4629      	mov	r1, r5
 80039d2:	4630      	mov	r0, r6
 80039d4:	f7ff ff93 	bl	80038fe <__sfputs_r>
 80039d8:	3001      	adds	r0, #1
 80039da:	f000 80aa 	beq.w	8003b32 <_vfiprintf_r+0x20e>
 80039de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039e0:	445a      	add	r2, fp
 80039e2:	9209      	str	r2, [sp, #36]	; 0x24
 80039e4:	f89a 3000 	ldrb.w	r3, [sl]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a2 	beq.w	8003b32 <_vfiprintf_r+0x20e>
 80039ee:	2300      	movs	r3, #0
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f8:	f10a 0a01 	add.w	sl, sl, #1
 80039fc:	9304      	str	r3, [sp, #16]
 80039fe:	9307      	str	r3, [sp, #28]
 8003a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a04:	931a      	str	r3, [sp, #104]	; 0x68
 8003a06:	4654      	mov	r4, sl
 8003a08:	2205      	movs	r2, #5
 8003a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0e:	4858      	ldr	r0, [pc, #352]	; (8003b70 <_vfiprintf_r+0x24c>)
 8003a10:	f000 fcba 	bl	8004388 <memchr>
 8003a14:	9a04      	ldr	r2, [sp, #16]
 8003a16:	b9d8      	cbnz	r0, 8003a50 <_vfiprintf_r+0x12c>
 8003a18:	06d1      	lsls	r1, r2, #27
 8003a1a:	bf44      	itt	mi
 8003a1c:	2320      	movmi	r3, #32
 8003a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a22:	0713      	lsls	r3, r2, #28
 8003a24:	bf44      	itt	mi
 8003a26:	232b      	movmi	r3, #43	; 0x2b
 8003a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a30:	2b2a      	cmp	r3, #42	; 0x2a
 8003a32:	d015      	beq.n	8003a60 <_vfiprintf_r+0x13c>
 8003a34:	4654      	mov	r4, sl
 8003a36:	2000      	movs	r0, #0
 8003a38:	f04f 0c0a 	mov.w	ip, #10
 8003a3c:	9a07      	ldr	r2, [sp, #28]
 8003a3e:	4621      	mov	r1, r4
 8003a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a44:	3b30      	subs	r3, #48	; 0x30
 8003a46:	2b09      	cmp	r3, #9
 8003a48:	d94e      	bls.n	8003ae8 <_vfiprintf_r+0x1c4>
 8003a4a:	b1b0      	cbz	r0, 8003a7a <_vfiprintf_r+0x156>
 8003a4c:	9207      	str	r2, [sp, #28]
 8003a4e:	e014      	b.n	8003a7a <_vfiprintf_r+0x156>
 8003a50:	eba0 0308 	sub.w	r3, r0, r8
 8003a54:	fa09 f303 	lsl.w	r3, r9, r3
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	46a2      	mov	sl, r4
 8003a5c:	9304      	str	r3, [sp, #16]
 8003a5e:	e7d2      	b.n	8003a06 <_vfiprintf_r+0xe2>
 8003a60:	9b03      	ldr	r3, [sp, #12]
 8003a62:	1d19      	adds	r1, r3, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	9103      	str	r1, [sp, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bfbb      	ittet	lt
 8003a6c:	425b      	neglt	r3, r3
 8003a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a72:	9307      	strge	r3, [sp, #28]
 8003a74:	9307      	strlt	r3, [sp, #28]
 8003a76:	bfb8      	it	lt
 8003a78:	9204      	strlt	r2, [sp, #16]
 8003a7a:	7823      	ldrb	r3, [r4, #0]
 8003a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a7e:	d10c      	bne.n	8003a9a <_vfiprintf_r+0x176>
 8003a80:	7863      	ldrb	r3, [r4, #1]
 8003a82:	2b2a      	cmp	r3, #42	; 0x2a
 8003a84:	d135      	bne.n	8003af2 <_vfiprintf_r+0x1ce>
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	3402      	adds	r4, #2
 8003a8a:	1d1a      	adds	r2, r3, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	9203      	str	r2, [sp, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bfb8      	it	lt
 8003a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a98:	9305      	str	r3, [sp, #20]
 8003a9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003b74 <_vfiprintf_r+0x250>
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	7821      	ldrb	r1, [r4, #0]
 8003aa4:	f000 fc70 	bl	8004388 <memchr>
 8003aa8:	b140      	cbz	r0, 8003abc <_vfiprintf_r+0x198>
 8003aaa:	2340      	movs	r3, #64	; 0x40
 8003aac:	eba0 000a 	sub.w	r0, r0, sl
 8003ab0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ab4:	9b04      	ldr	r3, [sp, #16]
 8003ab6:	3401      	adds	r4, #1
 8003ab8:	4303      	orrs	r3, r0
 8003aba:	9304      	str	r3, [sp, #16]
 8003abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac0:	2206      	movs	r2, #6
 8003ac2:	482d      	ldr	r0, [pc, #180]	; (8003b78 <_vfiprintf_r+0x254>)
 8003ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ac8:	f000 fc5e 	bl	8004388 <memchr>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d03f      	beq.n	8003b50 <_vfiprintf_r+0x22c>
 8003ad0:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <_vfiprintf_r+0x258>)
 8003ad2:	bb1b      	cbnz	r3, 8003b1c <_vfiprintf_r+0x1f8>
 8003ad4:	9b03      	ldr	r3, [sp, #12]
 8003ad6:	3307      	adds	r3, #7
 8003ad8:	f023 0307 	bic.w	r3, r3, #7
 8003adc:	3308      	adds	r3, #8
 8003ade:	9303      	str	r3, [sp, #12]
 8003ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae2:	443b      	add	r3, r7
 8003ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae6:	e767      	b.n	80039b8 <_vfiprintf_r+0x94>
 8003ae8:	460c      	mov	r4, r1
 8003aea:	2001      	movs	r0, #1
 8003aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af0:	e7a5      	b.n	8003a3e <_vfiprintf_r+0x11a>
 8003af2:	2300      	movs	r3, #0
 8003af4:	f04f 0c0a 	mov.w	ip, #10
 8003af8:	4619      	mov	r1, r3
 8003afa:	3401      	adds	r4, #1
 8003afc:	9305      	str	r3, [sp, #20]
 8003afe:	4620      	mov	r0, r4
 8003b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b04:	3a30      	subs	r2, #48	; 0x30
 8003b06:	2a09      	cmp	r2, #9
 8003b08:	d903      	bls.n	8003b12 <_vfiprintf_r+0x1ee>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0c5      	beq.n	8003a9a <_vfiprintf_r+0x176>
 8003b0e:	9105      	str	r1, [sp, #20]
 8003b10:	e7c3      	b.n	8003a9a <_vfiprintf_r+0x176>
 8003b12:	4604      	mov	r4, r0
 8003b14:	2301      	movs	r3, #1
 8003b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1a:	e7f0      	b.n	8003afe <_vfiprintf_r+0x1da>
 8003b1c:	ab03      	add	r3, sp, #12
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	462a      	mov	r2, r5
 8003b22:	4630      	mov	r0, r6
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <_vfiprintf_r+0x25c>)
 8003b26:	a904      	add	r1, sp, #16
 8003b28:	f3af 8000 	nop.w
 8003b2c:	4607      	mov	r7, r0
 8003b2e:	1c78      	adds	r0, r7, #1
 8003b30:	d1d6      	bne.n	8003ae0 <_vfiprintf_r+0x1bc>
 8003b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b34:	07d9      	lsls	r1, r3, #31
 8003b36:	d405      	bmi.n	8003b44 <_vfiprintf_r+0x220>
 8003b38:	89ab      	ldrh	r3, [r5, #12]
 8003b3a:	059a      	lsls	r2, r3, #22
 8003b3c:	d402      	bmi.n	8003b44 <_vfiprintf_r+0x220>
 8003b3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b40:	f7ff fe33 	bl	80037aa <__retarget_lock_release_recursive>
 8003b44:	89ab      	ldrh	r3, [r5, #12]
 8003b46:	065b      	lsls	r3, r3, #25
 8003b48:	f53f af12 	bmi.w	8003970 <_vfiprintf_r+0x4c>
 8003b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b4e:	e711      	b.n	8003974 <_vfiprintf_r+0x50>
 8003b50:	ab03      	add	r3, sp, #12
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	462a      	mov	r2, r5
 8003b56:	4630      	mov	r0, r6
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <_vfiprintf_r+0x25c>)
 8003b5a:	a904      	add	r1, sp, #16
 8003b5c:	f000 f882 	bl	8003c64 <_printf_i>
 8003b60:	e7e4      	b.n	8003b2c <_vfiprintf_r+0x208>
 8003b62:	bf00      	nop
 8003b64:	0800458c 	.word	0x0800458c
 8003b68:	080045ac 	.word	0x080045ac
 8003b6c:	0800456c 	.word	0x0800456c
 8003b70:	080045cc 	.word	0x080045cc
 8003b74:	080045d2 	.word	0x080045d2
 8003b78:	080045d6 	.word	0x080045d6
 8003b7c:	00000000 	.word	0x00000000
 8003b80:	080038ff 	.word	0x080038ff

08003b84 <_printf_common>:
 8003b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b88:	4616      	mov	r6, r2
 8003b8a:	4699      	mov	r9, r3
 8003b8c:	688a      	ldr	r2, [r1, #8]
 8003b8e:	690b      	ldr	r3, [r1, #16]
 8003b90:	4607      	mov	r7, r0
 8003b92:	4293      	cmp	r3, r2
 8003b94:	bfb8      	it	lt
 8003b96:	4613      	movlt	r3, r2
 8003b98:	6033      	str	r3, [r6, #0]
 8003b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ba4:	b10a      	cbz	r2, 8003baa <_printf_common+0x26>
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	6033      	str	r3, [r6, #0]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	0699      	lsls	r1, r3, #26
 8003bae:	bf42      	ittt	mi
 8003bb0:	6833      	ldrmi	r3, [r6, #0]
 8003bb2:	3302      	addmi	r3, #2
 8003bb4:	6033      	strmi	r3, [r6, #0]
 8003bb6:	6825      	ldr	r5, [r4, #0]
 8003bb8:	f015 0506 	ands.w	r5, r5, #6
 8003bbc:	d106      	bne.n	8003bcc <_printf_common+0x48>
 8003bbe:	f104 0a19 	add.w	sl, r4, #25
 8003bc2:	68e3      	ldr	r3, [r4, #12]
 8003bc4:	6832      	ldr	r2, [r6, #0]
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	42ab      	cmp	r3, r5
 8003bca:	dc28      	bgt.n	8003c1e <_printf_common+0x9a>
 8003bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bd0:	1e13      	subs	r3, r2, #0
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	bf18      	it	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	0692      	lsls	r2, r2, #26
 8003bda:	d42d      	bmi.n	8003c38 <_printf_common+0xb4>
 8003bdc:	4649      	mov	r1, r9
 8003bde:	4638      	mov	r0, r7
 8003be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be4:	47c0      	blx	r8
 8003be6:	3001      	adds	r0, #1
 8003be8:	d020      	beq.n	8003c2c <_printf_common+0xa8>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	68e5      	ldr	r5, [r4, #12]
 8003bee:	f003 0306 	and.w	r3, r3, #6
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	bf18      	it	ne
 8003bf6:	2500      	movne	r5, #0
 8003bf8:	6832      	ldr	r2, [r6, #0]
 8003bfa:	f04f 0600 	mov.w	r6, #0
 8003bfe:	68a3      	ldr	r3, [r4, #8]
 8003c00:	bf08      	it	eq
 8003c02:	1aad      	subeq	r5, r5, r2
 8003c04:	6922      	ldr	r2, [r4, #16]
 8003c06:	bf08      	it	eq
 8003c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bfc4      	itt	gt
 8003c10:	1a9b      	subgt	r3, r3, r2
 8003c12:	18ed      	addgt	r5, r5, r3
 8003c14:	341a      	adds	r4, #26
 8003c16:	42b5      	cmp	r5, r6
 8003c18:	d11a      	bne.n	8003c50 <_printf_common+0xcc>
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	e008      	b.n	8003c30 <_printf_common+0xac>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	4652      	mov	r2, sl
 8003c22:	4649      	mov	r1, r9
 8003c24:	4638      	mov	r0, r7
 8003c26:	47c0      	blx	r8
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d103      	bne.n	8003c34 <_printf_common+0xb0>
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c34:	3501      	adds	r5, #1
 8003c36:	e7c4      	b.n	8003bc2 <_printf_common+0x3e>
 8003c38:	2030      	movs	r0, #48	; 0x30
 8003c3a:	18e1      	adds	r1, r4, r3
 8003c3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c46:	4422      	add	r2, r4
 8003c48:	3302      	adds	r3, #2
 8003c4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c4e:	e7c5      	b.n	8003bdc <_printf_common+0x58>
 8003c50:	2301      	movs	r3, #1
 8003c52:	4622      	mov	r2, r4
 8003c54:	4649      	mov	r1, r9
 8003c56:	4638      	mov	r0, r7
 8003c58:	47c0      	blx	r8
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d0e6      	beq.n	8003c2c <_printf_common+0xa8>
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7d9      	b.n	8003c16 <_printf_common+0x92>
	...

08003c64 <_printf_i>:
 8003c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c68:	7e0f      	ldrb	r7, [r1, #24]
 8003c6a:	4691      	mov	r9, r2
 8003c6c:	2f78      	cmp	r7, #120	; 0x78
 8003c6e:	4680      	mov	r8, r0
 8003c70:	460c      	mov	r4, r1
 8003c72:	469a      	mov	sl, r3
 8003c74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c7a:	d807      	bhi.n	8003c8c <_printf_i+0x28>
 8003c7c:	2f62      	cmp	r7, #98	; 0x62
 8003c7e:	d80a      	bhi.n	8003c96 <_printf_i+0x32>
 8003c80:	2f00      	cmp	r7, #0
 8003c82:	f000 80d9 	beq.w	8003e38 <_printf_i+0x1d4>
 8003c86:	2f58      	cmp	r7, #88	; 0x58
 8003c88:	f000 80a4 	beq.w	8003dd4 <_printf_i+0x170>
 8003c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c94:	e03a      	b.n	8003d0c <_printf_i+0xa8>
 8003c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c9a:	2b15      	cmp	r3, #21
 8003c9c:	d8f6      	bhi.n	8003c8c <_printf_i+0x28>
 8003c9e:	a101      	add	r1, pc, #4	; (adr r1, 8003ca4 <_printf_i+0x40>)
 8003ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ca4:	08003cfd 	.word	0x08003cfd
 8003ca8:	08003d11 	.word	0x08003d11
 8003cac:	08003c8d 	.word	0x08003c8d
 8003cb0:	08003c8d 	.word	0x08003c8d
 8003cb4:	08003c8d 	.word	0x08003c8d
 8003cb8:	08003c8d 	.word	0x08003c8d
 8003cbc:	08003d11 	.word	0x08003d11
 8003cc0:	08003c8d 	.word	0x08003c8d
 8003cc4:	08003c8d 	.word	0x08003c8d
 8003cc8:	08003c8d 	.word	0x08003c8d
 8003ccc:	08003c8d 	.word	0x08003c8d
 8003cd0:	08003e1f 	.word	0x08003e1f
 8003cd4:	08003d41 	.word	0x08003d41
 8003cd8:	08003e01 	.word	0x08003e01
 8003cdc:	08003c8d 	.word	0x08003c8d
 8003ce0:	08003c8d 	.word	0x08003c8d
 8003ce4:	08003e41 	.word	0x08003e41
 8003ce8:	08003c8d 	.word	0x08003c8d
 8003cec:	08003d41 	.word	0x08003d41
 8003cf0:	08003c8d 	.word	0x08003c8d
 8003cf4:	08003c8d 	.word	0x08003c8d
 8003cf8:	08003e09 	.word	0x08003e09
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	602a      	str	r2, [r5, #0]
 8003d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0a4      	b.n	8003e5a <_printf_i+0x1f6>
 8003d10:	6820      	ldr	r0, [r4, #0]
 8003d12:	6829      	ldr	r1, [r5, #0]
 8003d14:	0606      	lsls	r6, r0, #24
 8003d16:	f101 0304 	add.w	r3, r1, #4
 8003d1a:	d50a      	bpl.n	8003d32 <_printf_i+0xce>
 8003d1c:	680e      	ldr	r6, [r1, #0]
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	2e00      	cmp	r6, #0
 8003d22:	da03      	bge.n	8003d2c <_printf_i+0xc8>
 8003d24:	232d      	movs	r3, #45	; 0x2d
 8003d26:	4276      	negs	r6, r6
 8003d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d2c:	230a      	movs	r3, #10
 8003d2e:	485e      	ldr	r0, [pc, #376]	; (8003ea8 <_printf_i+0x244>)
 8003d30:	e019      	b.n	8003d66 <_printf_i+0x102>
 8003d32:	680e      	ldr	r6, [r1, #0]
 8003d34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d38:	602b      	str	r3, [r5, #0]
 8003d3a:	bf18      	it	ne
 8003d3c:	b236      	sxthne	r6, r6
 8003d3e:	e7ef      	b.n	8003d20 <_printf_i+0xbc>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	6820      	ldr	r0, [r4, #0]
 8003d44:	1d19      	adds	r1, r3, #4
 8003d46:	6029      	str	r1, [r5, #0]
 8003d48:	0601      	lsls	r1, r0, #24
 8003d4a:	d501      	bpl.n	8003d50 <_printf_i+0xec>
 8003d4c:	681e      	ldr	r6, [r3, #0]
 8003d4e:	e002      	b.n	8003d56 <_printf_i+0xf2>
 8003d50:	0646      	lsls	r6, r0, #25
 8003d52:	d5fb      	bpl.n	8003d4c <_printf_i+0xe8>
 8003d54:	881e      	ldrh	r6, [r3, #0]
 8003d56:	2f6f      	cmp	r7, #111	; 0x6f
 8003d58:	bf0c      	ite	eq
 8003d5a:	2308      	moveq	r3, #8
 8003d5c:	230a      	movne	r3, #10
 8003d5e:	4852      	ldr	r0, [pc, #328]	; (8003ea8 <_printf_i+0x244>)
 8003d60:	2100      	movs	r1, #0
 8003d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d66:	6865      	ldr	r5, [r4, #4]
 8003d68:	2d00      	cmp	r5, #0
 8003d6a:	bfa8      	it	ge
 8003d6c:	6821      	ldrge	r1, [r4, #0]
 8003d6e:	60a5      	str	r5, [r4, #8]
 8003d70:	bfa4      	itt	ge
 8003d72:	f021 0104 	bicge.w	r1, r1, #4
 8003d76:	6021      	strge	r1, [r4, #0]
 8003d78:	b90e      	cbnz	r6, 8003d7e <_printf_i+0x11a>
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d04d      	beq.n	8003e1a <_printf_i+0x1b6>
 8003d7e:	4615      	mov	r5, r2
 8003d80:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d84:	fb03 6711 	mls	r7, r3, r1, r6
 8003d88:	5dc7      	ldrb	r7, [r0, r7]
 8003d8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d8e:	4637      	mov	r7, r6
 8003d90:	42bb      	cmp	r3, r7
 8003d92:	460e      	mov	r6, r1
 8003d94:	d9f4      	bls.n	8003d80 <_printf_i+0x11c>
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d10b      	bne.n	8003db2 <_printf_i+0x14e>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	07de      	lsls	r6, r3, #31
 8003d9e:	d508      	bpl.n	8003db2 <_printf_i+0x14e>
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	6861      	ldr	r1, [r4, #4]
 8003da4:	4299      	cmp	r1, r3
 8003da6:	bfde      	ittt	le
 8003da8:	2330      	movle	r3, #48	; 0x30
 8003daa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003db2:	1b52      	subs	r2, r2, r5
 8003db4:	6122      	str	r2, [r4, #16]
 8003db6:	464b      	mov	r3, r9
 8003db8:	4621      	mov	r1, r4
 8003dba:	4640      	mov	r0, r8
 8003dbc:	f8cd a000 	str.w	sl, [sp]
 8003dc0:	aa03      	add	r2, sp, #12
 8003dc2:	f7ff fedf 	bl	8003b84 <_printf_common>
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d14c      	bne.n	8003e64 <_printf_i+0x200>
 8003dca:	f04f 30ff 	mov.w	r0, #4294967295
 8003dce:	b004      	add	sp, #16
 8003dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd4:	4834      	ldr	r0, [pc, #208]	; (8003ea8 <_printf_i+0x244>)
 8003dd6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003dda:	6829      	ldr	r1, [r5, #0]
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	f851 6b04 	ldr.w	r6, [r1], #4
 8003de2:	6029      	str	r1, [r5, #0]
 8003de4:	061d      	lsls	r5, r3, #24
 8003de6:	d514      	bpl.n	8003e12 <_printf_i+0x1ae>
 8003de8:	07df      	lsls	r7, r3, #31
 8003dea:	bf44      	itt	mi
 8003dec:	f043 0320 	orrmi.w	r3, r3, #32
 8003df0:	6023      	strmi	r3, [r4, #0]
 8003df2:	b91e      	cbnz	r6, 8003dfc <_printf_i+0x198>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	f023 0320 	bic.w	r3, r3, #32
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	e7af      	b.n	8003d60 <_printf_i+0xfc>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	f043 0320 	orr.w	r3, r3, #32
 8003e06:	6023      	str	r3, [r4, #0]
 8003e08:	2378      	movs	r3, #120	; 0x78
 8003e0a:	4828      	ldr	r0, [pc, #160]	; (8003eac <_printf_i+0x248>)
 8003e0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e10:	e7e3      	b.n	8003dda <_printf_i+0x176>
 8003e12:	0659      	lsls	r1, r3, #25
 8003e14:	bf48      	it	mi
 8003e16:	b2b6      	uxthmi	r6, r6
 8003e18:	e7e6      	b.n	8003de8 <_printf_i+0x184>
 8003e1a:	4615      	mov	r5, r2
 8003e1c:	e7bb      	b.n	8003d96 <_printf_i+0x132>
 8003e1e:	682b      	ldr	r3, [r5, #0]
 8003e20:	6826      	ldr	r6, [r4, #0]
 8003e22:	1d18      	adds	r0, r3, #4
 8003e24:	6961      	ldr	r1, [r4, #20]
 8003e26:	6028      	str	r0, [r5, #0]
 8003e28:	0635      	lsls	r5, r6, #24
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	d501      	bpl.n	8003e32 <_printf_i+0x1ce>
 8003e2e:	6019      	str	r1, [r3, #0]
 8003e30:	e002      	b.n	8003e38 <_printf_i+0x1d4>
 8003e32:	0670      	lsls	r0, r6, #25
 8003e34:	d5fb      	bpl.n	8003e2e <_printf_i+0x1ca>
 8003e36:	8019      	strh	r1, [r3, #0]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4615      	mov	r5, r2
 8003e3c:	6123      	str	r3, [r4, #16]
 8003e3e:	e7ba      	b.n	8003db6 <_printf_i+0x152>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	2100      	movs	r1, #0
 8003e44:	1d1a      	adds	r2, r3, #4
 8003e46:	602a      	str	r2, [r5, #0]
 8003e48:	681d      	ldr	r5, [r3, #0]
 8003e4a:	6862      	ldr	r2, [r4, #4]
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	f000 fa9b 	bl	8004388 <memchr>
 8003e52:	b108      	cbz	r0, 8003e58 <_printf_i+0x1f4>
 8003e54:	1b40      	subs	r0, r0, r5
 8003e56:	6060      	str	r0, [r4, #4]
 8003e58:	6863      	ldr	r3, [r4, #4]
 8003e5a:	6123      	str	r3, [r4, #16]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e62:	e7a8      	b.n	8003db6 <_printf_i+0x152>
 8003e64:	462a      	mov	r2, r5
 8003e66:	4649      	mov	r1, r9
 8003e68:	4640      	mov	r0, r8
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	47d0      	blx	sl
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d0ab      	beq.n	8003dca <_printf_i+0x166>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	079b      	lsls	r3, r3, #30
 8003e76:	d413      	bmi.n	8003ea0 <_printf_i+0x23c>
 8003e78:	68e0      	ldr	r0, [r4, #12]
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	4298      	cmp	r0, r3
 8003e7e:	bfb8      	it	lt
 8003e80:	4618      	movlt	r0, r3
 8003e82:	e7a4      	b.n	8003dce <_printf_i+0x16a>
 8003e84:	2301      	movs	r3, #1
 8003e86:	4632      	mov	r2, r6
 8003e88:	4649      	mov	r1, r9
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	47d0      	blx	sl
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d09b      	beq.n	8003dca <_printf_i+0x166>
 8003e92:	3501      	adds	r5, #1
 8003e94:	68e3      	ldr	r3, [r4, #12]
 8003e96:	9903      	ldr	r1, [sp, #12]
 8003e98:	1a5b      	subs	r3, r3, r1
 8003e9a:	42ab      	cmp	r3, r5
 8003e9c:	dcf2      	bgt.n	8003e84 <_printf_i+0x220>
 8003e9e:	e7eb      	b.n	8003e78 <_printf_i+0x214>
 8003ea0:	2500      	movs	r5, #0
 8003ea2:	f104 0619 	add.w	r6, r4, #25
 8003ea6:	e7f5      	b.n	8003e94 <_printf_i+0x230>
 8003ea8:	080045dd 	.word	0x080045dd
 8003eac:	080045ee 	.word	0x080045ee

08003eb0 <_sbrk_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	4d05      	ldr	r5, [pc, #20]	; (8003ecc <_sbrk_r+0x1c>)
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	f7fc fe32 	bl	8000b24 <_sbrk>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_sbrk_r+0x1a>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_sbrk_r+0x1a>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20000314 	.word	0x20000314

08003ed0 <__sread>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed8:	f000 fab8 	bl	800444c <_read_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	bfab      	itete	ge
 8003ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee4:	181b      	addge	r3, r3, r0
 8003ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003eea:	bfac      	ite	ge
 8003eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eee:	81a3      	strhlt	r3, [r4, #12]
 8003ef0:	bd10      	pop	{r4, pc}

08003ef2 <__swrite>:
 8003ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef6:	461f      	mov	r7, r3
 8003ef8:	898b      	ldrh	r3, [r1, #12]
 8003efa:	4605      	mov	r5, r0
 8003efc:	05db      	lsls	r3, r3, #23
 8003efe:	460c      	mov	r4, r1
 8003f00:	4616      	mov	r6, r2
 8003f02:	d505      	bpl.n	8003f10 <__swrite+0x1e>
 8003f04:	2302      	movs	r3, #2
 8003f06:	2200      	movs	r2, #0
 8003f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0c:	f000 f9c4 	bl	8004298 <_lseek_r>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	4632      	mov	r2, r6
 8003f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f26:	f000 b869 	b.w	8003ffc <_write_r>

08003f2a <__sseek>:
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f32:	f000 f9b1 	bl	8004298 <_lseek_r>
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	bf15      	itete	ne
 8003f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f46:	81a3      	strheq	r3, [r4, #12]
 8003f48:	bf18      	it	ne
 8003f4a:	81a3      	strhne	r3, [r4, #12]
 8003f4c:	bd10      	pop	{r4, pc}

08003f4e <__sclose>:
 8003f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f52:	f000 b8d3 	b.w	80040fc <_close_r>
	...

08003f58 <__swbuf_r>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	460e      	mov	r6, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	4605      	mov	r5, r0
 8003f60:	b118      	cbz	r0, 8003f6a <__swbuf_r+0x12>
 8003f62:	6983      	ldr	r3, [r0, #24]
 8003f64:	b90b      	cbnz	r3, 8003f6a <__swbuf_r+0x12>
 8003f66:	f7ff fb81 	bl	800366c <__sinit>
 8003f6a:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <__swbuf_r+0x98>)
 8003f6c:	429c      	cmp	r4, r3
 8003f6e:	d12b      	bne.n	8003fc8 <__swbuf_r+0x70>
 8003f70:	686c      	ldr	r4, [r5, #4]
 8003f72:	69a3      	ldr	r3, [r4, #24]
 8003f74:	60a3      	str	r3, [r4, #8]
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	071a      	lsls	r2, r3, #28
 8003f7a:	d52f      	bpl.n	8003fdc <__swbuf_r+0x84>
 8003f7c:	6923      	ldr	r3, [r4, #16]
 8003f7e:	b36b      	cbz	r3, 8003fdc <__swbuf_r+0x84>
 8003f80:	6923      	ldr	r3, [r4, #16]
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	b2f6      	uxtb	r6, r6
 8003f86:	1ac0      	subs	r0, r0, r3
 8003f88:	6963      	ldr	r3, [r4, #20]
 8003f8a:	4637      	mov	r7, r6
 8003f8c:	4283      	cmp	r3, r0
 8003f8e:	dc04      	bgt.n	8003f9a <__swbuf_r+0x42>
 8003f90:	4621      	mov	r1, r4
 8003f92:	4628      	mov	r0, r5
 8003f94:	f000 f944 	bl	8004220 <_fflush_r>
 8003f98:	bb30      	cbnz	r0, 8003fe8 <__swbuf_r+0x90>
 8003f9a:	68a3      	ldr	r3, [r4, #8]
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	60a3      	str	r3, [r4, #8]
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	6022      	str	r2, [r4, #0]
 8003fa8:	701e      	strb	r6, [r3, #0]
 8003faa:	6963      	ldr	r3, [r4, #20]
 8003fac:	4283      	cmp	r3, r0
 8003fae:	d004      	beq.n	8003fba <__swbuf_r+0x62>
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	07db      	lsls	r3, r3, #31
 8003fb4:	d506      	bpl.n	8003fc4 <__swbuf_r+0x6c>
 8003fb6:	2e0a      	cmp	r6, #10
 8003fb8:	d104      	bne.n	8003fc4 <__swbuf_r+0x6c>
 8003fba:	4621      	mov	r1, r4
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f000 f92f 	bl	8004220 <_fflush_r>
 8003fc2:	b988      	cbnz	r0, 8003fe8 <__swbuf_r+0x90>
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <__swbuf_r+0x9c>)
 8003fca:	429c      	cmp	r4, r3
 8003fcc:	d101      	bne.n	8003fd2 <__swbuf_r+0x7a>
 8003fce:	68ac      	ldr	r4, [r5, #8]
 8003fd0:	e7cf      	b.n	8003f72 <__swbuf_r+0x1a>
 8003fd2:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <__swbuf_r+0xa0>)
 8003fd4:	429c      	cmp	r4, r3
 8003fd6:	bf08      	it	eq
 8003fd8:	68ec      	ldreq	r4, [r5, #12]
 8003fda:	e7ca      	b.n	8003f72 <__swbuf_r+0x1a>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f000 f81e 	bl	8004020 <__swsetup_r>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d0cb      	beq.n	8003f80 <__swbuf_r+0x28>
 8003fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8003fec:	e7ea      	b.n	8003fc4 <__swbuf_r+0x6c>
 8003fee:	bf00      	nop
 8003ff0:	0800458c 	.word	0x0800458c
 8003ff4:	080045ac 	.word	0x080045ac
 8003ff8:	0800456c 	.word	0x0800456c

08003ffc <_write_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	2200      	movs	r2, #0
 8004006:	4d05      	ldr	r5, [pc, #20]	; (800401c <_write_r+0x20>)
 8004008:	602a      	str	r2, [r5, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f7fc fd3d 	bl	8000a8a <_write>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_write_r+0x1e>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	b103      	cbz	r3, 800401a <_write_r+0x1e>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	20000314 	.word	0x20000314

08004020 <__swsetup_r>:
 8004020:	4b32      	ldr	r3, [pc, #200]	; (80040ec <__swsetup_r+0xcc>)
 8004022:	b570      	push	{r4, r5, r6, lr}
 8004024:	681d      	ldr	r5, [r3, #0]
 8004026:	4606      	mov	r6, r0
 8004028:	460c      	mov	r4, r1
 800402a:	b125      	cbz	r5, 8004036 <__swsetup_r+0x16>
 800402c:	69ab      	ldr	r3, [r5, #24]
 800402e:	b913      	cbnz	r3, 8004036 <__swsetup_r+0x16>
 8004030:	4628      	mov	r0, r5
 8004032:	f7ff fb1b 	bl	800366c <__sinit>
 8004036:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <__swsetup_r+0xd0>)
 8004038:	429c      	cmp	r4, r3
 800403a:	d10f      	bne.n	800405c <__swsetup_r+0x3c>
 800403c:	686c      	ldr	r4, [r5, #4]
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004044:	0719      	lsls	r1, r3, #28
 8004046:	d42c      	bmi.n	80040a2 <__swsetup_r+0x82>
 8004048:	06dd      	lsls	r5, r3, #27
 800404a:	d411      	bmi.n	8004070 <__swsetup_r+0x50>
 800404c:	2309      	movs	r3, #9
 800404e:	6033      	str	r3, [r6, #0]
 8004050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	81a3      	strh	r3, [r4, #12]
 800405a:	e03e      	b.n	80040da <__swsetup_r+0xba>
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <__swsetup_r+0xd4>)
 800405e:	429c      	cmp	r4, r3
 8004060:	d101      	bne.n	8004066 <__swsetup_r+0x46>
 8004062:	68ac      	ldr	r4, [r5, #8]
 8004064:	e7eb      	b.n	800403e <__swsetup_r+0x1e>
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <__swsetup_r+0xd8>)
 8004068:	429c      	cmp	r4, r3
 800406a:	bf08      	it	eq
 800406c:	68ec      	ldreq	r4, [r5, #12]
 800406e:	e7e6      	b.n	800403e <__swsetup_r+0x1e>
 8004070:	0758      	lsls	r0, r3, #29
 8004072:	d512      	bpl.n	800409a <__swsetup_r+0x7a>
 8004074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004076:	b141      	cbz	r1, 800408a <__swsetup_r+0x6a>
 8004078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800407c:	4299      	cmp	r1, r3
 800407e:	d002      	beq.n	8004086 <__swsetup_r+0x66>
 8004080:	4630      	mov	r0, r6
 8004082:	f000 f99b 	bl	80043bc <_free_r>
 8004086:	2300      	movs	r3, #0
 8004088:	6363      	str	r3, [r4, #52]	; 0x34
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004090:	81a3      	strh	r3, [r4, #12]
 8004092:	2300      	movs	r3, #0
 8004094:	6063      	str	r3, [r4, #4]
 8004096:	6923      	ldr	r3, [r4, #16]
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	f043 0308 	orr.w	r3, r3, #8
 80040a0:	81a3      	strh	r3, [r4, #12]
 80040a2:	6923      	ldr	r3, [r4, #16]
 80040a4:	b94b      	cbnz	r3, 80040ba <__swsetup_r+0x9a>
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b0:	d003      	beq.n	80040ba <__swsetup_r+0x9a>
 80040b2:	4621      	mov	r1, r4
 80040b4:	4630      	mov	r0, r6
 80040b6:	f000 f927 	bl	8004308 <__smakebuf_r>
 80040ba:	89a0      	ldrh	r0, [r4, #12]
 80040bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040c0:	f010 0301 	ands.w	r3, r0, #1
 80040c4:	d00a      	beq.n	80040dc <__swsetup_r+0xbc>
 80040c6:	2300      	movs	r3, #0
 80040c8:	60a3      	str	r3, [r4, #8]
 80040ca:	6963      	ldr	r3, [r4, #20]
 80040cc:	425b      	negs	r3, r3
 80040ce:	61a3      	str	r3, [r4, #24]
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	b943      	cbnz	r3, 80040e6 <__swsetup_r+0xc6>
 80040d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040d8:	d1ba      	bne.n	8004050 <__swsetup_r+0x30>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	0781      	lsls	r1, r0, #30
 80040de:	bf58      	it	pl
 80040e0:	6963      	ldrpl	r3, [r4, #20]
 80040e2:	60a3      	str	r3, [r4, #8]
 80040e4:	e7f4      	b.n	80040d0 <__swsetup_r+0xb0>
 80040e6:	2000      	movs	r0, #0
 80040e8:	e7f7      	b.n	80040da <__swsetup_r+0xba>
 80040ea:	bf00      	nop
 80040ec:	2000007c 	.word	0x2000007c
 80040f0:	0800458c 	.word	0x0800458c
 80040f4:	080045ac 	.word	0x080045ac
 80040f8:	0800456c 	.word	0x0800456c

080040fc <_close_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	2300      	movs	r3, #0
 8004100:	4d05      	ldr	r5, [pc, #20]	; (8004118 <_close_r+0x1c>)
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fc fcdb 	bl	8000ac2 <_close>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_close_r+0x1a>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_close_r+0x1a>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20000314 	.word	0x20000314

0800411c <__sflush_r>:
 800411c:	898a      	ldrh	r2, [r1, #12]
 800411e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004120:	4605      	mov	r5, r0
 8004122:	0710      	lsls	r0, r2, #28
 8004124:	460c      	mov	r4, r1
 8004126:	d457      	bmi.n	80041d8 <__sflush_r+0xbc>
 8004128:	684b      	ldr	r3, [r1, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	dc04      	bgt.n	8004138 <__sflush_r+0x1c>
 800412e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	dc01      	bgt.n	8004138 <__sflush_r+0x1c>
 8004134:	2000      	movs	r0, #0
 8004136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800413a:	2e00      	cmp	r6, #0
 800413c:	d0fa      	beq.n	8004134 <__sflush_r+0x18>
 800413e:	2300      	movs	r3, #0
 8004140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004144:	682f      	ldr	r7, [r5, #0]
 8004146:	602b      	str	r3, [r5, #0]
 8004148:	d032      	beq.n	80041b0 <__sflush_r+0x94>
 800414a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	075a      	lsls	r2, r3, #29
 8004150:	d505      	bpl.n	800415e <__sflush_r+0x42>
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	1ac0      	subs	r0, r0, r3
 8004156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004158:	b10b      	cbz	r3, 800415e <__sflush_r+0x42>
 800415a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800415c:	1ac0      	subs	r0, r0, r3
 800415e:	2300      	movs	r3, #0
 8004160:	4602      	mov	r2, r0
 8004162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004164:	4628      	mov	r0, r5
 8004166:	6a21      	ldr	r1, [r4, #32]
 8004168:	47b0      	blx	r6
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	d106      	bne.n	800417e <__sflush_r+0x62>
 8004170:	6829      	ldr	r1, [r5, #0]
 8004172:	291d      	cmp	r1, #29
 8004174:	d82c      	bhi.n	80041d0 <__sflush_r+0xb4>
 8004176:	4a29      	ldr	r2, [pc, #164]	; (800421c <__sflush_r+0x100>)
 8004178:	40ca      	lsrs	r2, r1
 800417a:	07d6      	lsls	r6, r2, #31
 800417c:	d528      	bpl.n	80041d0 <__sflush_r+0xb4>
 800417e:	2200      	movs	r2, #0
 8004180:	6062      	str	r2, [r4, #4]
 8004182:	6922      	ldr	r2, [r4, #16]
 8004184:	04d9      	lsls	r1, r3, #19
 8004186:	6022      	str	r2, [r4, #0]
 8004188:	d504      	bpl.n	8004194 <__sflush_r+0x78>
 800418a:	1c42      	adds	r2, r0, #1
 800418c:	d101      	bne.n	8004192 <__sflush_r+0x76>
 800418e:	682b      	ldr	r3, [r5, #0]
 8004190:	b903      	cbnz	r3, 8004194 <__sflush_r+0x78>
 8004192:	6560      	str	r0, [r4, #84]	; 0x54
 8004194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004196:	602f      	str	r7, [r5, #0]
 8004198:	2900      	cmp	r1, #0
 800419a:	d0cb      	beq.n	8004134 <__sflush_r+0x18>
 800419c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041a0:	4299      	cmp	r1, r3
 80041a2:	d002      	beq.n	80041aa <__sflush_r+0x8e>
 80041a4:	4628      	mov	r0, r5
 80041a6:	f000 f909 	bl	80043bc <_free_r>
 80041aa:	2000      	movs	r0, #0
 80041ac:	6360      	str	r0, [r4, #52]	; 0x34
 80041ae:	e7c2      	b.n	8004136 <__sflush_r+0x1a>
 80041b0:	6a21      	ldr	r1, [r4, #32]
 80041b2:	2301      	movs	r3, #1
 80041b4:	4628      	mov	r0, r5
 80041b6:	47b0      	blx	r6
 80041b8:	1c41      	adds	r1, r0, #1
 80041ba:	d1c7      	bne.n	800414c <__sflush_r+0x30>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0c4      	beq.n	800414c <__sflush_r+0x30>
 80041c2:	2b1d      	cmp	r3, #29
 80041c4:	d001      	beq.n	80041ca <__sflush_r+0xae>
 80041c6:	2b16      	cmp	r3, #22
 80041c8:	d101      	bne.n	80041ce <__sflush_r+0xb2>
 80041ca:	602f      	str	r7, [r5, #0]
 80041cc:	e7b2      	b.n	8004134 <__sflush_r+0x18>
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d4:	81a3      	strh	r3, [r4, #12]
 80041d6:	e7ae      	b.n	8004136 <__sflush_r+0x1a>
 80041d8:	690f      	ldr	r7, [r1, #16]
 80041da:	2f00      	cmp	r7, #0
 80041dc:	d0aa      	beq.n	8004134 <__sflush_r+0x18>
 80041de:	0793      	lsls	r3, r2, #30
 80041e0:	bf18      	it	ne
 80041e2:	2300      	movne	r3, #0
 80041e4:	680e      	ldr	r6, [r1, #0]
 80041e6:	bf08      	it	eq
 80041e8:	694b      	ldreq	r3, [r1, #20]
 80041ea:	1bf6      	subs	r6, r6, r7
 80041ec:	600f      	str	r7, [r1, #0]
 80041ee:	608b      	str	r3, [r1, #8]
 80041f0:	2e00      	cmp	r6, #0
 80041f2:	dd9f      	ble.n	8004134 <__sflush_r+0x18>
 80041f4:	4633      	mov	r3, r6
 80041f6:	463a      	mov	r2, r7
 80041f8:	4628      	mov	r0, r5
 80041fa:	6a21      	ldr	r1, [r4, #32]
 80041fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004200:	47e0      	blx	ip
 8004202:	2800      	cmp	r0, #0
 8004204:	dc06      	bgt.n	8004214 <__sflush_r+0xf8>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	e790      	b.n	8004136 <__sflush_r+0x1a>
 8004214:	4407      	add	r7, r0
 8004216:	1a36      	subs	r6, r6, r0
 8004218:	e7ea      	b.n	80041f0 <__sflush_r+0xd4>
 800421a:	bf00      	nop
 800421c:	20400001 	.word	0x20400001

08004220 <_fflush_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	690b      	ldr	r3, [r1, #16]
 8004224:	4605      	mov	r5, r0
 8004226:	460c      	mov	r4, r1
 8004228:	b913      	cbnz	r3, 8004230 <_fflush_r+0x10>
 800422a:	2500      	movs	r5, #0
 800422c:	4628      	mov	r0, r5
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	b118      	cbz	r0, 800423a <_fflush_r+0x1a>
 8004232:	6983      	ldr	r3, [r0, #24]
 8004234:	b90b      	cbnz	r3, 800423a <_fflush_r+0x1a>
 8004236:	f7ff fa19 	bl	800366c <__sinit>
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <_fflush_r+0x6c>)
 800423c:	429c      	cmp	r4, r3
 800423e:	d11b      	bne.n	8004278 <_fflush_r+0x58>
 8004240:	686c      	ldr	r4, [r5, #4]
 8004242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ef      	beq.n	800422a <_fflush_r+0xa>
 800424a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800424c:	07d0      	lsls	r0, r2, #31
 800424e:	d404      	bmi.n	800425a <_fflush_r+0x3a>
 8004250:	0599      	lsls	r1, r3, #22
 8004252:	d402      	bmi.n	800425a <_fflush_r+0x3a>
 8004254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004256:	f7ff faa7 	bl	80037a8 <__retarget_lock_acquire_recursive>
 800425a:	4628      	mov	r0, r5
 800425c:	4621      	mov	r1, r4
 800425e:	f7ff ff5d 	bl	800411c <__sflush_r>
 8004262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004264:	4605      	mov	r5, r0
 8004266:	07da      	lsls	r2, r3, #31
 8004268:	d4e0      	bmi.n	800422c <_fflush_r+0xc>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	059b      	lsls	r3, r3, #22
 800426e:	d4dd      	bmi.n	800422c <_fflush_r+0xc>
 8004270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004272:	f7ff fa9a 	bl	80037aa <__retarget_lock_release_recursive>
 8004276:	e7d9      	b.n	800422c <_fflush_r+0xc>
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <_fflush_r+0x70>)
 800427a:	429c      	cmp	r4, r3
 800427c:	d101      	bne.n	8004282 <_fflush_r+0x62>
 800427e:	68ac      	ldr	r4, [r5, #8]
 8004280:	e7df      	b.n	8004242 <_fflush_r+0x22>
 8004282:	4b04      	ldr	r3, [pc, #16]	; (8004294 <_fflush_r+0x74>)
 8004284:	429c      	cmp	r4, r3
 8004286:	bf08      	it	eq
 8004288:	68ec      	ldreq	r4, [r5, #12]
 800428a:	e7da      	b.n	8004242 <_fflush_r+0x22>
 800428c:	0800458c 	.word	0x0800458c
 8004290:	080045ac 	.word	0x080045ac
 8004294:	0800456c 	.word	0x0800456c

08004298 <_lseek_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4604      	mov	r4, r0
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	2200      	movs	r2, #0
 80042a2:	4d05      	ldr	r5, [pc, #20]	; (80042b8 <_lseek_r+0x20>)
 80042a4:	602a      	str	r2, [r5, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f7fc fc2f 	bl	8000b0a <_lseek>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	d102      	bne.n	80042b6 <_lseek_r+0x1e>
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	b103      	cbz	r3, 80042b6 <_lseek_r+0x1e>
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	20000314 	.word	0x20000314

080042bc <__swhatbuf_r>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	460e      	mov	r6, r1
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	4614      	mov	r4, r2
 80042c6:	2900      	cmp	r1, #0
 80042c8:	461d      	mov	r5, r3
 80042ca:	b096      	sub	sp, #88	; 0x58
 80042cc:	da08      	bge.n	80042e0 <__swhatbuf_r+0x24>
 80042ce:	2200      	movs	r2, #0
 80042d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80042d4:	602a      	str	r2, [r5, #0]
 80042d6:	061a      	lsls	r2, r3, #24
 80042d8:	d410      	bmi.n	80042fc <__swhatbuf_r+0x40>
 80042da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042de:	e00e      	b.n	80042fe <__swhatbuf_r+0x42>
 80042e0:	466a      	mov	r2, sp
 80042e2:	f000 f8c5 	bl	8004470 <_fstat_r>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	dbf1      	blt.n	80042ce <__swhatbuf_r+0x12>
 80042ea:	9a01      	ldr	r2, [sp, #4]
 80042ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042f4:	425a      	negs	r2, r3
 80042f6:	415a      	adcs	r2, r3
 80042f8:	602a      	str	r2, [r5, #0]
 80042fa:	e7ee      	b.n	80042da <__swhatbuf_r+0x1e>
 80042fc:	2340      	movs	r3, #64	; 0x40
 80042fe:	2000      	movs	r0, #0
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	b016      	add	sp, #88	; 0x58
 8004304:	bd70      	pop	{r4, r5, r6, pc}
	...

08004308 <__smakebuf_r>:
 8004308:	898b      	ldrh	r3, [r1, #12]
 800430a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800430c:	079d      	lsls	r5, r3, #30
 800430e:	4606      	mov	r6, r0
 8004310:	460c      	mov	r4, r1
 8004312:	d507      	bpl.n	8004324 <__smakebuf_r+0x1c>
 8004314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	6123      	str	r3, [r4, #16]
 800431c:	2301      	movs	r3, #1
 800431e:	6163      	str	r3, [r4, #20]
 8004320:	b002      	add	sp, #8
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	466a      	mov	r2, sp
 8004326:	ab01      	add	r3, sp, #4
 8004328:	f7ff ffc8 	bl	80042bc <__swhatbuf_r>
 800432c:	9900      	ldr	r1, [sp, #0]
 800432e:	4605      	mov	r5, r0
 8004330:	4630      	mov	r0, r6
 8004332:	f7ff fa5b 	bl	80037ec <_malloc_r>
 8004336:	b948      	cbnz	r0, 800434c <__smakebuf_r+0x44>
 8004338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800433c:	059a      	lsls	r2, r3, #22
 800433e:	d4ef      	bmi.n	8004320 <__smakebuf_r+0x18>
 8004340:	f023 0303 	bic.w	r3, r3, #3
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	81a3      	strh	r3, [r4, #12]
 800434a:	e7e3      	b.n	8004314 <__smakebuf_r+0xc>
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <__smakebuf_r+0x7c>)
 800434e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	6020      	str	r0, [r4, #0]
 8004354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	9b00      	ldr	r3, [sp, #0]
 800435c:	6120      	str	r0, [r4, #16]
 800435e:	6163      	str	r3, [r4, #20]
 8004360:	9b01      	ldr	r3, [sp, #4]
 8004362:	b15b      	cbz	r3, 800437c <__smakebuf_r+0x74>
 8004364:	4630      	mov	r0, r6
 8004366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800436a:	f000 f893 	bl	8004494 <_isatty_r>
 800436e:	b128      	cbz	r0, 800437c <__smakebuf_r+0x74>
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	f023 0303 	bic.w	r3, r3, #3
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	81a3      	strh	r3, [r4, #12]
 800437c:	89a0      	ldrh	r0, [r4, #12]
 800437e:	4305      	orrs	r5, r0
 8004380:	81a5      	strh	r5, [r4, #12]
 8004382:	e7cd      	b.n	8004320 <__smakebuf_r+0x18>
 8004384:	08003605 	.word	0x08003605

08004388 <memchr>:
 8004388:	4603      	mov	r3, r0
 800438a:	b510      	push	{r4, lr}
 800438c:	b2c9      	uxtb	r1, r1
 800438e:	4402      	add	r2, r0
 8004390:	4293      	cmp	r3, r2
 8004392:	4618      	mov	r0, r3
 8004394:	d101      	bne.n	800439a <memchr+0x12>
 8004396:	2000      	movs	r0, #0
 8004398:	e003      	b.n	80043a2 <memchr+0x1a>
 800439a:	7804      	ldrb	r4, [r0, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	428c      	cmp	r4, r1
 80043a0:	d1f6      	bne.n	8004390 <memchr+0x8>
 80043a2:	bd10      	pop	{r4, pc}

080043a4 <__malloc_lock>:
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <__malloc_lock+0x8>)
 80043a6:	f7ff b9ff 	b.w	80037a8 <__retarget_lock_acquire_recursive>
 80043aa:	bf00      	nop
 80043ac:	20000308 	.word	0x20000308

080043b0 <__malloc_unlock>:
 80043b0:	4801      	ldr	r0, [pc, #4]	; (80043b8 <__malloc_unlock+0x8>)
 80043b2:	f7ff b9fa 	b.w	80037aa <__retarget_lock_release_recursive>
 80043b6:	bf00      	nop
 80043b8:	20000308 	.word	0x20000308

080043bc <_free_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4605      	mov	r5, r0
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d040      	beq.n	8004446 <_free_r+0x8a>
 80043c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c8:	1f0c      	subs	r4, r1, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bfb8      	it	lt
 80043ce:	18e4      	addlt	r4, r4, r3
 80043d0:	f7ff ffe8 	bl	80043a4 <__malloc_lock>
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <_free_r+0x8c>)
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	b933      	cbnz	r3, 80043e8 <_free_r+0x2c>
 80043da:	6063      	str	r3, [r4, #4]
 80043dc:	6014      	str	r4, [r2, #0]
 80043de:	4628      	mov	r0, r5
 80043e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043e4:	f7ff bfe4 	b.w	80043b0 <__malloc_unlock>
 80043e8:	42a3      	cmp	r3, r4
 80043ea:	d908      	bls.n	80043fe <_free_r+0x42>
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	1821      	adds	r1, r4, r0
 80043f0:	428b      	cmp	r3, r1
 80043f2:	bf01      	itttt	eq
 80043f4:	6819      	ldreq	r1, [r3, #0]
 80043f6:	685b      	ldreq	r3, [r3, #4]
 80043f8:	1809      	addeq	r1, r1, r0
 80043fa:	6021      	streq	r1, [r4, #0]
 80043fc:	e7ed      	b.n	80043da <_free_r+0x1e>
 80043fe:	461a      	mov	r2, r3
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	b10b      	cbz	r3, 8004408 <_free_r+0x4c>
 8004404:	42a3      	cmp	r3, r4
 8004406:	d9fa      	bls.n	80043fe <_free_r+0x42>
 8004408:	6811      	ldr	r1, [r2, #0]
 800440a:	1850      	adds	r0, r2, r1
 800440c:	42a0      	cmp	r0, r4
 800440e:	d10b      	bne.n	8004428 <_free_r+0x6c>
 8004410:	6820      	ldr	r0, [r4, #0]
 8004412:	4401      	add	r1, r0
 8004414:	1850      	adds	r0, r2, r1
 8004416:	4283      	cmp	r3, r0
 8004418:	6011      	str	r1, [r2, #0]
 800441a:	d1e0      	bne.n	80043de <_free_r+0x22>
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4401      	add	r1, r0
 8004422:	6011      	str	r1, [r2, #0]
 8004424:	6053      	str	r3, [r2, #4]
 8004426:	e7da      	b.n	80043de <_free_r+0x22>
 8004428:	d902      	bls.n	8004430 <_free_r+0x74>
 800442a:	230c      	movs	r3, #12
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	e7d6      	b.n	80043de <_free_r+0x22>
 8004430:	6820      	ldr	r0, [r4, #0]
 8004432:	1821      	adds	r1, r4, r0
 8004434:	428b      	cmp	r3, r1
 8004436:	bf01      	itttt	eq
 8004438:	6819      	ldreq	r1, [r3, #0]
 800443a:	685b      	ldreq	r3, [r3, #4]
 800443c:	1809      	addeq	r1, r1, r0
 800443e:	6021      	streq	r1, [r4, #0]
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	6054      	str	r4, [r2, #4]
 8004444:	e7cb      	b.n	80043de <_free_r+0x22>
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	2000030c 	.word	0x2000030c

0800444c <_read_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4604      	mov	r4, r0
 8004450:	4608      	mov	r0, r1
 8004452:	4611      	mov	r1, r2
 8004454:	2200      	movs	r2, #0
 8004456:	4d05      	ldr	r5, [pc, #20]	; (800446c <_read_r+0x20>)
 8004458:	602a      	str	r2, [r5, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	f7fc faf8 	bl	8000a50 <_read>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d102      	bne.n	800446a <_read_r+0x1e>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	b103      	cbz	r3, 800446a <_read_r+0x1e>
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	20000314 	.word	0x20000314

08004470 <_fstat_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	2300      	movs	r3, #0
 8004474:	4d06      	ldr	r5, [pc, #24]	; (8004490 <_fstat_r+0x20>)
 8004476:	4604      	mov	r4, r0
 8004478:	4608      	mov	r0, r1
 800447a:	4611      	mov	r1, r2
 800447c:	602b      	str	r3, [r5, #0]
 800447e:	f7fc fb2b 	bl	8000ad8 <_fstat>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	d102      	bne.n	800448c <_fstat_r+0x1c>
 8004486:	682b      	ldr	r3, [r5, #0]
 8004488:	b103      	cbz	r3, 800448c <_fstat_r+0x1c>
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	bd38      	pop	{r3, r4, r5, pc}
 800448e:	bf00      	nop
 8004490:	20000314 	.word	0x20000314

08004494 <_isatty_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	2300      	movs	r3, #0
 8004498:	4d05      	ldr	r5, [pc, #20]	; (80044b0 <_isatty_r+0x1c>)
 800449a:	4604      	mov	r4, r0
 800449c:	4608      	mov	r0, r1
 800449e:	602b      	str	r3, [r5, #0]
 80044a0:	f7fc fb29 	bl	8000af6 <_isatty>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d102      	bne.n	80044ae <_isatty_r+0x1a>
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	b103      	cbz	r3, 80044ae <_isatty_r+0x1a>
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	20000314 	.word	0x20000314

080044b4 <_init>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

080044c0 <_fini>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr
