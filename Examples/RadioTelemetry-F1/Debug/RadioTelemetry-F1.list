
RadioTelemetry-F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004424  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004658  08004658  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08004658  08004658  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004658  08004658  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08004660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200000e0  08004740  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004740  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d43  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c79  00000000  00000000  00027e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00029ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001812e  00000000  00000000  0002aa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ebd  00000000  00000000  00042b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f0e  00000000  00000000  0004ca3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ac  00000000  00000000  000d099c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004518 	.word	0x08004518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08004518 	.word	0x08004518

0800014c <Sensor_UART_Telemetry_Init>:
//	TELEMETRY_SYNC_SYNC0,
//	TELEMETRY_SYNC_SYNC1,
//	TELEMETRY_SYNC_SYNCED,
//	TELEMETRY_SYNC_VERIFIED} TELEMETRY_SYNC_STATES;

void Sensor_UART_Telemetry_Init(UART_HandleTypeDef *huart) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	  HAL_UART_RegisterCallback(huart, HAL_UART_RX_COMPLETE_CB_ID, Sensor_UART_RxComplete_Callback);
 8000154:	4a0d      	ldr	r2, [pc, #52]	; (800018c <Sensor_UART_Telemetry_Init+0x40>)
 8000156:	2103      	movs	r1, #3
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f002 fa85 	bl	8002668 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_TX_COMPLETE_CB_ID, Sensor_UART_TxComplete_Callback);
 800015e:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <Sensor_UART_Telemetry_Init+0x44>)
 8000160:	2101      	movs	r1, #1
 8000162:	6878      	ldr	r0, [r7, #4]
 8000164:	f002 fa80 	bl	8002668 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_ERROR_CB_ID, Sensor_UART_Error_Callback);
 8000168:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <Sensor_UART_Telemetry_Init+0x48>)
 800016a:	2104      	movs	r1, #4
 800016c:	6878      	ldr	r0, [r7, #4]
 800016e:	f002 fa7b 	bl	8002668 <HAL_UART_RegisterCallback>
	  HAL_HalfDuplex_EnableReceiver(huart);	// Enable USART1 Receive
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	f002 fe4c 	bl	8002e10 <HAL_HalfDuplex_EnableReceiver>
	  HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_RX_Buffer[0], 1);
 8000178:	2201      	movs	r2, #1
 800017a:	4907      	ldr	r1, [pc, #28]	; (8000198 <Sensor_UART_Telemetry_Init+0x4c>)
 800017c:	6878      	ldr	r0, [r7, #4]
 800017e:	f002 fb85 	bl	800288c <HAL_UART_Receive_DMA>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	080002f9 	.word	0x080002f9
 8000190:	080005c5 	.word	0x080005c5
 8000194:	080001ed 	.word	0x080001ed
 8000198:	200000fc 	.word	0x200000fc

0800019c <Servo_UART_Telemetry_Init>:

void Servo_UART_Telemetry_Init(UART_HandleTypeDef *huart) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	  HAL_UART_RegisterCallback(huart, HAL_UART_RX_COMPLETE_CB_ID, Servo_UART_RxComplete_Callback);
 80001a4:	4a0d      	ldr	r2, [pc, #52]	; (80001dc <Servo_UART_Telemetry_Init+0x40>)
 80001a6:	2103      	movs	r1, #3
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f002 fa5d 	bl	8002668 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_ERROR_CB_ID, Servo_UART_Error_Callback);
 80001ae:	4a0c      	ldr	r2, [pc, #48]	; (80001e0 <Servo_UART_Telemetry_Init+0x44>)
 80001b0:	2104      	movs	r1, #4
 80001b2:	6878      	ldr	r0, [r7, #4]
 80001b4:	f002 fa58 	bl	8002668 <HAL_UART_RegisterCallback>
	  HAL_HalfDuplex_EnableReceiver(huart);	// Enable USART2 Receive
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f002 fe29 	bl	8002e10 <HAL_HalfDuplex_EnableReceiver>
	  FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 80001be:	4a09      	ldr	r2, [pc, #36]	; (80001e4 <Servo_UART_Telemetry_Init+0x48>)
 80001c0:	7813      	ldrb	r3, [r2, #0]
 80001c2:	f36f 03c4 	bfc	r3, #3, #2
 80001c6:	7013      	strb	r3, [r2, #0]
	  HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_TX_Buffer[0], 1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	4907      	ldr	r1, [pc, #28]	; (80001e8 <Servo_UART_Telemetry_Init+0x4c>)
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f002 fb5d 	bl	800288c <HAL_UART_Receive_DMA>
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	08000601 	.word	0x08000601
 80001e0:	08000279 	.word	0x08000279
 80001e4:	20000148 	.word	0x20000148
 80001e8:	20000128 	.word	0x20000128

080001ec <Sensor_UART_Error_Callback>:


void Sensor_UART_Error_Callback(struct __UART_HandleTypeDef *huart){
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_PEFLAG(huart);
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	68fb      	ldr	r3, [r7, #12]
	HAL_UART_DMAStop(huart);
 800020a:	6878      	ldr	r0, [r7, #4]
 800020c:	f002 fb6e 	bl	80028ec <HAL_UART_DMAStop>
	HAL_UART_MspDeInit(huart);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 fe3b 	bl	8000e8c <HAL_UART_MspDeInit>
	HAL_UART_MspInit(huart);
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 fd46 	bl	8000ca8 <HAL_UART_MspInit>

	printf("USART1 error %ld DMA RX/TX error 0x%lx-0x%lx \r\n", HAL_UART_GetError(huart), HAL_DMA_GetError(&hdma_usart1_rx), HAL_DMA_GetError(&hdma_usart1_tx));
 800021c:	6878      	ldr	r0, [r7, #4]
 800021e:	f002 fe2a 	bl	8002e76 <HAL_UART_GetError>
 8000222:	4604      	mov	r4, r0
 8000224:	480f      	ldr	r0, [pc, #60]	; (8000264 <Sensor_UART_Error_Callback+0x78>)
 8000226:	f001 fb2b 	bl	8001880 <HAL_DMA_GetError>
 800022a:	4605      	mov	r5, r0
 800022c:	480e      	ldr	r0, [pc, #56]	; (8000268 <Sensor_UART_Error_Callback+0x7c>)
 800022e:	f001 fb27 	bl	8001880 <HAL_DMA_GetError>
 8000232:	4603      	mov	r3, r0
 8000234:	462a      	mov	r2, r5
 8000236:	4621      	mov	r1, r4
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <Sensor_UART_Error_Callback+0x80>)
 800023a:	f003 f9d9 	bl	80035f0 <iprintf>
	FLAGS.Transiever_RX_Sync = 0;
 800023e:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <Sensor_UART_Error_Callback+0x84>)
 8000240:	7813      	ldrb	r3, [r2, #0]
 8000242:	f36f 0382 	bfc	r3, #2, #1
 8000246:	7013      	strb	r3, [r2, #0]
	while(HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_RX_Buffer[0], 1) != HAL_OK);
 8000248:	bf00      	nop
 800024a:	2201      	movs	r2, #1
 800024c:	4909      	ldr	r1, [pc, #36]	; (8000274 <Sensor_UART_Error_Callback+0x88>)
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f002 fb1c 	bl	800288c <HAL_UART_Receive_DMA>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1f7      	bne.n	800024a <Sensor_UART_Error_Callback+0x5e>
}
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bdb0      	pop	{r4, r5, r7, pc}
 8000264:	20000238 	.word	0x20000238
 8000268:	2000027c 	.word	0x2000027c
 800026c:	08004530 	.word	0x08004530
 8000270:	20000148 	.word	0x20000148
 8000274:	200000fc 	.word	0x200000fc

08000278 <Servo_UART_Error_Callback>:

void Servo_UART_Error_Callback(struct __UART_HandleTypeDef *huart){
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
	HAL_UART_DMAStop(huart);
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f002 fb28 	bl	80028ec <HAL_UART_DMAStop>
	HAL_UART_MspDeInit(huart);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f000 fdf5 	bl	8000e8c <HAL_UART_MspDeInit>
	HAL_UART_MspInit(huart);
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f000 fd00 	bl	8000ca8 <HAL_UART_MspInit>
	printf("USART2 error %ld DMA error 0x%lx \r\n", HAL_UART_GetError(huart), HAL_DMA_GetError(&hdma_usart2_rx));
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f002 fde4 	bl	8002e76 <HAL_UART_GetError>
 80002ae:	4604      	mov	r4, r0
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <Servo_UART_Error_Callback+0x70>)
 80002b2:	f001 fae5 	bl	8001880 <HAL_DMA_GetError>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4621      	mov	r1, r4
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <Servo_UART_Error_Callback+0x74>)
 80002be:	f003 f997 	bl	80035f0 <iprintf>
	FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 80002c2:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <Servo_UART_Error_Callback+0x78>)
 80002c4:	7813      	ldrb	r3, [r2, #0]
 80002c6:	f36f 03c4 	bfc	r3, #3, #2
 80002ca:	7013      	strb	r3, [r2, #0]
	while(HAL_UART_Receive_DMA(huart, (uint8_t*) &Transiever_TX_Buffer[0], 1) != HAL_OK);
 80002cc:	bf00      	nop
 80002ce:	2201      	movs	r2, #1
 80002d0:	4908      	ldr	r1, [pc, #32]	; (80002f4 <Servo_UART_Error_Callback+0x7c>)
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f002 fada 	bl	800288c <HAL_UART_Receive_DMA>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f7      	bne.n	80002ce <Servo_UART_Error_Callback+0x56>
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd90      	pop	{r4, r7, pc}
 80002e8:	200002c0 	.word	0x200002c0
 80002ec:	08004560 	.word	0x08004560
 80002f0:	20000148 	.word	0x20000148
 80002f4:	20000128 	.word	0x20000128

080002f8 <Sensor_UART_RxComplete_Callback>:

void Sensor_UART_RxComplete_Callback(struct __UART_HandleTypeDef *huart){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	uint16_t t, chksum = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	81fb      	strh	r3, [r7, #14]

	if(!FLAGS.Transiever_RX_Sync) {
 8000304:	4b9b      	ldr	r3, [pc, #620]	; (8000574 <Sensor_UART_RxComplete_Callback+0x27c>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d12a      	bne.n	8000368 <Sensor_UART_RxComplete_Callback+0x70>
		FLAGS.Transiever_RX_Sync = Transiever_RX_Buffer[0] == SENSOR_HEADER;
 8000312:	4b99      	ldr	r3, [pc, #612]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b04      	cmp	r3, #4
 800031a:	bf0c      	ite	eq
 800031c:	2301      	moveq	r3, #1
 800031e:	2300      	movne	r3, #0
 8000320:	b2d9      	uxtb	r1, r3
 8000322:	4a94      	ldr	r2, [pc, #592]	; (8000574 <Sensor_UART_RxComplete_Callback+0x27c>)
 8000324:	7813      	ldrb	r3, [r2, #0]
 8000326:	f361 0382 	bfi	r3, r1, #2, #1
 800032a:	7013      	strb	r3, [r2, #0]
		if(!FLAGS.Transiever_RX_Sync) {
 800032c:	4b91      	ldr	r3, [pc, #580]	; (8000574 <Sensor_UART_RxComplete_Callback+0x27c>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d109      	bne.n	800034e <Sensor_UART_RxComplete_Callback+0x56>
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) &Transiever_RX_Buffer[0], 1) != HAL_OK);
 800033a:	bf00      	nop
 800033c:	2201      	movs	r2, #1
 800033e:	498e      	ldr	r1, [pc, #568]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 8000340:	488e      	ldr	r0, [pc, #568]	; (800057c <Sensor_UART_RxComplete_Callback+0x284>)
 8000342:	f002 faa3 	bl	800288c <HAL_UART_Receive_DMA>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d1f7      	bne.n	800033c <Sensor_UART_RxComplete_Callback+0x44>
		} else {
			Transiever_RX_Buffer[0] = SENSOR_HEADER;
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) &Transiever_RX_Buffer[1], 3) != HAL_OK);
		}
		return;
 800034c:	e133      	b.n	80005b6 <Sensor_UART_RxComplete_Callback+0x2be>
			Transiever_RX_Buffer[0] = SENSOR_HEADER;
 800034e:	4b8a      	ldr	r3, [pc, #552]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 8000350:	2204      	movs	r2, #4
 8000352:	701a      	strb	r2, [r3, #0]
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) &Transiever_RX_Buffer[1], 3) != HAL_OK);
 8000354:	bf00      	nop
 8000356:	2203      	movs	r2, #3
 8000358:	4989      	ldr	r1, [pc, #548]	; (8000580 <Sensor_UART_RxComplete_Callback+0x288>)
 800035a:	4888      	ldr	r0, [pc, #544]	; (800057c <Sensor_UART_RxComplete_Callback+0x284>)
 800035c:	f002 fa96 	bl	800288c <HAL_UART_Receive_DMA>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f7      	bne.n	8000356 <Sensor_UART_RxComplete_Callback+0x5e>
		return;
 8000366:	e126      	b.n	80005b6 <Sensor_UART_RxComplete_Callback+0x2be>
	} else {

		FLAGS.Transiever_RX_Sync = Transiever_RX_Buffer[0] == SENSOR_HEADER;
 8000368:	4b83      	ldr	r3, [pc, #524]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b04      	cmp	r3, #4
 8000370:	bf0c      	ite	eq
 8000372:	2301      	moveq	r3, #1
 8000374:	2300      	movne	r3, #0
 8000376:	b2d9      	uxtb	r1, r3
 8000378:	4a7e      	ldr	r2, [pc, #504]	; (8000574 <Sensor_UART_RxComplete_Callback+0x27c>)
 800037a:	7813      	ldrb	r3, [r2, #0]
 800037c:	f361 0382 	bfi	r3, r1, #2, #1
 8000380:	7013      	strb	r3, [r2, #0]
		if(!FLAGS.Transiever_RX_Sync) {
 8000382:	4b7c      	ldr	r3, [pc, #496]	; (8000574 <Sensor_UART_RxComplete_Callback+0x27c>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2b00      	cmp	r3, #0
 800038e:	d109      	bne.n	80003a4 <Sensor_UART_RxComplete_Callback+0xac>
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) &Transiever_RX_Buffer[0], 1) != HAL_OK);
 8000390:	bf00      	nop
 8000392:	2201      	movs	r2, #1
 8000394:	4978      	ldr	r1, [pc, #480]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 8000396:	4879      	ldr	r0, [pc, #484]	; (800057c <Sensor_UART_RxComplete_Callback+0x284>)
 8000398:	f002 fa78 	bl	800288c <HAL_UART_Receive_DMA>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1f7      	bne.n	8000392 <Sensor_UART_RxComplete_Callback+0x9a>
			return;
 80003a2:	e108      	b.n	80005b6 <Sensor_UART_RxComplete_Callback+0x2be>
		}

		uint8_t CHNL = (Transiever_RX_Buffer[1] & SENSOR_CHNL_MASK);
 80003a4:	4b74      	ldr	r3, [pc, #464]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 80003a6:	785b      	ldrb	r3, [r3, #1]
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	f003 030f 	and.w	r3, r3, #15
 80003ae:	737b      	strb	r3, [r7, #13]
		uint8_t SIZE = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	733b      	strb	r3, [r7, #12]

		if((CHNL <= NUM_SENSORS) && (CHNL > 0)) {
 80003b4:	7b7b      	ldrb	r3, [r7, #13]
 80003b6:	2b0e      	cmp	r3, #14
 80003b8:	d81d      	bhi.n	80003f6 <Sensor_UART_RxComplete_Callback+0xfe>
 80003ba:	7b7b      	ldrb	r3, [r7, #13]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d01a      	beq.n	80003f6 <Sensor_UART_RxComplete_Callback+0xfe>
			SIZE = (SensorList[CHNL-1].SensorType & 0x80) ? SENSOR_TX_BUF_SIZE_8 : SENSOR_TX_BUF_SIZE_6;
 80003c0:	7b7b      	ldrb	r3, [r7, #13]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	4a6f      	ldr	r2, [pc, #444]	; (8000584 <Sensor_UART_RxComplete_Callback+0x28c>)
 80003c6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80003ca:	b25b      	sxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	da01      	bge.n	80003d4 <Sensor_UART_RxComplete_Callback+0xdc>
 80003d0:	2308      	movs	r3, #8
 80003d2:	e000      	b.n	80003d6 <Sensor_UART_RxComplete_Callback+0xde>
 80003d4:	2306      	movs	r3, #6
 80003d6:	733b      	strb	r3, [r7, #12]
		} else {
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
			return;
		}

		switch(Transiever_RX_Buffer[1] & SENSOR_CMND_MASK) {
 80003d8:	4b67      	ldr	r3, [pc, #412]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 80003da:	785b      	ldrb	r3, [r3, #1]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003e2:	2ba0      	cmp	r3, #160	; 0xa0
 80003e4:	d04d      	beq.n	8000482 <Sensor_UART_RxComplete_Callback+0x18a>
 80003e6:	2ba0      	cmp	r3, #160	; 0xa0
 80003e8:	f300 80ba 	bgt.w	8000560 <Sensor_UART_RxComplete_Callback+0x268>
 80003ec:	2b80      	cmp	r3, #128	; 0x80
 80003ee:	d00c      	beq.n	800040a <Sensor_UART_RxComplete_Callback+0x112>
 80003f0:	2b90      	cmp	r3, #144	; 0x90
 80003f2:	d00f      	beq.n	8000414 <Sensor_UART_RxComplete_Callback+0x11c>
 80003f4:	e0b4      	b.n	8000560 <Sensor_UART_RxComplete_Callback+0x268>
			while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
 80003f6:	bf00      	nop
 80003f8:	2204      	movs	r2, #4
 80003fa:	495f      	ldr	r1, [pc, #380]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 80003fc:	485f      	ldr	r0, [pc, #380]	; (800057c <Sensor_UART_RxComplete_Callback+0x284>)
 80003fe:	f002 fa45 	bl	800288c <HAL_UART_Receive_DMA>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d1f7      	bne.n	80003f8 <Sensor_UART_RxComplete_Callback+0x100>
			return;
 8000408:	e0d5      	b.n	80005b6 <Sensor_UART_RxComplete_Callback+0x2be>
 800040a:	4b5b      	ldr	r3, [pc, #364]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 800040c:	681b      	ldr	r3, [r3, #0]
			case SENSOR_CMD_DSCVR:
				memcpy((uint8_t *) TX_Buffer, (uint8_t*) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE);
 800040e:	4a5e      	ldr	r2, [pc, #376]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 8000410:	6013      	str	r3, [r2, #0]
				break;
 8000412:	e0bb      	b.n	800058c <Sensor_UART_RxComplete_Callback+0x294>

			case SENSOR_CMD_TYPE:
				TX_Buffer[0] = SENSOR_TX_BUF_SIZE_6;
 8000414:	4b5c      	ldr	r3, [pc, #368]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 8000416:	2206      	movs	r2, #6
 8000418:	701a      	strb	r2, [r3, #0]
				chksum = TELM_CHECKSUM_CONST - SENSOR_TX_BUF_SIZE_6;
 800041a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 800041e:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[1] = t = Transiever_RX_Buffer[1];
 8000420:	4b55      	ldr	r3, [pc, #340]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 8000422:	785b      	ldrb	r3, [r3, #1]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	817b      	strh	r3, [r7, #10]
 8000428:	897b      	ldrh	r3, [r7, #10]
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b56      	ldr	r3, [pc, #344]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 800042e:	705a      	strb	r2, [r3, #1]
				chksum -= t;
 8000430:	89fa      	ldrh	r2, [r7, #14]
 8000432:	897b      	ldrh	r3, [r7, #10]
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[2] = t = SensorList[CHNL-1].SensorType;
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	3b01      	subs	r3, #1
 800043c:	4a51      	ldr	r2, [pc, #324]	; (8000584 <Sensor_UART_RxComplete_Callback+0x28c>)
 800043e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000442:	817b      	strh	r3, [r7, #10]
 8000444:	897b      	ldrh	r3, [r7, #10]
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b4f      	ldr	r3, [pc, #316]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 800044a:	709a      	strb	r2, [r3, #2]
				chksum -= t;
 800044c:	89fa      	ldrh	r2, [r7, #14]
 800044e:	897b      	ldrh	r3, [r7, #10]
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[3] = t = SIZE - 0x04;
 8000454:	7b3b      	ldrb	r3, [r7, #12]
 8000456:	b29b      	uxth	r3, r3
 8000458:	3b04      	subs	r3, #4
 800045a:	817b      	strh	r3, [r7, #10]
 800045c:	897b      	ldrh	r3, [r7, #10]
 800045e:	b2da      	uxtb	r2, r3
 8000460:	4b49      	ldr	r3, [pc, #292]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 8000462:	70da      	strb	r2, [r3, #3]
				chksum -= t;
 8000464:	89fa      	ldrh	r2, [r7, #14]
 8000466:	897b      	ldrh	r3, [r7, #10]
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[4] = chksum;
 800046c:	89fb      	ldrh	r3, [r7, #14]
 800046e:	b2da      	uxtb	r2, r3
 8000470:	4b45      	ldr	r3, [pc, #276]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 8000472:	711a      	strb	r2, [r3, #4]
				TX_Buffer[5] = chksum >> 8;
 8000474:	89fb      	ldrh	r3, [r7, #14]
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	b29b      	uxth	r3, r3
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b42      	ldr	r3, [pc, #264]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 800047e:	715a      	strb	r2, [r3, #5]
				break;
 8000480:	e084      	b.n	800058c <Sensor_UART_RxComplete_Callback+0x294>

			case SENSOR_CMD_MEAS:
				TX_Buffer[0] = SIZE;
 8000482:	4a41      	ldr	r2, [pc, #260]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 8000484:	7b3b      	ldrb	r3, [r7, #12]
 8000486:	7013      	strb	r3, [r2, #0]
				chksum = TELM_CHECKSUM_CONST - SIZE;
 8000488:	7b3b      	ldrb	r3, [r7, #12]
 800048a:	b29b      	uxth	r3, r3
 800048c:	43db      	mvns	r3, r3
 800048e:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[1] = t = Transiever_RX_Buffer[1];
 8000490:	4b39      	ldr	r3, [pc, #228]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 8000492:	785b      	ldrb	r3, [r3, #1]
 8000494:	b2db      	uxtb	r3, r3
 8000496:	817b      	strh	r3, [r7, #10]
 8000498:	897b      	ldrh	r3, [r7, #10]
 800049a:	b2da      	uxtb	r2, r3
 800049c:	4b3a      	ldr	r3, [pc, #232]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 800049e:	705a      	strb	r2, [r3, #1]
				chksum -= t;
 80004a0:	89fa      	ldrh	r2, [r7, #14]
 80004a2:	897b      	ldrh	r3, [r7, #10]
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[2] = t = (uint8_t) (SensorList[CHNL-1].SensorMeas);
 80004a8:	7b7b      	ldrb	r3, [r7, #13]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a35      	ldr	r2, [pc, #212]	; (8000584 <Sensor_UART_RxComplete_Callback+0x28c>)
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	4413      	add	r3, r2
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	817b      	strh	r3, [r7, #10]
 80004b8:	897b      	ldrh	r3, [r7, #10]
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b32      	ldr	r3, [pc, #200]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 80004be:	709a      	strb	r2, [r3, #2]
				chksum -= t;
 80004c0:	89fa      	ldrh	r2, [r7, #14]
 80004c2:	897b      	ldrh	r3, [r7, #10]
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	81fb      	strh	r3, [r7, #14]
				TX_Buffer[3] = t = (uint8_t) (SensorList[CHNL-1].SensorMeas >> 8);
 80004c8:	7b7b      	ldrb	r3, [r7, #13]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	4a2d      	ldr	r2, [pc, #180]	; (8000584 <Sensor_UART_RxComplete_Callback+0x28c>)
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	4413      	add	r3, r2
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	121b      	asrs	r3, r3, #8
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	817b      	strh	r3, [r7, #10]
 80004da:	897b      	ldrh	r3, [r7, #10]
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 80004e0:	70da      	strb	r2, [r3, #3]
				chksum -= t;
 80004e2:	89fa      	ldrh	r2, [r7, #14]
 80004e4:	897b      	ldrh	r3, [r7, #10]
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	81fb      	strh	r3, [r7, #14]
				if(SIZE == SENSOR_TX_BUF_SIZE_6) {
 80004ea:	7b3b      	ldrb	r3, [r7, #12]
 80004ec:	2b06      	cmp	r3, #6
 80004ee:	d10a      	bne.n	8000506 <Sensor_UART_RxComplete_Callback+0x20e>
					TX_Buffer[4] = chksum;
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 80004f6:	711a      	strb	r2, [r3, #4]
					TX_Buffer[5] = chksum >> 8;
 80004f8:	89fb      	ldrh	r3, [r7, #14]
 80004fa:	0a1b      	lsrs	r3, r3, #8
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 8000502:	715a      	strb	r2, [r3, #5]
					chksum -= t;

					TX_Buffer[6] = chksum;
					TX_Buffer[7] = chksum >> 8;
				}
				break;
 8000504:	e042      	b.n	800058c <Sensor_UART_RxComplete_Callback+0x294>
					TX_Buffer[4] = t = (uint8_t) (SensorList[CHNL-1].SensorMeas >> 16);
 8000506:	7b7b      	ldrb	r3, [r7, #13]
 8000508:	3b01      	subs	r3, #1
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <Sensor_UART_RxComplete_Callback+0x28c>)
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	4413      	add	r3, r2
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	141b      	asrs	r3, r3, #16
 8000514:	b2db      	uxtb	r3, r3
 8000516:	817b      	strh	r3, [r7, #10]
 8000518:	897b      	ldrh	r3, [r7, #10]
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 800051e:	711a      	strb	r2, [r3, #4]
					chksum -= t;
 8000520:	89fa      	ldrh	r2, [r7, #14]
 8000522:	897b      	ldrh	r3, [r7, #10]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	81fb      	strh	r3, [r7, #14]
					TX_Buffer[5] = t = (uint8_t) (SensorList[CHNL-1].SensorMeas >> 24);
 8000528:	7b7b      	ldrb	r3, [r7, #13]
 800052a:	3b01      	subs	r3, #1
 800052c:	4a15      	ldr	r2, [pc, #84]	; (8000584 <Sensor_UART_RxComplete_Callback+0x28c>)
 800052e:	00db      	lsls	r3, r3, #3
 8000530:	4413      	add	r3, r2
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	161b      	asrs	r3, r3, #24
 8000536:	b2db      	uxtb	r3, r3
 8000538:	817b      	strh	r3, [r7, #10]
 800053a:	897b      	ldrh	r3, [r7, #10]
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 8000540:	715a      	strb	r2, [r3, #5]
					chksum -= t;
 8000542:	89fa      	ldrh	r2, [r7, #14]
 8000544:	897b      	ldrh	r3, [r7, #10]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	81fb      	strh	r3, [r7, #14]
					TX_Buffer[6] = chksum;
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 8000550:	719a      	strb	r2, [r3, #6]
					TX_Buffer[7] = chksum >> 8;
 8000552:	89fb      	ldrh	r3, [r7, #14]
 8000554:	0a1b      	lsrs	r3, r3, #8
 8000556:	b29b      	uxth	r3, r3
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <Sensor_UART_RxComplete_Callback+0x290>)
 800055c:	71da      	strb	r2, [r3, #7]
				break;
 800055e:	e015      	b.n	800058c <Sensor_UART_RxComplete_Callback+0x294>

			default:
				while(HAL_UART_Receive_DMA(&huart1, (uint8_t *) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
 8000560:	bf00      	nop
 8000562:	2204      	movs	r2, #4
 8000564:	4904      	ldr	r1, [pc, #16]	; (8000578 <Sensor_UART_RxComplete_Callback+0x280>)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <Sensor_UART_RxComplete_Callback+0x284>)
 8000568:	f002 f990 	bl	800288c <HAL_UART_Receive_DMA>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1f7      	bne.n	8000562 <Sensor_UART_RxComplete_Callback+0x26a>
				return;
 8000572:	e020      	b.n	80005b6 <Sensor_UART_RxComplete_Callback+0x2be>
 8000574:	20000148 	.word	0x20000148
 8000578:	200000fc 	.word	0x200000fc
 800057c:	20000150 	.word	0x20000150
 8000580:	200000fd 	.word	0x200000fd
 8000584:	20000000 	.word	0x20000000
 8000588:	20000100 	.word	0x20000100
		}

			while(HAL_HalfDuplex_EnableTransmitter(&huart1) != HAL_OK);
 800058c:	bf00      	nop
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <Sensor_UART_RxComplete_Callback+0x2c4>)
 8000590:	f002 fc0b 	bl	8002daa <HAL_HalfDuplex_EnableTransmitter>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f9      	bne.n	800058e <Sensor_UART_RxComplete_Callback+0x296>
			while(HAL_UART_Transmit_DMA(&huart1, (uint8_t *) TX_Buffer, TX_Buffer[0]) != HAL_OK);
 800059a:	bf00      	nop
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <Sensor_UART_RxComplete_Callback+0x2c8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	4906      	ldr	r1, [pc, #24]	; (80005c0 <Sensor_UART_RxComplete_Callback+0x2c8>)
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <Sensor_UART_RxComplete_Callback+0x2c4>)
 80005aa:	f002 f903 	bl	80027b4 <HAL_UART_Transmit_DMA>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f3      	bne.n	800059c <Sensor_UART_RxComplete_Callback+0x2a4>
			return;
 80005b4:	bf00      	nop
	}
}
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000150 	.word	0x20000150
 80005c0:	20000100 	.word	0x20000100

080005c4 <Sensor_UART_TxComplete_Callback>:

void Sensor_UART_TxComplete_Callback(struct __UART_HandleTypeDef *huart){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	while(HAL_HalfDuplex_EnableReceiver(&huart1) != HAL_OK);
 80005cc:	bf00      	nop
 80005ce:	480a      	ldr	r0, [pc, #40]	; (80005f8 <Sensor_UART_TxComplete_Callback+0x34>)
 80005d0:	f002 fc1e 	bl	8002e10 <HAL_HalfDuplex_EnableReceiver>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f9      	bne.n	80005ce <Sensor_UART_TxComplete_Callback+0xa>
	while(HAL_UART_Receive_DMA(&huart1, (uint8_t*) Transiever_RX_Buffer, SENSOR_BUFFER_SIZE) != HAL_OK);
 80005da:	bf00      	nop
 80005dc:	2204      	movs	r2, #4
 80005de:	4907      	ldr	r1, [pc, #28]	; (80005fc <Sensor_UART_TxComplete_Callback+0x38>)
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <Sensor_UART_TxComplete_Callback+0x34>)
 80005e2:	f002 f953 	bl	800288c <HAL_UART_Receive_DMA>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f7      	bne.n	80005dc <Sensor_UART_TxComplete_Callback+0x18>
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000150 	.word	0x20000150
 80005fc:	200000fc 	.word	0x200000fc

08000600 <Servo_UART_RxComplete_Callback>:

void Servo_UART_RxComplete_Callback(struct __UART_HandleTypeDef *huart){
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint16_t t, chksum = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	817b      	strh	r3, [r7, #10]

	switch (FLAGS.TELEMETRY_SYNC_STATES) {
 800060c:	4b53      	ldr	r3, [pc, #332]	; (800075c <Servo_UART_RxComplete_Callback+0x15c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b03      	cmp	r3, #3
 8000618:	d032      	beq.n	8000680 <Servo_UART_RxComplete_Callback+0x80>
 800061a:	2b03      	cmp	r3, #3
 800061c:	dc03      	bgt.n	8000626 <Servo_UART_RxComplete_Callback+0x26>
 800061e:	2b01      	cmp	r3, #1
 8000620:	d012      	beq.n	8000648 <Servo_UART_RxComplete_Callback+0x48>
 8000622:	2b02      	cmp	r3, #2
 8000624:	d041      	beq.n	80006aa <Servo_UART_RxComplete_Callback+0xaa>
		case TELEMETRY_SYNC_SYNC0:
			if(Transiever_TX_Buffer[0] == SERVO_HEADER_1) {
 8000626:	4b4e      	ldr	r3, [pc, #312]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b20      	cmp	r3, #32
 800062e:	d105      	bne.n	800063c <Servo_UART_RxComplete_Callback+0x3c>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC1;
 8000630:	4a4a      	ldr	r2, [pc, #296]	; (800075c <Servo_UART_RxComplete_Callback+0x15c>)
 8000632:	7813      	ldrb	r3, [r2, #0]
 8000634:	2101      	movs	r1, #1
 8000636:	f361 03c4 	bfi	r3, r1, #3, #2
 800063a:	7013      	strb	r3, [r2, #0]
			}
			HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[1], 1);
 800063c:	2201      	movs	r2, #1
 800063e:	4949      	ldr	r1, [pc, #292]	; (8000764 <Servo_UART_RxComplete_Callback+0x164>)
 8000640:	4849      	ldr	r0, [pc, #292]	; (8000768 <Servo_UART_RxComplete_Callback+0x168>)
 8000642:	f002 f923 	bl	800288c <HAL_UART_Receive_DMA>
			break;
 8000646:	e084      	b.n	8000752 <Servo_UART_RxComplete_Callback+0x152>

		case TELEMETRY_SYNC_SYNC1:
			if(Transiever_TX_Buffer[1] == SERVO_HEADER_2) {
 8000648:	4b45      	ldr	r3, [pc, #276]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b40      	cmp	r3, #64	; 0x40
 8000650:	d10b      	bne.n	800066a <Servo_UART_RxComplete_Callback+0x6a>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNCED;
 8000652:	4a42      	ldr	r2, [pc, #264]	; (800075c <Servo_UART_RxComplete_Callback+0x15c>)
 8000654:	7813      	ldrb	r3, [r2, #0]
 8000656:	2102      	movs	r1, #2
 8000658:	f361 03c4 	bfi	r3, r1, #3, #2
 800065c:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[2], SERVO_BUFFER_SIZE-2);
 800065e:	221e      	movs	r2, #30
 8000660:	4942      	ldr	r1, [pc, #264]	; (800076c <Servo_UART_RxComplete_Callback+0x16c>)
 8000662:	4841      	ldr	r0, [pc, #260]	; (8000768 <Servo_UART_RxComplete_Callback+0x168>)
 8000664:	f002 f912 	bl	800288c <HAL_UART_Receive_DMA>
			} else {
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
			}
			break;
 8000668:	e073      	b.n	8000752 <Servo_UART_RxComplete_Callback+0x152>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 800066a:	4a3c      	ldr	r2, [pc, #240]	; (800075c <Servo_UART_RxComplete_Callback+0x15c>)
 800066c:	7813      	ldrb	r3, [r2, #0]
 800066e:	f36f 03c4 	bfc	r3, #3, #2
 8000672:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
 8000674:	2201      	movs	r2, #1
 8000676:	493a      	ldr	r1, [pc, #232]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 8000678:	483b      	ldr	r0, [pc, #236]	; (8000768 <Servo_UART_RxComplete_Callback+0x168>)
 800067a:	f002 f907 	bl	800288c <HAL_UART_Receive_DMA>
			break;
 800067e:	e068      	b.n	8000752 <Servo_UART_RxComplete_Callback+0x152>

		case TELEMETRY_SYNC_VERIFIED:
			if((Transiever_TX_Buffer[0] != SERVO_HEADER_1) || (Transiever_TX_Buffer[1] != SERVO_HEADER_2)) {
 8000680:	4b37      	ldr	r3, [pc, #220]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b20      	cmp	r3, #32
 8000688:	d104      	bne.n	8000694 <Servo_UART_RxComplete_Callback+0x94>
 800068a:	4b35      	ldr	r3, [pc, #212]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 800068c:	785b      	ldrb	r3, [r3, #1]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b40      	cmp	r3, #64	; 0x40
 8000692:	d00a      	beq.n	80006aa <Servo_UART_RxComplete_Callback+0xaa>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 8000694:	4a31      	ldr	r2, [pc, #196]	; (800075c <Servo_UART_RxComplete_Callback+0x15c>)
 8000696:	7813      	ldrb	r3, [r2, #0]
 8000698:	f36f 03c4 	bfc	r3, #3, #2
 800069c:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
 800069e:	2201      	movs	r2, #1
 80006a0:	492f      	ldr	r1, [pc, #188]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 80006a2:	4831      	ldr	r0, [pc, #196]	; (8000768 <Servo_UART_RxComplete_Callback+0x168>)
 80006a4:	f002 f8f2 	bl	800288c <HAL_UART_Receive_DMA>
				break;
 80006a8:	e053      	b.n	8000752 <Servo_UART_RxComplete_Callback+0x152>
			}
		case TELEMETRY_SYNC_SYNCED:
			t = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	81fb      	strh	r3, [r7, #14]
			for(uint8_t i = 0; i < SERVO_BUFFER_SIZE-2; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	737b      	strb	r3, [r7, #13]
 80006b2:	e00a      	b.n	80006ca <Servo_UART_RxComplete_Callback+0xca>
				t += Transiever_TX_Buffer[i];
 80006b4:	7b7b      	ldrb	r3, [r7, #13]
 80006b6:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 80006b8:	5cd3      	ldrb	r3, [r2, r3]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	b29a      	uxth	r2, r3
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	4413      	add	r3, r2
 80006c2:	81fb      	strh	r3, [r7, #14]
			for(uint8_t i = 0; i < SERVO_BUFFER_SIZE-2; i++)
 80006c4:	7b7b      	ldrb	r3, [r7, #13]
 80006c6:	3301      	adds	r3, #1
 80006c8:	737b      	strb	r3, [r7, #13]
 80006ca:	7b7b      	ldrb	r3, [r7, #13]
 80006cc:	2b1d      	cmp	r3, #29
 80006ce:	d9f1      	bls.n	80006b4 <Servo_UART_RxComplete_Callback+0xb4>

			t = TELM_CHECKSUM_CONST-t;
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	43db      	mvns	r3, r3
 80006d4:	81fb      	strh	r3, [r7, #14]
			chksum = (Transiever_TX_Buffer[31]<<8 | Transiever_TX_Buffer[30]);
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 80006d8:	7fdb      	ldrb	r3, [r3, #31]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	b21a      	sxth	r2, r3
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 80006e2:	7f9b      	ldrb	r3, [r3, #30]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	817b      	strh	r3, [r7, #10]
			if(t == chksum) {
 80006ee:	89fa      	ldrh	r2, [r7, #14]
 80006f0:	897b      	ldrh	r3, [r7, #10]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d122      	bne.n	800073c <Servo_UART_RxComplete_Callback+0x13c>
				memcpy(&ServoList, (uint8_t *) Transiever_TX_Buffer, SERVO_BUFFER_SIZE);
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <Servo_UART_RxComplete_Callback+0x170>)
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 80006fa:	4614      	mov	r4, r2
 80006fc:	461d      	mov	r5, r3
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000706:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				FLAGS.FAIL_SAFE = (ServoList.Channel_11 > 1975);
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <Servo_UART_RxComplete_Callback+0x170>)
 800070c:	8adb      	ldrh	r3, [r3, #22]
 800070e:	f240 72b7 	movw	r2, #1975	; 0x7b7
 8000712:	4293      	cmp	r3, r2
 8000714:	bf8c      	ite	hi
 8000716:	2301      	movhi	r3, #1
 8000718:	2300      	movls	r3, #0
 800071a:	b2d9      	uxtb	r1, r3
 800071c:	4a0f      	ldr	r2, [pc, #60]	; (800075c <Servo_UART_RxComplete_Callback+0x15c>)
 800071e:	7813      	ldrb	r3, [r2, #0]
 8000720:	f361 0341 	bfi	r3, r1, #1, #1
 8000724:	7013      	strb	r3, [r2, #0]
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_VERIFIED;
 8000726:	4a0d      	ldr	r2, [pc, #52]	; (800075c <Servo_UART_RxComplete_Callback+0x15c>)
 8000728:	7813      	ldrb	r3, [r2, #0]
 800072a:	f043 0318 	orr.w	r3, r3, #24
 800072e:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], SERVO_BUFFER_SIZE);
 8000730:	2220      	movs	r2, #32
 8000732:	490b      	ldr	r1, [pc, #44]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <Servo_UART_RxComplete_Callback+0x168>)
 8000736:	f002 f8a9 	bl	800288c <HAL_UART_Receive_DMA>
			} else {
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
			}
			break;
 800073a:	e009      	b.n	8000750 <Servo_UART_RxComplete_Callback+0x150>
				FLAGS.TELEMETRY_SYNC_STATES = TELEMETRY_SYNC_SYNC0;
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <Servo_UART_RxComplete_Callback+0x15c>)
 800073e:	7813      	ldrb	r3, [r2, #0]
 8000740:	f36f 03c4 	bfc	r3, #3, #2
 8000744:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_DMA(&huart2, (uint8_t *) &Transiever_TX_Buffer[0], 1);
 8000746:	2201      	movs	r2, #1
 8000748:	4905      	ldr	r1, [pc, #20]	; (8000760 <Servo_UART_RxComplete_Callback+0x160>)
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <Servo_UART_RxComplete_Callback+0x168>)
 800074c:	f002 f89e 	bl	800288c <HAL_UART_Receive_DMA>
			break;
 8000750:	bf00      	nop
	}
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bdb0      	pop	{r4, r5, r7, pc}
 800075a:	bf00      	nop
 800075c:	20000148 	.word	0x20000148
 8000760:	20000128 	.word	0x20000128
 8000764:	20000129 	.word	0x20000129
 8000768:	200001c4 	.word	0x200001c4
 800076c:	2000012a 	.word	0x2000012a
 8000770:	20000108 	.word	0x20000108

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_DMA_Init+0x58>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_DMA_Init+0x58>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_DMA_Init+0x58>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	200e      	movs	r0, #14
 8000798:	f000 fd61 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800079c:	200e      	movs	r0, #14
 800079e:	f000 fd7a 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	200f      	movs	r0, #15
 80007a8:	f000 fd59 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007ac:	200f      	movs	r0, #15
 80007ae:	f000 fd72 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2010      	movs	r0, #16
 80007b8:	f000 fd51 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007bc:	2010      	movs	r0, #16
 80007be:	f000 fd6a 	bl	8001296 <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_GPIO_Init+0x58>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_GPIO_Init+0x58>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_GPIO_Init+0x58>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0320 	and.w	r3, r3, #32
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_GPIO_Init+0x58>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <MX_GPIO_Init+0x58>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_GPIO_Init+0x58>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_GPIO_Init+0x58>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <MX_GPIO_Init+0x58>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <MX_GPIO_Init+0x58>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000

0800082c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000834:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000838:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	2b00      	cmp	r3, #0
 8000842:	d013      	beq.n	800086c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000844:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000848:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800084c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00b      	beq.n	800086c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000854:	e000      	b.n	8000858 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000856:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000858:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f9      	beq.n	8000856 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000862:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800086c:	687b      	ldr	r3, [r7, #4]
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 fb6d 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f83d 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f7ff ffa3 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800088a:	f7ff ff73 	bl	8000774 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800088e:	f000 f9b7 	bl	8000c00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000892:	f000 f9df 	bl	8000c54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Sensor_UART_Telemetry_Init(&huart1);
 8000896:	4814      	ldr	r0, [pc, #80]	; (80008e8 <main+0x70>)
 8000898:	f7ff fc58 	bl	800014c <Sensor_UART_Telemetry_Init>
  Servo_UART_Telemetry_Init(&huart2);
 800089c:	4813      	ldr	r0, [pc, #76]	; (80008ec <main+0x74>)
 800089e:	f7ff fc7d 	bl	800019c <Servo_UART_Telemetry_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("%ld: ", HAL_GetTick());
 80008a2:	f000 fbb3 	bl	800100c <HAL_GetTick>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4619      	mov	r1, r3
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <main+0x78>)
 80008ac:	f002 fea0 	bl	80035f0 <iprintf>
	  for(uint8_t i = 1; i <= NUM_SENSORS; i++)
 80008b0:	2301      	movs	r3, #1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	e00b      	b.n	80008ce <main+0x56>
		  printf("%d\t", (uint16_t) *(((uint16_t*) &ServoList)+i) );
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <main+0x7c>)
 80008bc:	4413      	add	r3, r2
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <main+0x80>)
 80008c4:	f002 fe94 	bl	80035f0 <iprintf>
	  for(uint8_t i = 1; i <= NUM_SENSORS; i++)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	3301      	adds	r3, #1
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b0e      	cmp	r3, #14
 80008d2:	d9f0      	bls.n	80008b6 <main+0x3e>
	  printf("\t%d\n", sizeof(FLAGS));
 80008d4:	2101      	movs	r1, #1
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <main+0x84>)
 80008d8:	f002 fe8a 	bl	80035f0 <iprintf>

	  HAL_Delay(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e0:	f000 fb9e 	bl	8001020 <HAL_Delay>
	  printf("%ld: ", HAL_GetTick());
 80008e4:	e7dd      	b.n	80008a2 <main+0x2a>
 80008e6:	bf00      	nop
 80008e8:	20000150 	.word	0x20000150
 80008ec:	200001c4 	.word	0x200001c4
 80008f0:	08004584 	.word	0x08004584
 80008f4:	20000108 	.word	0x20000108
 80008f8:	0800458c 	.word	0x0800458c
 80008fc:	08004590 	.word	0x08004590

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b090      	sub	sp, #64	; 0x40
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0318 	add.w	r3, r7, #24
 800090a:	2228      	movs	r2, #40	; 0x28
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f002 fe66 	bl	80035e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800093e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fa11 	bl	8001d70 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000954:	f000 f826 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2102      	movs	r1, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fc7e 	bl	8002274 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800097e:	f000 f811 	bl	80009a4 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3740      	adds	r7, #64	; 0x40
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <__io_putchar>:

/* USER CODE BEGIN 4 */

// ITM SWO Printf Implementation
int __io_putchar(int ch)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff49 	bl	800082c <ITM_SendChar>
	return(ch);
 800099a:	687b      	ldr	r3, [r7, #4]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_MspInit+0x5c>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <HAL_MspInit+0x5c>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x5c>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x5c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x5c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x5c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_MspInit+0x60>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_MspInit+0x60>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010000 	.word	0x40010000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 fac5 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <DMA1_Channel4_IRQHandler+0x10>)
 8000a6a:	f000 fe03 	bl	8001674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000027c 	.word	0x2000027c

08000a78 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <DMA1_Channel5_IRQHandler+0x10>)
 8000a7e:	f000 fdf9 	bl	8001674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000238 	.word	0x20000238

08000a8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <DMA1_Channel6_IRQHandler+0x10>)
 8000a92:	f000 fdef 	bl	8001674 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200002c0 	.word	0x200002c0

08000aa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <USART1_IRQHandler+0x10>)
 8000aa6:	f001 ff7d 	bl	80029a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000150 	.word	0x20000150

08000ab4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e00a      	b.n	8000adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ac6:	f3af 8000 	nop.w
 8000aca:	4601      	mov	r1, r0
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	b2ca      	uxtb	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf0      	blt.n	8000ac6 <_read+0x12>
	}

return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e009      	b.n	8000b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff3e 	bl	800098a <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf1      	blt.n	8000b00 <_write+0x12>
	}
	return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:

int _close(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4c:	605a      	str	r2, [r3, #4]
	return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <_isatty>:

int _isatty(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	return 1;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
	return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
	...

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f002 fce8 	bl	800358c <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <_sbrk+0x64>)
 8000bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20005000 	.word	0x20005000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	2000014c 	.word	0x2000014c
 8000bf0:	20000318 	.word	0x20000318

08000bf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART1_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c38:	f001 fcb4 	bl	80025a4 <HAL_HalfDuplex_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f7ff feaf 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000150 	.word	0x20000150
 8000c50:	40013800 	.word	0x40013800

08000c54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <MX_USART2_UART_Init+0x50>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	f001 fc8a 	bl	80025a4 <HAL_HalfDuplex_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c96:	f7ff fe85 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001c4 	.word	0x200001c4
 8000ca4:	40004400 	.word	0x40004400

08000ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a68      	ldr	r2, [pc, #416]	; (8000e64 <HAL_UART_MspInit+0x1bc>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d179      	bne.n	8000dbc <HAL_UART_MspInit+0x114>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc8:	4b67      	ldr	r3, [pc, #412]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a66      	ldr	r2, [pc, #408]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b64      	ldr	r3, [pc, #400]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b61      	ldr	r3, [pc, #388]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a60      	ldr	r2, [pc, #384]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b5e      	ldr	r3, [pc, #376]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfe:	2312      	movs	r3, #18
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4857      	ldr	r0, [pc, #348]	; (8000e6c <HAL_UART_MspInit+0x1c4>)
 8000d0e:	f000 fdef 	bl	80018f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d12:	4b57      	ldr	r3, [pc, #348]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d14:	4a57      	ldr	r2, [pc, #348]	; (8000e74 <HAL_UART_MspInit+0x1cc>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d18:	4b55      	ldr	r3, [pc, #340]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1e:	4b54      	ldr	r3, [pc, #336]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d24:	4b52      	ldr	r3, [pc, #328]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2a:	4b51      	ldr	r3, [pc, #324]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d30:	4b4f      	ldr	r3, [pc, #316]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d36:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3c:	4b4c      	ldr	r3, [pc, #304]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d42:	484b      	ldr	r0, [pc, #300]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d44:	f000 fad0 	bl	80012e8 <HAL_DMA_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 8000d4e:	f7ff fe29 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a46      	ldr	r2, [pc, #280]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
 8000d58:	4a45      	ldr	r2, [pc, #276]	; (8000e70 <HAL_UART_MspInit+0x1c8>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d5e:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000d60:	4a46      	ldr	r2, [pc, #280]	; (8000e7c <HAL_UART_MspInit+0x1d4>)
 8000d62:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d64:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d70:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d76:	4b40      	ldr	r3, [pc, #256]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d7c:	4b3e      	ldr	r3, [pc, #248]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d88:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d8e:	483a      	ldr	r0, [pc, #232]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000d90:	f000 faaa 	bl	80012e8 <HAL_DMA_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000d9a:	f7ff fe03 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a35      	ldr	r2, [pc, #212]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34
 8000da4:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <HAL_UART_MspInit+0x1d0>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2025      	movs	r0, #37	; 0x25
 8000db0:	f000 fa55 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000db4:	2025      	movs	r0, #37	; 0x25
 8000db6:	f000 fa6e 	bl	8001296 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dba:	e04e      	b.n	8000e5a <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a2f      	ldr	r2, [pc, #188]	; (8000e80 <HAL_UART_MspInit+0x1d8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d149      	bne.n	8000e5a <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6193      	str	r3, [r2, #24]
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_UART_MspInit+0x1c0>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df6:	2304      	movs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0318 	add.w	r3, r7, #24
 8000e06:	4619      	mov	r1, r3
 8000e08:	4818      	ldr	r0, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0x1c4>)
 8000e0a:	f000 fd71 	bl	80018f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e10:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0x1e0>)
 8000e12:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e40:	f000 fa52 	bl	80012e8 <HAL_DMA_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8000e4a:	f7ff fdab 	bl	80009a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_UART_MspInit+0x1dc>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	20000238 	.word	0x20000238
 8000e74:	40020058 	.word	0x40020058
 8000e78:	2000027c 	.word	0x2000027c
 8000e7c:	40020044 	.word	0x40020044
 8000e80:	40004400 	.word	0x40004400
 8000e84:	200002c0 	.word	0x200002c0
 8000e88:	4002006c 	.word	0x4002006c

08000e8c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_UART_MspDeInit+0x74>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d118      	bne.n	8000ed0 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_UART_MspDeInit+0x78>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <HAL_UART_MspDeInit+0x78>)
 8000ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ea8:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8000eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eae:	4816      	ldr	r0, [pc, #88]	; (8000f08 <HAL_UART_MspDeInit+0x7c>)
 8000eb0:	f000 fea2 	bl	8001bf8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fa6f 	bl	800139c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fa6a 	bl	800139c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000ec8:	2025      	movs	r0, #37	; 0x25
 8000eca:	f000 f9f2 	bl	80012b2 <HAL_NVIC_DisableIRQ>
    HAL_DMA_DeInit(uartHandle->hdmarx);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000ece:	e013      	b.n	8000ef8 <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <HAL_UART_MspDeInit+0x80>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10e      	bne.n	8000ef8 <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_UART_MspDeInit+0x78>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <HAL_UART_MspDeInit+0x78>)
 8000ee0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000ee4:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <HAL_UART_MspDeInit+0x7c>)
 8000eea:	f000 fe85 	bl	8001bf8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fa52 	bl	800139c <HAL_DMA_DeInit>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40013800 	.word	0x40013800
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	40004400 	.word	0x40004400

08000f10 <Reset_Handler>:
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <LoopFillZerobss+0x12>)
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <LoopFillZerobss+0x1a>)
 8000f16:	2300      	movs	r3, #0
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:
 8000f1a:	58d4      	ldr	r4, [r2, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:
 8000f20:	18c4      	adds	r4, r0, r3
 8000f22:	428c      	cmp	r4, r1
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <LoopFillZerobss+0x1e>)
 8000f28:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <LoopFillZerobss+0x22>)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:
 8000f32:	42a2      	cmp	r2, r4
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>
 8000f36:	f7ff fe5d 	bl	8000bf4 <SystemInit>
 8000f3a:	f002 fb2d 	bl	8003598 <__libc_init_array>
 8000f3e:	f7ff fc9b 	bl	8000878 <main>
 8000f42:	4770      	bx	lr
 8000f44:	20000000 	.word	0x20000000
 8000f48:	200000e0 	.word	0x200000e0
 8000f4c:	08004660 	.word	0x08004660
 8000f50:	200000e0 	.word	0x200000e0
 8000f54:	20000318 	.word	0x20000318

08000f58 <ADC1_2_IRQHandler>:
 8000f58:	e7fe      	b.n	8000f58 <ADC1_2_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x28>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x28>)
 8000f66:	f043 0310 	orr.w	r3, r3, #16
 8000f6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f96b 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fd1a 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40022000 	.word	0x40022000

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f991 	bl	80012ce <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 f94b 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000070 	.word	0x20000070
 8000fe0:	20000078 	.word	0x20000078
 8000fe4:	20000074 	.word	0x20000074

08000fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x1c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_IncTick+0x20>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a03      	ldr	r2, [pc, #12]	; (8001008 <HAL_IncTick+0x20>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000078 	.word	0x20000078
 8001008:	20000304 	.word	0x20000304

0800100c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <HAL_GetTick+0x10>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	20000304 	.word	0x20000304

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff fff0 	bl	800100c <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffe0 	bl	800100c <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000078 	.word	0x20000078

08001068 <__NVIC_SetPriorityGrouping>:
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4906      	ldr	r1, [pc, #24]	; (8001100 <__NVIC_EnableIRQ+0x34>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_DisableIRQ>:
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	db12      	blt.n	800113c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 021f 	and.w	r2, r3, #31
 800111c:	490a      	ldr	r1, [pc, #40]	; (8001148 <__NVIC_DisableIRQ+0x44>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	2001      	movs	r0, #1
 8001126:	fa00 f202 	lsl.w	r2, r0, r2
 800112a:	3320      	adds	r3, #32
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001130:	f3bf 8f4f 	dsb	sy
}
 8001134:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001136:	f3bf 8f6f 	isb	sy
}
 800113a:	bf00      	nop
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <__NVIC_SetPriority+0x4c>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <__NVIC_SetPriority+0x50>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	3b04      	subs	r3, #4
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	4313      	orrs	r3, r2
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <SysTick_Config>:
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff90 	bl	800114c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff09 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff1e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff90 	bl	80011a0 <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5f 	bl	800114c <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff11 	bl	80010cc <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff1f 	bl	8001104 <__NVIC_DisableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff94 	bl	8001204 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e043      	b.n	8001386 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_DMA_Init+0xa8>)
 8001306:	4413      	add	r3, r2
 8001308:	4a22      	ldr	r2, [pc, #136]	; (8001394 <HAL_DMA_Init+0xac>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_DMA_Init+0xb0>)
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001332:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001336:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001340:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001358:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	bffdfff8 	.word	0xbffdfff8
 8001394:	cccccccd 	.word	0xcccccccd
 8001398:	40020000 	.word	0x40020000

0800139c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e046      	b.n	800143c <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0201 	bic.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_DMA_DeInit+0xac>)
 80013e6:	4413      	add	r3, r2
 80013e8:	4a18      	ldr	r2, [pc, #96]	; (800144c <HAL_DMA_DeInit+0xb0>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	009a      	lsls	r2, r3, #2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_DMA_DeInit+0xb4>)
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	bffdfff8 	.word	0xbffdfff8
 800144c:	cccccccd 	.word	0xcccccccd
 8001450:	40020000 	.word	0x40020000

08001454 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_DMA_Start_IT+0x20>
 8001470:	2302      	movs	r3, #2
 8001472:	e04a      	b.n	800150a <HAL_DMA_Start_IT+0xb6>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001482:	2b01      	cmp	r3, #1
 8001484:	d13a      	bne.n	80014fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f9f3 	bl	8001896 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 020e 	orr.w	r2, r2, #14
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e00f      	b.n	80014ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0204 	bic.w	r2, r2, #4
 80014d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 020a 	orr.w	r2, r2, #10
 80014e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0201 	orr.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e005      	b.n	8001508 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001504:	2302      	movs	r3, #2
 8001506:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001508:	7dfb      	ldrb	r3, [r7, #23]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001512:	b480      	push	{r7}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001524:	2b02      	cmp	r3, #2
 8001526:	d008      	beq.n	800153a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2204      	movs	r2, #4
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e020      	b.n	800157c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 020e 	bic.w	r2, r2, #14
 8001548:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0201 	bic.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001562:	2101      	movs	r1, #1
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800157a:	7bfb      	ldrb	r3, [r7, #15]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
	...

08001588 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800159a:	2b02      	cmp	r3, #2
 800159c:	d005      	beq.n	80015aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2204      	movs	r2, #4
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e051      	b.n	800164e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 020e 	bic.w	r2, r2, #14
 80015b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a22      	ldr	r2, [pc, #136]	; (8001658 <HAL_DMA_Abort_IT+0xd0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d029      	beq.n	8001628 <HAL_DMA_Abort_IT+0xa0>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a20      	ldr	r2, [pc, #128]	; (800165c <HAL_DMA_Abort_IT+0xd4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d022      	beq.n	8001624 <HAL_DMA_Abort_IT+0x9c>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <HAL_DMA_Abort_IT+0xd8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d01a      	beq.n	800161e <HAL_DMA_Abort_IT+0x96>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_DMA_Abort_IT+0xdc>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d012      	beq.n	8001618 <HAL_DMA_Abort_IT+0x90>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_DMA_Abort_IT+0xe0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00a      	beq.n	8001612 <HAL_DMA_Abort_IT+0x8a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_DMA_Abort_IT+0xe4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d102      	bne.n	800160c <HAL_DMA_Abort_IT+0x84>
 8001606:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800160a:	e00e      	b.n	800162a <HAL_DMA_Abort_IT+0xa2>
 800160c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001610:	e00b      	b.n	800162a <HAL_DMA_Abort_IT+0xa2>
 8001612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001616:	e008      	b.n	800162a <HAL_DMA_Abort_IT+0xa2>
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	e005      	b.n	800162a <HAL_DMA_Abort_IT+0xa2>
 800161e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001622:	e002      	b.n	800162a <HAL_DMA_Abort_IT+0xa2>
 8001624:	2310      	movs	r3, #16
 8001626:	e000      	b.n	800162a <HAL_DMA_Abort_IT+0xa2>
 8001628:	2301      	movs	r3, #1
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <HAL_DMA_Abort_IT+0xe8>)
 800162c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
    } 
  }
  return status;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40020008 	.word	0x40020008
 800165c:	4002001c 	.word	0x4002001c
 8001660:	40020030 	.word	0x40020030
 8001664:	40020044 	.word	0x40020044
 8001668:	40020058 	.word	0x40020058
 800166c:	4002006c 	.word	0x4002006c
 8001670:	40020000 	.word	0x40020000

08001674 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	2204      	movs	r2, #4
 8001692:	409a      	lsls	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d04f      	beq.n	800173c <HAL_DMA_IRQHandler+0xc8>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d04a      	beq.n	800173c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0204 	bic.w	r2, r2, #4
 80016c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a66      	ldr	r2, [pc, #408]	; (8001864 <HAL_DMA_IRQHandler+0x1f0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d029      	beq.n	8001722 <HAL_DMA_IRQHandler+0xae>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a65      	ldr	r2, [pc, #404]	; (8001868 <HAL_DMA_IRQHandler+0x1f4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d022      	beq.n	800171e <HAL_DMA_IRQHandler+0xaa>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a63      	ldr	r2, [pc, #396]	; (800186c <HAL_DMA_IRQHandler+0x1f8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01a      	beq.n	8001718 <HAL_DMA_IRQHandler+0xa4>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a62      	ldr	r2, [pc, #392]	; (8001870 <HAL_DMA_IRQHandler+0x1fc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d012      	beq.n	8001712 <HAL_DMA_IRQHandler+0x9e>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a60      	ldr	r2, [pc, #384]	; (8001874 <HAL_DMA_IRQHandler+0x200>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00a      	beq.n	800170c <HAL_DMA_IRQHandler+0x98>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5f      	ldr	r2, [pc, #380]	; (8001878 <HAL_DMA_IRQHandler+0x204>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d102      	bne.n	8001706 <HAL_DMA_IRQHandler+0x92>
 8001700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001704:	e00e      	b.n	8001724 <HAL_DMA_IRQHandler+0xb0>
 8001706:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800170a:	e00b      	b.n	8001724 <HAL_DMA_IRQHandler+0xb0>
 800170c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001710:	e008      	b.n	8001724 <HAL_DMA_IRQHandler+0xb0>
 8001712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001716:	e005      	b.n	8001724 <HAL_DMA_IRQHandler+0xb0>
 8001718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171c:	e002      	b.n	8001724 <HAL_DMA_IRQHandler+0xb0>
 800171e:	2340      	movs	r3, #64	; 0x40
 8001720:	e000      	b.n	8001724 <HAL_DMA_IRQHandler+0xb0>
 8001722:	2304      	movs	r3, #4
 8001724:	4a55      	ldr	r2, [pc, #340]	; (800187c <HAL_DMA_IRQHandler+0x208>)
 8001726:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8094 	beq.w	800185a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800173a:	e08e      	b.n	800185a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	2202      	movs	r2, #2
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d056      	beq.n	80017fa <HAL_DMA_IRQHandler+0x186>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d051      	beq.n	80017fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10b      	bne.n	800177c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 020a 	bic.w	r2, r2, #10
 8001772:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a38      	ldr	r2, [pc, #224]	; (8001864 <HAL_DMA_IRQHandler+0x1f0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d029      	beq.n	80017da <HAL_DMA_IRQHandler+0x166>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a37      	ldr	r2, [pc, #220]	; (8001868 <HAL_DMA_IRQHandler+0x1f4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d022      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x162>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a35      	ldr	r2, [pc, #212]	; (800186c <HAL_DMA_IRQHandler+0x1f8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01a      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x15c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a34      	ldr	r2, [pc, #208]	; (8001870 <HAL_DMA_IRQHandler+0x1fc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d012      	beq.n	80017ca <HAL_DMA_IRQHandler+0x156>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a32      	ldr	r2, [pc, #200]	; (8001874 <HAL_DMA_IRQHandler+0x200>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00a      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x150>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <HAL_DMA_IRQHandler+0x204>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d102      	bne.n	80017be <HAL_DMA_IRQHandler+0x14a>
 80017b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017bc:	e00e      	b.n	80017dc <HAL_DMA_IRQHandler+0x168>
 80017be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c2:	e00b      	b.n	80017dc <HAL_DMA_IRQHandler+0x168>
 80017c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c8:	e008      	b.n	80017dc <HAL_DMA_IRQHandler+0x168>
 80017ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ce:	e005      	b.n	80017dc <HAL_DMA_IRQHandler+0x168>
 80017d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d4:	e002      	b.n	80017dc <HAL_DMA_IRQHandler+0x168>
 80017d6:	2320      	movs	r3, #32
 80017d8:	e000      	b.n	80017dc <HAL_DMA_IRQHandler+0x168>
 80017da:	2302      	movs	r3, #2
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_DMA_IRQHandler+0x208>)
 80017de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d034      	beq.n	800185a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017f8:	e02f      	b.n	800185a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	2208      	movs	r2, #8
 8001800:	409a      	lsls	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d028      	beq.n	800185c <HAL_DMA_IRQHandler+0x1e8>
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d023      	beq.n	800185c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 020e 	bic.w	r2, r2, #14
 8001822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182c:	2101      	movs	r1, #1
 800182e:	fa01 f202 	lsl.w	r2, r1, r2
 8001832:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
    }
  }
  return;
 800185a:	bf00      	nop
 800185c:	bf00      	nop
}
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020008 	.word	0x40020008
 8001868:	4002001c 	.word	0x4002001c
 800186c:	40020030 	.word	0x40020030
 8001870:	40020044 	.word	0x40020044
 8001874:	40020058 	.word	0x40020058
 8001878:	4002006c 	.word	0x4002006c
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f202 	lsl.w	r2, r1, r2
 80018b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	d108      	bne.n	80018d6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018d4:	e007      	b.n	80018e6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	60da      	str	r2, [r3, #12]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b08b      	sub	sp, #44	; 0x2c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	e169      	b.n	8001bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001904:	2201      	movs	r2, #1
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8158 	bne.w	8001bd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a9a      	ldr	r2, [pc, #616]	; (8001b90 <HAL_GPIO_Init+0x2a0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d05e      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800192c:	4a98      	ldr	r2, [pc, #608]	; (8001b90 <HAL_GPIO_Init+0x2a0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d875      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001932:	4a98      	ldr	r2, [pc, #608]	; (8001b94 <HAL_GPIO_Init+0x2a4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d058      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001938:	4a96      	ldr	r2, [pc, #600]	; (8001b94 <HAL_GPIO_Init+0x2a4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d86f      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800193e:	4a96      	ldr	r2, [pc, #600]	; (8001b98 <HAL_GPIO_Init+0x2a8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d052      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001944:	4a94      	ldr	r2, [pc, #592]	; (8001b98 <HAL_GPIO_Init+0x2a8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d869      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800194a:	4a94      	ldr	r2, [pc, #592]	; (8001b9c <HAL_GPIO_Init+0x2ac>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d04c      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001950:	4a92      	ldr	r2, [pc, #584]	; (8001b9c <HAL_GPIO_Init+0x2ac>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d863      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001956:	4a92      	ldr	r2, [pc, #584]	; (8001ba0 <HAL_GPIO_Init+0x2b0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d046      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800195c:	4a90      	ldr	r2, [pc, #576]	; (8001ba0 <HAL_GPIO_Init+0x2b0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d85d      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d82a      	bhi.n	80019bc <HAL_GPIO_Init+0xcc>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d859      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <HAL_GPIO_Init+0x80>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019c5 	.word	0x080019c5
 8001978:	080019d7 	.word	0x080019d7
 800197c:	08001a19 	.word	0x08001a19
 8001980:	08001a1f 	.word	0x08001a1f
 8001984:	08001a1f 	.word	0x08001a1f
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001a1f 	.word	0x08001a1f
 8001990:	08001a1f 	.word	0x08001a1f
 8001994:	08001a1f 	.word	0x08001a1f
 8001998:	08001a1f 	.word	0x08001a1f
 800199c:	08001a1f 	.word	0x08001a1f
 80019a0:	08001a1f 	.word	0x08001a1f
 80019a4:	08001a1f 	.word	0x08001a1f
 80019a8:	08001a1f 	.word	0x08001a1f
 80019ac:	08001a1f 	.word	0x08001a1f
 80019b0:	08001a1f 	.word	0x08001a1f
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019e1 	.word	0x080019e1
 80019bc:	4a79      	ldr	r2, [pc, #484]	; (8001ba4 <HAL_GPIO_Init+0x2b4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c2:	e02c      	b.n	8001a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e029      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e024      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	3308      	adds	r3, #8
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e01f      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	330c      	adds	r3, #12
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e01a      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f2:	2304      	movs	r3, #4
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e013      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	611a      	str	r2, [r3, #16]
          break;
 8001a0a:	e009      	b.n	8001a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	615a      	str	r2, [r3, #20]
          break;
 8001a16:	e003      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          break;
 8001a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d801      	bhi.n	8001a2a <HAL_GPIO_Init+0x13a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_Init+0x13e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d802      	bhi.n	8001a3c <HAL_GPIO_Init+0x14c>
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x152>
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	3b08      	subs	r3, #8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	210f      	movs	r1, #15
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80b1 	beq.w	8001bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a70:	4b4d      	ldr	r3, [pc, #308]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_GPIO_Init+0x2bc>)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a40      	ldr	r2, [pc, #256]	; (8001bb0 <HAL_GPIO_Init+0x2c0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_GPIO_Init+0x1ec>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_GPIO_Init+0x1e8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3e      	ldr	r2, [pc, #248]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x1e4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_GPIO_Init+0x1e0>
 8001acc:	2303      	movs	r3, #3
 8001ace:	e006      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	e004      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001adc:	2300      	movs	r3, #0
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	f002 0203 	and.w	r2, r2, #3
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4093      	lsls	r3, r2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aee:	492f      	ldr	r1, [pc, #188]	; (8001bac <HAL_GPIO_Init+0x2bc>)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	492c      	ldr	r1, [pc, #176]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4928      	ldr	r1, [pc, #160]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	491e      	ldr	r1, [pc, #120]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4918      	ldr	r1, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4914      	ldr	r1, [pc, #80]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d021      	beq.n	8001bc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e021      	b.n	8001bd2 <HAL_GPIO_Init+0x2e2>
 8001b8e:	bf00      	nop
 8001b90:	10320000 	.word	0x10320000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40011400 	.word	0x40011400
 8001bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_GPIO_Init+0x304>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	4909      	ldr	r1, [pc, #36]	; (8001bf4 <HAL_GPIO_Init+0x304>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f47f ae8e 	bne.w	8001904 <HAL_GPIO_Init+0x14>
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	372c      	adds	r7, #44	; 0x2c
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001c06:	e09a      	b.n	8001d3e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 808d 	beq.w	8001d38 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001c1e:	4a4e      	ldr	r2, [pc, #312]	; (8001d58 <HAL_GPIO_DeInit+0x160>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <HAL_GPIO_DeInit+0x164>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <HAL_GPIO_DeInit+0x78>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a45      	ldr	r2, [pc, #276]	; (8001d60 <HAL_GPIO_DeInit+0x168>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00d      	beq.n	8001c6c <HAL_GPIO_DeInit+0x74>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a44      	ldr	r2, [pc, #272]	; (8001d64 <HAL_GPIO_DeInit+0x16c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <HAL_GPIO_DeInit+0x70>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <HAL_GPIO_DeInit+0x170>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_GPIO_DeInit+0x6c>
 8001c60:	2303      	movs	r3, #3
 8001c62:	e006      	b.n	8001c72 <HAL_GPIO_DeInit+0x7a>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e004      	b.n	8001c72 <HAL_GPIO_DeInit+0x7a>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e002      	b.n	8001c72 <HAL_GPIO_DeInit+0x7a>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_GPIO_DeInit+0x7a>
 8001c70:	2300      	movs	r3, #0
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	f002 0203 	and.w	r2, r2, #3
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	4093      	lsls	r3, r2
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d132      	bne.n	8001ce8 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001c92:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <HAL_GPIO_DeInit+0x160>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	482d      	ldr	r0, [pc, #180]	; (8001d58 <HAL_GPIO_DeInit+0x160>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	400a      	ands	r2, r1
 8001caa:	3302      	adds	r3, #2
 8001cac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_GPIO_DeInit+0x174>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	492c      	ldr	r1, [pc, #176]	; (8001d6c <HAL_GPIO_DeInit+0x174>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_GPIO_DeInit+0x174>)
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4929      	ldr	r1, [pc, #164]	; (8001d6c <HAL_GPIO_DeInit+0x174>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_GPIO_DeInit+0x174>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4925      	ldr	r1, [pc, #148]	; (8001d6c <HAL_GPIO_DeInit+0x174>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_GPIO_DeInit+0x174>)
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4922      	ldr	r1, [pc, #136]	; (8001d6c <HAL_GPIO_DeInit+0x174>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	; 0xff
 8001cec:	d801      	bhi.n	8001cf2 <HAL_GPIO_DeInit+0xfa>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_DeInit+0xfe>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d802      	bhi.n	8001d04 <HAL_GPIO_DeInit+0x10c>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_DeInit+0x112>
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	3b08      	subs	r3, #8
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	210f      	movs	r1, #15
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	2104      	movs	r1, #4
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	431a      	orrs	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f47f af5e 	bne.w	8001c08 <HAL_GPIO_DeInit+0x10>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40010800 	.word	0x40010800
 8001d60:	40010c00 	.word	0x40010c00
 8001d64:	40011000 	.word	0x40011000
 8001d68:	40011400 	.word	0x40011400
 8001d6c:	40010400 	.word	0x40010400

08001d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e272      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8087 	beq.w	8001e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d90:	4b92      	ldr	r3, [pc, #584]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d00c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d9c:	4b8f      	ldr	r3, [pc, #572]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d112      	bne.n	8001dce <HAL_RCC_OscConfig+0x5e>
 8001da8:	4b8c      	ldr	r3, [pc, #560]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d10b      	bne.n	8001dce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db6:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d06c      	beq.n	8001e9c <HAL_RCC_OscConfig+0x12c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d168      	bne.n	8001e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e24c      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x76>
 8001dd8:	4b80      	ldr	r3, [pc, #512]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a7f      	ldr	r2, [pc, #508]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e02e      	b.n	8001e44 <HAL_RCC_OscConfig+0xd4>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x98>
 8001dee:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7a      	ldr	r2, [pc, #488]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a77      	ldr	r2, [pc, #476]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e01d      	b.n	8001e44 <HAL_RCC_OscConfig+0xd4>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0xbc>
 8001e12:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a71      	ldr	r2, [pc, #452]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6e      	ldr	r2, [pc, #440]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0xd4>
 8001e2c:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b68      	ldr	r3, [pc, #416]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a67      	ldr	r2, [pc, #412]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f8de 	bl	800100c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff f8da 	bl	800100c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e200      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0xe4>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff f8ca 	bl	800100c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff f8c6 	bl	800100c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1ec      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x10c>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d063      	beq.n	8001f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eaa:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eb6:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d11c      	bne.n	8001efc <HAL_RCC_OscConfig+0x18c>
 8001ec2:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x176>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1c0      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4939      	ldr	r1, [pc, #228]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	e03a      	b.n	8001f72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f04:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7ff f87f 	bl	800100c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f12:	f7ff f87b 	bl	800100c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1a1      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4927      	ldr	r1, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f85e 	bl	800100c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f54:	f7ff f85a 	bl	800100c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e180      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d03a      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d019      	beq.n	8001fba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f83e 	bl	800100c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f94:	f7ff f83a 	bl	800100c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e160      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f000 fad8 	bl	8002568 <RCC_Delay>
 8001fb8:	e01c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f824 	bl	800100c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc6:	e00f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f820 	bl	800100c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d908      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e146      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	42420000 	.word	0x42420000
 8001fe4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b92      	ldr	r3, [pc, #584]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e9      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a6 	beq.w	800214e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b8b      	ldr	r3, [pc, #556]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	4b88      	ldr	r3, [pc, #544]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a87      	ldr	r2, [pc, #540]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201c:	61d3      	str	r3, [r2, #28]
 800201e:	4b85      	ldr	r3, [pc, #532]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202e:	4b82      	ldr	r3, [pc, #520]	; (8002238 <HAL_RCC_OscConfig+0x4c8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d118      	bne.n	800206c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203a:	4b7f      	ldr	r3, [pc, #508]	; (8002238 <HAL_RCC_OscConfig+0x4c8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a7e      	ldr	r2, [pc, #504]	; (8002238 <HAL_RCC_OscConfig+0x4c8>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002046:	f7fe ffe1 	bl	800100c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204e:	f7fe ffdd 	bl	800100c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b64      	cmp	r3, #100	; 0x64
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e103      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b75      	ldr	r3, [pc, #468]	; (8002238 <HAL_RCC_OscConfig+0x4c8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x312>
 8002074:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a6e      	ldr	r2, [pc, #440]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	e02d      	b.n	80020de <HAL_RCC_OscConfig+0x36e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x334>
 800208a:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a69      	ldr	r2, [pc, #420]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6213      	str	r3, [r2, #32]
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a66      	ldr	r2, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	e01c      	b.n	80020de <HAL_RCC_OscConfig+0x36e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d10c      	bne.n	80020c6 <HAL_RCC_OscConfig+0x356>
 80020ac:	4b61      	ldr	r3, [pc, #388]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a60      	ldr	r2, [pc, #384]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a5d      	ldr	r2, [pc, #372]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	e00b      	b.n	80020de <HAL_RCC_OscConfig+0x36e>
 80020c6:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a5a      	ldr	r2, [pc, #360]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6213      	str	r3, [r2, #32]
 80020d2:	4b58      	ldr	r3, [pc, #352]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a57      	ldr	r2, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	f023 0304 	bic.w	r3, r3, #4
 80020dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d015      	beq.n	8002112 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7fe ff91 	bl	800100c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe ff8d 	bl	800100c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e0b1      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ee      	beq.n	80020ee <HAL_RCC_OscConfig+0x37e>
 8002110:	e014      	b.n	800213c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe ff7b 	bl	800100c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7fe ff77 	bl	800100c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e09b      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	4b40      	ldr	r3, [pc, #256]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ee      	bne.n	800211a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a3b      	ldr	r2, [pc, #236]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8087 	beq.w	8002266 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d061      	beq.n	8002228 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d146      	bne.n	80021fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <HAL_RCC_OscConfig+0x4cc>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7fe ff4b 	bl	800100c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe ff47 	bl	800100c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e06d      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218c:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	4921      	ldr	r1, [pc, #132]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b4:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a19      	ldr	r1, [r3, #32]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	430b      	orrs	r3, r1
 80021c6:	491b      	ldr	r1, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x4cc>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe ff1b 	bl	800100c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe ff17 	bl	800100c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e03d      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x46a>
 80021f8:	e035      	b.n	8002266 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe ff04 	bl	800100c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe ff00 	bl	800100c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e026      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x498>
 8002226:	e01e      	b.n	8002266 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e019      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
 8002234:	40021000 	.word	0x40021000
 8002238:	40007000 	.word	0x40007000
 800223c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_OscConfig+0x500>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000

08002274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0d0      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d910      	bls.n	80022b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0207 	bic.w	r2, r3, #7
 800229e:	4965      	ldr	r1, [pc, #404]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0b8      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d0:	4b59      	ldr	r3, [pc, #356]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a58      	ldr	r2, [pc, #352]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a52      	ldr	r2, [pc, #328]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b50      	ldr	r3, [pc, #320]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	494d      	ldr	r1, [pc, #308]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d040      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d115      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e07f      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e073      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06b      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4936      	ldr	r1, [pc, #216]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7fe fe52 	bl	800100c <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe fe4e 	bl	800100c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e053      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d210      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 0207 	bic.w	r2, r3, #7
 80023aa:	4922      	ldr	r1, [pc, #136]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e032      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4916      	ldr	r1, [pc, #88]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	490e      	ldr	r1, [pc, #56]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002402:	f000 f821 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002406:	4602      	mov	r2, r0
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	490a      	ldr	r1, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	5ccb      	ldrb	r3, [r1, r3]
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1cc>)
 800241c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1d0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fdb0 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40022000 	.word	0x40022000
 8002438:	40021000 	.word	0x40021000
 800243c:	080045a8 	.word	0x080045a8
 8002440:	20000070 	.word	0x20000070
 8002444:	20000074 	.word	0x20000074

08002448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	b490      	push	{r4, r7}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002450:	1d3c      	adds	r4, r7, #4
 8002452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002458:	f240 2301 	movw	r3, #513	; 0x201
 800245c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b04      	cmp	r3, #4
 8002480:	d002      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x40>
 8002482:	2b08      	cmp	r3, #8
 8002484:	d003      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0x46>
 8002486:	e02b      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002488:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800248a:	623b      	str	r3, [r7, #32]
      break;
 800248c:	e02b      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	0c9b      	lsrs	r3, r3, #18
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3328      	adds	r3, #40	; 0x28
 8002498:	443b      	add	r3, r7
 800249a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800249e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	0c5b      	lsrs	r3, r3, #17
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	3328      	adds	r3, #40	; 0x28
 80024b6:	443b      	add	r3, r7
 80024b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80024c2:	fb03 f202 	mul.w	r2, r3, r2
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	e004      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	623b      	str	r3, [r7, #32]
      break;
 80024de:	e002      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80024e2:	623b      	str	r3, [r7, #32]
      break;
 80024e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e6:	6a3b      	ldr	r3, [r7, #32]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc90      	pop	{r4, r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	08004598 	.word	0x08004598
 80024f8:	40021000 	.word	0x40021000
 80024fc:	007a1200 	.word	0x007a1200
 8002500:	003d0900 	.word	0x003d0900

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b02      	ldr	r3, [pc, #8]	; (8002514 <HAL_RCC_GetHCLKFreq+0x10>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20000070 	.word	0x20000070

08002518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800251c:	f7ff fff2 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4903      	ldr	r1, [pc, #12]	; (800253c <HAL_RCC_GetPCLK1Freq+0x24>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	080045b8 	.word	0x080045b8

08002540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002544:	f7ff ffde 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	0adb      	lsrs	r3, r3, #11
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4903      	ldr	r1, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	080045b8 	.word	0x080045b8

08002568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <RCC_Delay+0x34>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <RCC_Delay+0x38>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0a5b      	lsrs	r3, r3, #9
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002584:	bf00      	nop
  }
  while (Delay --);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1e5a      	subs	r2, r3, #1
 800258a:	60fa      	str	r2, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f9      	bne.n	8002584 <RCC_Delay+0x1c>
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	20000070 	.word	0x20000070
 80025a0:	10624dd3 	.word	0x10624dd3

080025a4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e052      	b.n	800265c <HAL_HalfDuplex_Init+0xb8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d111      	bne.n	80025e6 <HAL_HalfDuplex_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fc5e 	bl	8002e8c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <HAL_HalfDuplex_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a22      	ldr	r2, [pc, #136]	; (8002664 <HAL_HalfDuplex_Init+0xc0>)
 80025dc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2224      	movs	r2, #36	; 0x24
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 ff36 	bl	8003470 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002612:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002622:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002642:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	08000ca9 	.word	0x08000ca9

08002668 <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	460b      	mov	r3, r1
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e08c      	b.n	80027aa <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_UART_RegisterCallback+0x36>
 800269a:	2302      	movs	r3, #2
 800269c:	e085      	b.n	80027aa <HAL_UART_RegisterCallback+0x142>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d151      	bne.n	8002756 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	d845      	bhi.n	8002744 <HAL_UART_RegisterCallback+0xdc>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <HAL_UART_RegisterCallback+0x58>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026f5 	.word	0x080026f5
 80026c4:	080026fd 	.word	0x080026fd
 80026c8:	08002705 	.word	0x08002705
 80026cc:	0800270d 	.word	0x0800270d
 80026d0:	08002715 	.word	0x08002715
 80026d4:	0800271d 	.word	0x0800271d
 80026d8:	08002725 	.word	0x08002725
 80026dc:	0800272d 	.word	0x0800272d
 80026e0:	08002745 	.word	0x08002745
 80026e4:	08002745 	.word	0x08002745
 80026e8:	08002745 	.word	0x08002745
 80026ec:	08002735 	.word	0x08002735
 80026f0:	0800273d 	.word	0x0800273d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80026fa:	e051      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8002702:	e04d      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800270a:	e049      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8002712:	e045      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800271a:	e041      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8002722:	e03d      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800272a:	e039      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002732:	e035      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800273a:	e031      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002742:	e02d      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	75fb      	strb	r3, [r7, #23]
        break;
 8002754:	e024      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	2b0b      	cmp	r3, #11
 8002766:	d002      	beq.n	800276e <HAL_UART_RegisterCallback+0x106>
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d004      	beq.n	8002776 <HAL_UART_RegisterCallback+0x10e>
 800276c:	e007      	b.n	800277e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8002774:	e014      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800277c:	e010      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f043 0220 	orr.w	r2, r3, #32
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
        break;
 800278e:	e007      	b.n	80027a0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d153      	bne.n	8002876 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_UART_Transmit_DMA+0x26>
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e04c      	b.n	8002878 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Transmit_DMA+0x38>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e045      	b.n	8002878 <HAL_UART_Transmit_DMA+0xc4>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2221      	movs	r2, #33	; 0x21
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <HAL_UART_Transmit_DMA+0xcc>)
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_UART_Transmit_DMA+0xd0>)
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_UART_Transmit_DMA+0xd4>)
 800282a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	2200      	movs	r2, #0
 8002832:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002834:	f107 0308 	add.w	r3, r7, #8
 8002838:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3304      	adds	r3, #4
 8002848:	461a      	mov	r2, r3
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	f7fe fe02 	bl	8001454 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002858:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002870:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	08002ef9 	.word	0x08002ef9
 8002884:	08002f4d 	.word	0x08002f4d
 8002888:	0800303f 	.word	0x0800303f

0800288c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d11d      	bne.n	80028e2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_UART_Receive_DMA+0x26>
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e016      	b.n	80028e4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_UART_Receive_DMA+0x38>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e00f      	b.n	80028e4 <HAL_UART_Receive_DMA+0x58>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fbfb 	bl	80030d4 <UART_Start_Receive_DMA>
 80028de:	4603      	mov	r3, r0
 80028e0:	e000      	b.n	80028e4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
  }
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b21      	cmp	r3, #33	; 0x21
 8002918:	d116      	bne.n	8002948 <HAL_UART_DMAStop+0x5c>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002934:	2b00      	cmp	r3, #0
 8002936:	d004      	beq.n	8002942 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fde8 	bl	8001512 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fc2a 	bl	800319c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b22      	cmp	r3, #34	; 0x22
 8002968:	d116      	bne.n	8002998 <HAL_UART_DMAStop+0xac>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fdc0 	bl	8001512 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fc17 	bl	80031c6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10d      	bne.n	80029f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_UART_IRQHandler+0x52>
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fc92 	bl	8003318 <UART_Receive_IT>
      return;
 80029f4:	e180      	b.n	8002cf8 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80b4 	beq.w	8002b66 <HAL_UART_IRQHandler+0x1c2>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_UART_IRQHandler+0x70>
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80a9 	beq.w	8002b66 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_UART_IRQHandler+0x90>
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_UART_IRQHandler+0xb0>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f043 0202 	orr.w	r2, r3, #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_UART_IRQHandler+0xd0>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00f      	beq.n	8002a9e <HAL_UART_IRQHandler+0xfa>
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d104      	bne.n	8002a92 <HAL_UART_IRQHandler+0xee>
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f043 0208 	orr.w	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8123 	beq.w	8002cee <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x11e>
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fc2b 	bl	8003318 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <HAL_UART_IRQHandler+0x146>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d033      	beq.n	8002b52 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fb6b 	bl	80031c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d024      	beq.n	8002b48 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b0c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d013      	beq.n	8002b3e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	4a79      	ldr	r2, [pc, #484]	; (8002d00 <HAL_UART_IRQHandler+0x35c>)
 8002b1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fd30 	bl	8001588 <HAL_DMA_Abort_IT>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d019      	beq.n	8002b62 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3c:	e011      	b.n	8002b62 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b46:	e00c      	b.n	8002b62 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b50:	e007      	b.n	8002b62 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b60:	e0c5      	b.n	8002cee <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b62:	bf00      	nop
    return;
 8002b64:	e0c3      	b.n	8002cee <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	f040 80a3 	bne.w	8002cb6 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 809d 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8097 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d04f      	beq.n	8002c4c <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002bb6:	8a3b      	ldrh	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 809a 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bc2:	8a3a      	ldrh	r2, [r7, #16]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f080 8094 	bcs.w	8002cf2 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8a3a      	ldrh	r2, [r7, #16]
 8002bce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d02b      	beq.n	8002c32 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c08:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0210 	bic.w	r2, r2, #16
 8002c26:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fc70 	bl	8001512 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	1a8a      	subs	r2, r1, r2
 8002c42:	b292      	uxth	r2, r2
 8002c44:	4611      	mov	r1, r2
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8002c4a:	e052      	b.n	8002cf2 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d048      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8002c64:	8a7b      	ldrh	r3, [r7, #18]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d045      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c78:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0210 	bic.w	r2, r2, #16
 8002ca6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cac:	8a7a      	ldrh	r2, [r7, #18]
 8002cae:	4611      	mov	r1, r2
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8002cb4:	e01f      	b.n	8002cf6 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x32e>
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fabc 	bl	8003248 <UART_Transmit_IT>
    return;
 8002cd0:	e012      	b.n	8002cf8 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x354>
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fafd 	bl	80032e6 <UART_EndTransmit_IT>
    return;
 8002cec:	e004      	b.n	8002cf8 <HAL_UART_IRQHandler+0x354>
    return;
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <HAL_UART_IRQHandler+0x354>
      return;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <HAL_UART_IRQHandler+0x354>
      return;
 8002cf6:	bf00      	nop
  }
}
 8002cf8:	3728      	adds	r7, #40	; 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	0800321f 	.word	0x0800321f

08002d04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e020      	b.n	8002e06 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 030c 	bic.w	r3, r3, #12
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_HalfDuplex_EnableReceiver+0x1a>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e020      	b.n	8002e6c <HAL_HalfDuplex_EnableReceiver+0x5c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2224      	movs	r2, #36	; 0x24
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f023 030c 	bic.w	r3, r3, #12
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a0f      	ldr	r2, [pc, #60]	; (8002ed4 <UART_InitCallbacksToDefault+0x48>)
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <UART_InitCallbacksToDefault+0x4c>)
 8002e9e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <UART_InitCallbacksToDefault+0x50>)
 8002ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	; (8002ee0 <UART_InitCallbacksToDefault+0x54>)
 8002eaa:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <UART_InitCallbacksToDefault+0x58>)
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <UART_InitCallbacksToDefault+0x5c>)
 8002eb6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <UART_InitCallbacksToDefault+0x60>)
 8002ebc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <UART_InitCallbacksToDefault+0x64>)
 8002ec2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <UART_InitCallbacksToDefault+0x68>)
 8002ec8:	669a      	str	r2, [r3, #104]	; 0x68

}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	08002d17 	.word	0x08002d17
 8002ed8:	08002d05 	.word	0x08002d05
 8002edc:	08002d3b 	.word	0x08002d3b
 8002ee0:	08002d29 	.word	0x08002d29
 8002ee4:	08002d4d 	.word	0x08002d4d
 8002ee8:	08002d5f 	.word	0x08002d5f
 8002eec:	08002d71 	.word	0x08002d71
 8002ef0:	08002d83 	.word	0x08002d83
 8002ef4:	08002d95 	.word	0x08002d95

08002ef8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d113      	bne.n	8002f3c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f28:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f38:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f3a:	e003      	b.n	8002f44 <UART_DMATransmitCplt+0x4c>
    huart->TxCpltCallback(huart);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	4798      	blx	r3
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d12a      	bne.n	8002fdc <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f9a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fba:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0210 	bic.w	r2, r2, #16
 8002fda:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d107      	bne.n	8002ff4 <UART_DMAReceiveCplt+0x8a>
  {  
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002fec:	4611      	mov	r1, r2
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ff2:	e003      	b.n	8002ffc <UART_DMAReceiveCplt+0x92>
    huart->RxCpltCallback(huart);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	4798      	blx	r3
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	2b01      	cmp	r3, #1
 8003018:	d109      	bne.n	800302e <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	b292      	uxth	r2, r2
 8003026:	4611      	mov	r1, r2
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800302c:	e003      	b.n	8003036 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	4798      	blx	r3
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b21      	cmp	r3, #33	; 0x21
 8003070:	d108      	bne.n	8003084 <UART_DMAError+0x46>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2200      	movs	r2, #0
 800307c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800307e:	68b8      	ldr	r0, [r7, #8]
 8003080:	f000 f88c 	bl	800319c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b22      	cmp	r3, #34	; 0x22
 80030a4:	d108      	bne.n	80030b8 <UART_DMAError+0x7a>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80030b2:	68b8      	ldr	r0, [r7, #8]
 80030b4:	f000 f887 	bl	80031c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 0210 	orr.w	r2, r3, #16
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	68b8      	ldr	r0, [r7, #8]
 80030ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2222      	movs	r2, #34	; 0x22
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	4a23      	ldr	r2, [pc, #140]	; (8003190 <UART_Start_Receive_DMA+0xbc>)
 8003102:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	4a22      	ldr	r2, [pc, #136]	; (8003194 <UART_Start_Receive_DMA+0xc0>)
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	4a21      	ldr	r2, [pc, #132]	; (8003198 <UART_Start_Receive_DMA+0xc4>)
 8003112:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	2200      	movs	r2, #0
 800311a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800311c:	f107 0308 	add.w	r3, r7, #8
 8003120:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	f7fe f98e 	bl	8001454 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003164:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003184:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	08002f6b 	.word	0x08002f6b
 8003194:	08003005 	.word	0x08003005
 8003198:	0800303f 	.word	0x0800303f

0800319c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80031b2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0210 	bic.w	r2, r2, #16
 8003204:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b21      	cmp	r3, #33	; 0x21
 800325a:	d13e      	bne.n	80032da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d114      	bne.n	8003290 <UART_Transmit_IT+0x48>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d110      	bne.n	8003290 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003282:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]
 800328e:	e008      	b.n	80032a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	1c59      	adds	r1, r3, #1
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6211      	str	r1, [r2, #32]
 800329a:	781a      	ldrb	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4619      	mov	r1, r3
 80032b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b22      	cmp	r3, #34	; 0x22
 800332a:	f040 809b 	bne.w	8003464 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	d117      	bne.n	8003368 <UART_Receive_IT+0x50>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d113      	bne.n	8003368 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	b29b      	uxth	r3, r3
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	b29a      	uxth	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	629a      	str	r2, [r3, #40]	; 0x28
 8003366:	e026      	b.n	80033b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337a:	d007      	beq.n	800338c <UART_Receive_IT+0x74>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <UART_Receive_IT+0x82>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e008      	b.n	80033ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29b      	uxth	r3, r3
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4619      	mov	r1, r3
 80033c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d14a      	bne.n	8003460 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0220 	bic.w	r2, r2, #32
 80033d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	2b01      	cmp	r3, #1
 8003408:	d124      	bne.n	8003454 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0210 	bic.w	r2, r2, #16
 800341e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b10      	cmp	r3, #16
 800342c:	d10a      	bne.n	8003444 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800344c:	4611      	mov	r1, r2
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	e003      	b.n	800345c <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e002      	b.n	8003466 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034aa:	f023 030c 	bic.w	r3, r3, #12
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <UART_SetConfig+0x114>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d103      	bne.n	80034e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7ff f832 	bl	8002540 <HAL_RCC_GetPCLK2Freq>
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	e002      	b.n	80034e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7ff f81a 	bl	8002518 <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009a      	lsls	r2, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <UART_SetConfig+0x118>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	0119      	lsls	r1, r3, #4
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fbb2 f2f3 	udiv	r2, r2, r3
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <UART_SetConfig+0x118>)
 800351e:	fba3 0302 	umull	r0, r3, r3, r2
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2064      	movs	r0, #100	; 0x64
 8003526:	fb00 f303 	mul.w	r3, r0, r3
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	3332      	adds	r3, #50	; 0x32
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <UART_SetConfig+0x118>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353c:	4419      	add	r1, r3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009a      	lsls	r2, r3, #2
 8003548:	441a      	add	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <UART_SetConfig+0x118>)
 8003556:	fba3 0302 	umull	r0, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2064      	movs	r0, #100	; 0x64
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	; 0x32
 8003568:	4a07      	ldr	r2, [pc, #28]	; (8003588 <UART_SetConfig+0x118>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	440a      	add	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40013800 	.word	0x40013800
 8003588:	51eb851f 	.word	0x51eb851f

0800358c <__errno>:
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <__errno+0x8>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	2000007c 	.word	0x2000007c

08003598 <__libc_init_array>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	2600      	movs	r6, #0
 800359c:	4d0c      	ldr	r5, [pc, #48]	; (80035d0 <__libc_init_array+0x38>)
 800359e:	4c0d      	ldr	r4, [pc, #52]	; (80035d4 <__libc_init_array+0x3c>)
 80035a0:	1b64      	subs	r4, r4, r5
 80035a2:	10a4      	asrs	r4, r4, #2
 80035a4:	42a6      	cmp	r6, r4
 80035a6:	d109      	bne.n	80035bc <__libc_init_array+0x24>
 80035a8:	f000 ffb6 	bl	8004518 <_init>
 80035ac:	2600      	movs	r6, #0
 80035ae:	4d0a      	ldr	r5, [pc, #40]	; (80035d8 <__libc_init_array+0x40>)
 80035b0:	4c0a      	ldr	r4, [pc, #40]	; (80035dc <__libc_init_array+0x44>)
 80035b2:	1b64      	subs	r4, r4, r5
 80035b4:	10a4      	asrs	r4, r4, #2
 80035b6:	42a6      	cmp	r6, r4
 80035b8:	d105      	bne.n	80035c6 <__libc_init_array+0x2e>
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c0:	4798      	blx	r3
 80035c2:	3601      	adds	r6, #1
 80035c4:	e7ee      	b.n	80035a4 <__libc_init_array+0xc>
 80035c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ca:	4798      	blx	r3
 80035cc:	3601      	adds	r6, #1
 80035ce:	e7f2      	b.n	80035b6 <__libc_init_array+0x1e>
 80035d0:	08004658 	.word	0x08004658
 80035d4:	08004658 	.word	0x08004658
 80035d8:	08004658 	.word	0x08004658
 80035dc:	0800465c 	.word	0x0800465c

080035e0 <memset>:
 80035e0:	4603      	mov	r3, r0
 80035e2:	4402      	add	r2, r0
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d100      	bne.n	80035ea <memset+0xa>
 80035e8:	4770      	bx	lr
 80035ea:	f803 1b01 	strb.w	r1, [r3], #1
 80035ee:	e7f9      	b.n	80035e4 <memset+0x4>

080035f0 <iprintf>:
 80035f0:	b40f      	push	{r0, r1, r2, r3}
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <iprintf+0x2c>)
 80035f4:	b513      	push	{r0, r1, r4, lr}
 80035f6:	681c      	ldr	r4, [r3, #0]
 80035f8:	b124      	cbz	r4, 8003604 <iprintf+0x14>
 80035fa:	69a3      	ldr	r3, [r4, #24]
 80035fc:	b913      	cbnz	r3, 8003604 <iprintf+0x14>
 80035fe:	4620      	mov	r0, r4
 8003600:	f000 f866 	bl	80036d0 <__sinit>
 8003604:	ab05      	add	r3, sp, #20
 8003606:	4620      	mov	r0, r4
 8003608:	9a04      	ldr	r2, [sp, #16]
 800360a:	68a1      	ldr	r1, [r4, #8]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	f000 f9bb 	bl	8003988 <_vfiprintf_r>
 8003612:	b002      	add	sp, #8
 8003614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003618:	b004      	add	sp, #16
 800361a:	4770      	bx	lr
 800361c:	2000007c 	.word	0x2000007c

08003620 <std>:
 8003620:	2300      	movs	r3, #0
 8003622:	b510      	push	{r4, lr}
 8003624:	4604      	mov	r4, r0
 8003626:	e9c0 3300 	strd	r3, r3, [r0]
 800362a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800362e:	6083      	str	r3, [r0, #8]
 8003630:	8181      	strh	r1, [r0, #12]
 8003632:	6643      	str	r3, [r0, #100]	; 0x64
 8003634:	81c2      	strh	r2, [r0, #14]
 8003636:	6183      	str	r3, [r0, #24]
 8003638:	4619      	mov	r1, r3
 800363a:	2208      	movs	r2, #8
 800363c:	305c      	adds	r0, #92	; 0x5c
 800363e:	f7ff ffcf 	bl	80035e0 <memset>
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <std+0x38>)
 8003644:	6224      	str	r4, [r4, #32]
 8003646:	6263      	str	r3, [r4, #36]	; 0x24
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <std+0x3c>)
 800364a:	62a3      	str	r3, [r4, #40]	; 0x28
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <std+0x40>)
 800364e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <std+0x44>)
 8003652:	6323      	str	r3, [r4, #48]	; 0x30
 8003654:	bd10      	pop	{r4, pc}
 8003656:	bf00      	nop
 8003658:	08003f35 	.word	0x08003f35
 800365c:	08003f57 	.word	0x08003f57
 8003660:	08003f8f 	.word	0x08003f8f
 8003664:	08003fb3 	.word	0x08003fb3

08003668 <_cleanup_r>:
 8003668:	4901      	ldr	r1, [pc, #4]	; (8003670 <_cleanup_r+0x8>)
 800366a:	f000 b8af 	b.w	80037cc <_fwalk_reent>
 800366e:	bf00      	nop
 8003670:	08004285 	.word	0x08004285

08003674 <__sfmoreglue>:
 8003674:	2268      	movs	r2, #104	; 0x68
 8003676:	b570      	push	{r4, r5, r6, lr}
 8003678:	1e4d      	subs	r5, r1, #1
 800367a:	4355      	muls	r5, r2
 800367c:	460e      	mov	r6, r1
 800367e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003682:	f000 f8e5 	bl	8003850 <_malloc_r>
 8003686:	4604      	mov	r4, r0
 8003688:	b140      	cbz	r0, 800369c <__sfmoreglue+0x28>
 800368a:	2100      	movs	r1, #0
 800368c:	e9c0 1600 	strd	r1, r6, [r0]
 8003690:	300c      	adds	r0, #12
 8003692:	60a0      	str	r0, [r4, #8]
 8003694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003698:	f7ff ffa2 	bl	80035e0 <memset>
 800369c:	4620      	mov	r0, r4
 800369e:	bd70      	pop	{r4, r5, r6, pc}

080036a0 <__sfp_lock_acquire>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__sfp_lock_acquire+0x8>)
 80036a2:	f000 b8b3 	b.w	800380c <__retarget_lock_acquire_recursive>
 80036a6:	bf00      	nop
 80036a8:	20000309 	.word	0x20000309

080036ac <__sfp_lock_release>:
 80036ac:	4801      	ldr	r0, [pc, #4]	; (80036b4 <__sfp_lock_release+0x8>)
 80036ae:	f000 b8ae 	b.w	800380e <__retarget_lock_release_recursive>
 80036b2:	bf00      	nop
 80036b4:	20000309 	.word	0x20000309

080036b8 <__sinit_lock_acquire>:
 80036b8:	4801      	ldr	r0, [pc, #4]	; (80036c0 <__sinit_lock_acquire+0x8>)
 80036ba:	f000 b8a7 	b.w	800380c <__retarget_lock_acquire_recursive>
 80036be:	bf00      	nop
 80036c0:	2000030a 	.word	0x2000030a

080036c4 <__sinit_lock_release>:
 80036c4:	4801      	ldr	r0, [pc, #4]	; (80036cc <__sinit_lock_release+0x8>)
 80036c6:	f000 b8a2 	b.w	800380e <__retarget_lock_release_recursive>
 80036ca:	bf00      	nop
 80036cc:	2000030a 	.word	0x2000030a

080036d0 <__sinit>:
 80036d0:	b510      	push	{r4, lr}
 80036d2:	4604      	mov	r4, r0
 80036d4:	f7ff fff0 	bl	80036b8 <__sinit_lock_acquire>
 80036d8:	69a3      	ldr	r3, [r4, #24]
 80036da:	b11b      	cbz	r3, 80036e4 <__sinit+0x14>
 80036dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e0:	f7ff bff0 	b.w	80036c4 <__sinit_lock_release>
 80036e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036e8:	6523      	str	r3, [r4, #80]	; 0x50
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <__sinit+0x68>)
 80036ec:	4a13      	ldr	r2, [pc, #76]	; (800373c <__sinit+0x6c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80036f2:	42a3      	cmp	r3, r4
 80036f4:	bf08      	it	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	4620      	mov	r0, r4
 80036fa:	bf08      	it	eq
 80036fc:	61a3      	streq	r3, [r4, #24]
 80036fe:	f000 f81f 	bl	8003740 <__sfp>
 8003702:	6060      	str	r0, [r4, #4]
 8003704:	4620      	mov	r0, r4
 8003706:	f000 f81b 	bl	8003740 <__sfp>
 800370a:	60a0      	str	r0, [r4, #8]
 800370c:	4620      	mov	r0, r4
 800370e:	f000 f817 	bl	8003740 <__sfp>
 8003712:	2200      	movs	r2, #0
 8003714:	2104      	movs	r1, #4
 8003716:	60e0      	str	r0, [r4, #12]
 8003718:	6860      	ldr	r0, [r4, #4]
 800371a:	f7ff ff81 	bl	8003620 <std>
 800371e:	2201      	movs	r2, #1
 8003720:	2109      	movs	r1, #9
 8003722:	68a0      	ldr	r0, [r4, #8]
 8003724:	f7ff ff7c 	bl	8003620 <std>
 8003728:	2202      	movs	r2, #2
 800372a:	2112      	movs	r1, #18
 800372c:	68e0      	ldr	r0, [r4, #12]
 800372e:	f7ff ff77 	bl	8003620 <std>
 8003732:	2301      	movs	r3, #1
 8003734:	61a3      	str	r3, [r4, #24]
 8003736:	e7d1      	b.n	80036dc <__sinit+0xc>
 8003738:	080045c0 	.word	0x080045c0
 800373c:	08003669 	.word	0x08003669

08003740 <__sfp>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	4607      	mov	r7, r0
 8003744:	f7ff ffac 	bl	80036a0 <__sfp_lock_acquire>
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <__sfp+0x84>)
 800374a:	681e      	ldr	r6, [r3, #0]
 800374c:	69b3      	ldr	r3, [r6, #24]
 800374e:	b913      	cbnz	r3, 8003756 <__sfp+0x16>
 8003750:	4630      	mov	r0, r6
 8003752:	f7ff ffbd 	bl	80036d0 <__sinit>
 8003756:	3648      	adds	r6, #72	; 0x48
 8003758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800375c:	3b01      	subs	r3, #1
 800375e:	d503      	bpl.n	8003768 <__sfp+0x28>
 8003760:	6833      	ldr	r3, [r6, #0]
 8003762:	b30b      	cbz	r3, 80037a8 <__sfp+0x68>
 8003764:	6836      	ldr	r6, [r6, #0]
 8003766:	e7f7      	b.n	8003758 <__sfp+0x18>
 8003768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800376c:	b9d5      	cbnz	r5, 80037a4 <__sfp+0x64>
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <__sfp+0x88>)
 8003770:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003774:	60e3      	str	r3, [r4, #12]
 8003776:	6665      	str	r5, [r4, #100]	; 0x64
 8003778:	f000 f847 	bl	800380a <__retarget_lock_init_recursive>
 800377c:	f7ff ff96 	bl	80036ac <__sfp_lock_release>
 8003780:	2208      	movs	r2, #8
 8003782:	4629      	mov	r1, r5
 8003784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800378c:	6025      	str	r5, [r4, #0]
 800378e:	61a5      	str	r5, [r4, #24]
 8003790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003794:	f7ff ff24 	bl	80035e0 <memset>
 8003798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800379c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037a0:	4620      	mov	r0, r4
 80037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a4:	3468      	adds	r4, #104	; 0x68
 80037a6:	e7d9      	b.n	800375c <__sfp+0x1c>
 80037a8:	2104      	movs	r1, #4
 80037aa:	4638      	mov	r0, r7
 80037ac:	f7ff ff62 	bl	8003674 <__sfmoreglue>
 80037b0:	4604      	mov	r4, r0
 80037b2:	6030      	str	r0, [r6, #0]
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d1d5      	bne.n	8003764 <__sfp+0x24>
 80037b8:	f7ff ff78 	bl	80036ac <__sfp_lock_release>
 80037bc:	230c      	movs	r3, #12
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	e7ee      	b.n	80037a0 <__sfp+0x60>
 80037c2:	bf00      	nop
 80037c4:	080045c0 	.word	0x080045c0
 80037c8:	ffff0001 	.word	0xffff0001

080037cc <_fwalk_reent>:
 80037cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d0:	4606      	mov	r6, r0
 80037d2:	4688      	mov	r8, r1
 80037d4:	2700      	movs	r7, #0
 80037d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037de:	f1b9 0901 	subs.w	r9, r9, #1
 80037e2:	d505      	bpl.n	80037f0 <_fwalk_reent+0x24>
 80037e4:	6824      	ldr	r4, [r4, #0]
 80037e6:	2c00      	cmp	r4, #0
 80037e8:	d1f7      	bne.n	80037da <_fwalk_reent+0xe>
 80037ea:	4638      	mov	r0, r7
 80037ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037f0:	89ab      	ldrh	r3, [r5, #12]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d907      	bls.n	8003806 <_fwalk_reent+0x3a>
 80037f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037fa:	3301      	adds	r3, #1
 80037fc:	d003      	beq.n	8003806 <_fwalk_reent+0x3a>
 80037fe:	4629      	mov	r1, r5
 8003800:	4630      	mov	r0, r6
 8003802:	47c0      	blx	r8
 8003804:	4307      	orrs	r7, r0
 8003806:	3568      	adds	r5, #104	; 0x68
 8003808:	e7e9      	b.n	80037de <_fwalk_reent+0x12>

0800380a <__retarget_lock_init_recursive>:
 800380a:	4770      	bx	lr

0800380c <__retarget_lock_acquire_recursive>:
 800380c:	4770      	bx	lr

0800380e <__retarget_lock_release_recursive>:
 800380e:	4770      	bx	lr

08003810 <sbrk_aligned>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4e0e      	ldr	r6, [pc, #56]	; (800384c <sbrk_aligned+0x3c>)
 8003814:	460c      	mov	r4, r1
 8003816:	6831      	ldr	r1, [r6, #0]
 8003818:	4605      	mov	r5, r0
 800381a:	b911      	cbnz	r1, 8003822 <sbrk_aligned+0x12>
 800381c:	f000 fb7a 	bl	8003f14 <_sbrk_r>
 8003820:	6030      	str	r0, [r6, #0]
 8003822:	4621      	mov	r1, r4
 8003824:	4628      	mov	r0, r5
 8003826:	f000 fb75 	bl	8003f14 <_sbrk_r>
 800382a:	1c43      	adds	r3, r0, #1
 800382c:	d00a      	beq.n	8003844 <sbrk_aligned+0x34>
 800382e:	1cc4      	adds	r4, r0, #3
 8003830:	f024 0403 	bic.w	r4, r4, #3
 8003834:	42a0      	cmp	r0, r4
 8003836:	d007      	beq.n	8003848 <sbrk_aligned+0x38>
 8003838:	1a21      	subs	r1, r4, r0
 800383a:	4628      	mov	r0, r5
 800383c:	f000 fb6a 	bl	8003f14 <_sbrk_r>
 8003840:	3001      	adds	r0, #1
 8003842:	d101      	bne.n	8003848 <sbrk_aligned+0x38>
 8003844:	f04f 34ff 	mov.w	r4, #4294967295
 8003848:	4620      	mov	r0, r4
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	20000310 	.word	0x20000310

08003850 <_malloc_r>:
 8003850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003854:	1ccd      	adds	r5, r1, #3
 8003856:	f025 0503 	bic.w	r5, r5, #3
 800385a:	3508      	adds	r5, #8
 800385c:	2d0c      	cmp	r5, #12
 800385e:	bf38      	it	cc
 8003860:	250c      	movcc	r5, #12
 8003862:	2d00      	cmp	r5, #0
 8003864:	4607      	mov	r7, r0
 8003866:	db01      	blt.n	800386c <_malloc_r+0x1c>
 8003868:	42a9      	cmp	r1, r5
 800386a:	d905      	bls.n	8003878 <_malloc_r+0x28>
 800386c:	230c      	movs	r3, #12
 800386e:	2600      	movs	r6, #0
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	4630      	mov	r0, r6
 8003874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003878:	4e2e      	ldr	r6, [pc, #184]	; (8003934 <_malloc_r+0xe4>)
 800387a:	f000 fdc5 	bl	8004408 <__malloc_lock>
 800387e:	6833      	ldr	r3, [r6, #0]
 8003880:	461c      	mov	r4, r3
 8003882:	bb34      	cbnz	r4, 80038d2 <_malloc_r+0x82>
 8003884:	4629      	mov	r1, r5
 8003886:	4638      	mov	r0, r7
 8003888:	f7ff ffc2 	bl	8003810 <sbrk_aligned>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	4604      	mov	r4, r0
 8003890:	d14d      	bne.n	800392e <_malloc_r+0xde>
 8003892:	6834      	ldr	r4, [r6, #0]
 8003894:	4626      	mov	r6, r4
 8003896:	2e00      	cmp	r6, #0
 8003898:	d140      	bne.n	800391c <_malloc_r+0xcc>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	4631      	mov	r1, r6
 800389e:	4638      	mov	r0, r7
 80038a0:	eb04 0803 	add.w	r8, r4, r3
 80038a4:	f000 fb36 	bl	8003f14 <_sbrk_r>
 80038a8:	4580      	cmp	r8, r0
 80038aa:	d13a      	bne.n	8003922 <_malloc_r+0xd2>
 80038ac:	6821      	ldr	r1, [r4, #0]
 80038ae:	3503      	adds	r5, #3
 80038b0:	1a6d      	subs	r5, r5, r1
 80038b2:	f025 0503 	bic.w	r5, r5, #3
 80038b6:	3508      	adds	r5, #8
 80038b8:	2d0c      	cmp	r5, #12
 80038ba:	bf38      	it	cc
 80038bc:	250c      	movcc	r5, #12
 80038be:	4638      	mov	r0, r7
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7ff ffa5 	bl	8003810 <sbrk_aligned>
 80038c6:	3001      	adds	r0, #1
 80038c8:	d02b      	beq.n	8003922 <_malloc_r+0xd2>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	442b      	add	r3, r5
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	e00e      	b.n	80038f0 <_malloc_r+0xa0>
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	1b52      	subs	r2, r2, r5
 80038d6:	d41e      	bmi.n	8003916 <_malloc_r+0xc6>
 80038d8:	2a0b      	cmp	r2, #11
 80038da:	d916      	bls.n	800390a <_malloc_r+0xba>
 80038dc:	1961      	adds	r1, r4, r5
 80038de:	42a3      	cmp	r3, r4
 80038e0:	6025      	str	r5, [r4, #0]
 80038e2:	bf18      	it	ne
 80038e4:	6059      	strne	r1, [r3, #4]
 80038e6:	6863      	ldr	r3, [r4, #4]
 80038e8:	bf08      	it	eq
 80038ea:	6031      	streq	r1, [r6, #0]
 80038ec:	5162      	str	r2, [r4, r5]
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	4638      	mov	r0, r7
 80038f2:	f104 060b 	add.w	r6, r4, #11
 80038f6:	f000 fd8d 	bl	8004414 <__malloc_unlock>
 80038fa:	f026 0607 	bic.w	r6, r6, #7
 80038fe:	1d23      	adds	r3, r4, #4
 8003900:	1af2      	subs	r2, r6, r3
 8003902:	d0b6      	beq.n	8003872 <_malloc_r+0x22>
 8003904:	1b9b      	subs	r3, r3, r6
 8003906:	50a3      	str	r3, [r4, r2]
 8003908:	e7b3      	b.n	8003872 <_malloc_r+0x22>
 800390a:	6862      	ldr	r2, [r4, #4]
 800390c:	42a3      	cmp	r3, r4
 800390e:	bf0c      	ite	eq
 8003910:	6032      	streq	r2, [r6, #0]
 8003912:	605a      	strne	r2, [r3, #4]
 8003914:	e7ec      	b.n	80038f0 <_malloc_r+0xa0>
 8003916:	4623      	mov	r3, r4
 8003918:	6864      	ldr	r4, [r4, #4]
 800391a:	e7b2      	b.n	8003882 <_malloc_r+0x32>
 800391c:	4634      	mov	r4, r6
 800391e:	6876      	ldr	r6, [r6, #4]
 8003920:	e7b9      	b.n	8003896 <_malloc_r+0x46>
 8003922:	230c      	movs	r3, #12
 8003924:	4638      	mov	r0, r7
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	f000 fd74 	bl	8004414 <__malloc_unlock>
 800392c:	e7a1      	b.n	8003872 <_malloc_r+0x22>
 800392e:	6025      	str	r5, [r4, #0]
 8003930:	e7de      	b.n	80038f0 <_malloc_r+0xa0>
 8003932:	bf00      	nop
 8003934:	2000030c 	.word	0x2000030c

08003938 <__sfputc_r>:
 8003938:	6893      	ldr	r3, [r2, #8]
 800393a:	b410      	push	{r4}
 800393c:	3b01      	subs	r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	6093      	str	r3, [r2, #8]
 8003942:	da07      	bge.n	8003954 <__sfputc_r+0x1c>
 8003944:	6994      	ldr	r4, [r2, #24]
 8003946:	42a3      	cmp	r3, r4
 8003948:	db01      	blt.n	800394e <__sfputc_r+0x16>
 800394a:	290a      	cmp	r1, #10
 800394c:	d102      	bne.n	8003954 <__sfputc_r+0x1c>
 800394e:	bc10      	pop	{r4}
 8003950:	f000 bb34 	b.w	8003fbc <__swbuf_r>
 8003954:	6813      	ldr	r3, [r2, #0]
 8003956:	1c58      	adds	r0, r3, #1
 8003958:	6010      	str	r0, [r2, #0]
 800395a:	7019      	strb	r1, [r3, #0]
 800395c:	4608      	mov	r0, r1
 800395e:	bc10      	pop	{r4}
 8003960:	4770      	bx	lr

08003962 <__sfputs_r>:
 8003962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003964:	4606      	mov	r6, r0
 8003966:	460f      	mov	r7, r1
 8003968:	4614      	mov	r4, r2
 800396a:	18d5      	adds	r5, r2, r3
 800396c:	42ac      	cmp	r4, r5
 800396e:	d101      	bne.n	8003974 <__sfputs_r+0x12>
 8003970:	2000      	movs	r0, #0
 8003972:	e007      	b.n	8003984 <__sfputs_r+0x22>
 8003974:	463a      	mov	r2, r7
 8003976:	4630      	mov	r0, r6
 8003978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800397c:	f7ff ffdc 	bl	8003938 <__sfputc_r>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d1f3      	bne.n	800396c <__sfputs_r+0xa>
 8003984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003988 <_vfiprintf_r>:
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	460d      	mov	r5, r1
 800398e:	4614      	mov	r4, r2
 8003990:	4698      	mov	r8, r3
 8003992:	4606      	mov	r6, r0
 8003994:	b09d      	sub	sp, #116	; 0x74
 8003996:	b118      	cbz	r0, 80039a0 <_vfiprintf_r+0x18>
 8003998:	6983      	ldr	r3, [r0, #24]
 800399a:	b90b      	cbnz	r3, 80039a0 <_vfiprintf_r+0x18>
 800399c:	f7ff fe98 	bl	80036d0 <__sinit>
 80039a0:	4b89      	ldr	r3, [pc, #548]	; (8003bc8 <_vfiprintf_r+0x240>)
 80039a2:	429d      	cmp	r5, r3
 80039a4:	d11b      	bne.n	80039de <_vfiprintf_r+0x56>
 80039a6:	6875      	ldr	r5, [r6, #4]
 80039a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039aa:	07d9      	lsls	r1, r3, #31
 80039ac:	d405      	bmi.n	80039ba <_vfiprintf_r+0x32>
 80039ae:	89ab      	ldrh	r3, [r5, #12]
 80039b0:	059a      	lsls	r2, r3, #22
 80039b2:	d402      	bmi.n	80039ba <_vfiprintf_r+0x32>
 80039b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039b6:	f7ff ff29 	bl	800380c <__retarget_lock_acquire_recursive>
 80039ba:	89ab      	ldrh	r3, [r5, #12]
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	d501      	bpl.n	80039c4 <_vfiprintf_r+0x3c>
 80039c0:	692b      	ldr	r3, [r5, #16]
 80039c2:	b9eb      	cbnz	r3, 8003a00 <_vfiprintf_r+0x78>
 80039c4:	4629      	mov	r1, r5
 80039c6:	4630      	mov	r0, r6
 80039c8:	f000 fb5c 	bl	8004084 <__swsetup_r>
 80039cc:	b1c0      	cbz	r0, 8003a00 <_vfiprintf_r+0x78>
 80039ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039d0:	07dc      	lsls	r4, r3, #31
 80039d2:	d50e      	bpl.n	80039f2 <_vfiprintf_r+0x6a>
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	b01d      	add	sp, #116	; 0x74
 80039da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039de:	4b7b      	ldr	r3, [pc, #492]	; (8003bcc <_vfiprintf_r+0x244>)
 80039e0:	429d      	cmp	r5, r3
 80039e2:	d101      	bne.n	80039e8 <_vfiprintf_r+0x60>
 80039e4:	68b5      	ldr	r5, [r6, #8]
 80039e6:	e7df      	b.n	80039a8 <_vfiprintf_r+0x20>
 80039e8:	4b79      	ldr	r3, [pc, #484]	; (8003bd0 <_vfiprintf_r+0x248>)
 80039ea:	429d      	cmp	r5, r3
 80039ec:	bf08      	it	eq
 80039ee:	68f5      	ldreq	r5, [r6, #12]
 80039f0:	e7da      	b.n	80039a8 <_vfiprintf_r+0x20>
 80039f2:	89ab      	ldrh	r3, [r5, #12]
 80039f4:	0598      	lsls	r0, r3, #22
 80039f6:	d4ed      	bmi.n	80039d4 <_vfiprintf_r+0x4c>
 80039f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039fa:	f7ff ff08 	bl	800380e <__retarget_lock_release_recursive>
 80039fe:	e7e9      	b.n	80039d4 <_vfiprintf_r+0x4c>
 8003a00:	2300      	movs	r3, #0
 8003a02:	9309      	str	r3, [sp, #36]	; 0x24
 8003a04:	2320      	movs	r3, #32
 8003a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a0a:	2330      	movs	r3, #48	; 0x30
 8003a0c:	f04f 0901 	mov.w	r9, #1
 8003a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a14:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003bd4 <_vfiprintf_r+0x24c>
 8003a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	469a      	mov	sl, r3
 8003a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a24:	b10a      	cbz	r2, 8003a2a <_vfiprintf_r+0xa2>
 8003a26:	2a25      	cmp	r2, #37	; 0x25
 8003a28:	d1f9      	bne.n	8003a1e <_vfiprintf_r+0x96>
 8003a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8003a2e:	d00b      	beq.n	8003a48 <_vfiprintf_r+0xc0>
 8003a30:	465b      	mov	r3, fp
 8003a32:	4622      	mov	r2, r4
 8003a34:	4629      	mov	r1, r5
 8003a36:	4630      	mov	r0, r6
 8003a38:	f7ff ff93 	bl	8003962 <__sfputs_r>
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	f000 80aa 	beq.w	8003b96 <_vfiprintf_r+0x20e>
 8003a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a44:	445a      	add	r2, fp
 8003a46:	9209      	str	r2, [sp, #36]	; 0x24
 8003a48:	f89a 3000 	ldrb.w	r3, [sl]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80a2 	beq.w	8003b96 <_vfiprintf_r+0x20e>
 8003a52:	2300      	movs	r3, #0
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a5c:	f10a 0a01 	add.w	sl, sl, #1
 8003a60:	9304      	str	r3, [sp, #16]
 8003a62:	9307      	str	r3, [sp, #28]
 8003a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a68:	931a      	str	r3, [sp, #104]	; 0x68
 8003a6a:	4654      	mov	r4, sl
 8003a6c:	2205      	movs	r2, #5
 8003a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a72:	4858      	ldr	r0, [pc, #352]	; (8003bd4 <_vfiprintf_r+0x24c>)
 8003a74:	f000 fcba 	bl	80043ec <memchr>
 8003a78:	9a04      	ldr	r2, [sp, #16]
 8003a7a:	b9d8      	cbnz	r0, 8003ab4 <_vfiprintf_r+0x12c>
 8003a7c:	06d1      	lsls	r1, r2, #27
 8003a7e:	bf44      	itt	mi
 8003a80:	2320      	movmi	r3, #32
 8003a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a86:	0713      	lsls	r3, r2, #28
 8003a88:	bf44      	itt	mi
 8003a8a:	232b      	movmi	r3, #43	; 0x2b
 8003a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a90:	f89a 3000 	ldrb.w	r3, [sl]
 8003a94:	2b2a      	cmp	r3, #42	; 0x2a
 8003a96:	d015      	beq.n	8003ac4 <_vfiprintf_r+0x13c>
 8003a98:	4654      	mov	r4, sl
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f04f 0c0a 	mov.w	ip, #10
 8003aa0:	9a07      	ldr	r2, [sp, #28]
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aa8:	3b30      	subs	r3, #48	; 0x30
 8003aaa:	2b09      	cmp	r3, #9
 8003aac:	d94e      	bls.n	8003b4c <_vfiprintf_r+0x1c4>
 8003aae:	b1b0      	cbz	r0, 8003ade <_vfiprintf_r+0x156>
 8003ab0:	9207      	str	r2, [sp, #28]
 8003ab2:	e014      	b.n	8003ade <_vfiprintf_r+0x156>
 8003ab4:	eba0 0308 	sub.w	r3, r0, r8
 8003ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8003abc:	4313      	orrs	r3, r2
 8003abe:	46a2      	mov	sl, r4
 8003ac0:	9304      	str	r3, [sp, #16]
 8003ac2:	e7d2      	b.n	8003a6a <_vfiprintf_r+0xe2>
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	1d19      	adds	r1, r3, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	9103      	str	r1, [sp, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bfbb      	ittet	lt
 8003ad0:	425b      	neglt	r3, r3
 8003ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ad6:	9307      	strge	r3, [sp, #28]
 8003ad8:	9307      	strlt	r3, [sp, #28]
 8003ada:	bfb8      	it	lt
 8003adc:	9204      	strlt	r2, [sp, #16]
 8003ade:	7823      	ldrb	r3, [r4, #0]
 8003ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ae2:	d10c      	bne.n	8003afe <_vfiprintf_r+0x176>
 8003ae4:	7863      	ldrb	r3, [r4, #1]
 8003ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ae8:	d135      	bne.n	8003b56 <_vfiprintf_r+0x1ce>
 8003aea:	9b03      	ldr	r3, [sp, #12]
 8003aec:	3402      	adds	r4, #2
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	9203      	str	r2, [sp, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bfb8      	it	lt
 8003af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003afc:	9305      	str	r3, [sp, #20]
 8003afe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003bd8 <_vfiprintf_r+0x250>
 8003b02:	2203      	movs	r2, #3
 8003b04:	4650      	mov	r0, sl
 8003b06:	7821      	ldrb	r1, [r4, #0]
 8003b08:	f000 fc70 	bl	80043ec <memchr>
 8003b0c:	b140      	cbz	r0, 8003b20 <_vfiprintf_r+0x198>
 8003b0e:	2340      	movs	r3, #64	; 0x40
 8003b10:	eba0 000a 	sub.w	r0, r0, sl
 8003b14:	fa03 f000 	lsl.w	r0, r3, r0
 8003b18:	9b04      	ldr	r3, [sp, #16]
 8003b1a:	3401      	adds	r4, #1
 8003b1c:	4303      	orrs	r3, r0
 8003b1e:	9304      	str	r3, [sp, #16]
 8003b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b24:	2206      	movs	r2, #6
 8003b26:	482d      	ldr	r0, [pc, #180]	; (8003bdc <_vfiprintf_r+0x254>)
 8003b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b2c:	f000 fc5e 	bl	80043ec <memchr>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d03f      	beq.n	8003bb4 <_vfiprintf_r+0x22c>
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <_vfiprintf_r+0x258>)
 8003b36:	bb1b      	cbnz	r3, 8003b80 <_vfiprintf_r+0x1f8>
 8003b38:	9b03      	ldr	r3, [sp, #12]
 8003b3a:	3307      	adds	r3, #7
 8003b3c:	f023 0307 	bic.w	r3, r3, #7
 8003b40:	3308      	adds	r3, #8
 8003b42:	9303      	str	r3, [sp, #12]
 8003b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b46:	443b      	add	r3, r7
 8003b48:	9309      	str	r3, [sp, #36]	; 0x24
 8003b4a:	e767      	b.n	8003a1c <_vfiprintf_r+0x94>
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	2001      	movs	r0, #1
 8003b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b54:	e7a5      	b.n	8003aa2 <_vfiprintf_r+0x11a>
 8003b56:	2300      	movs	r3, #0
 8003b58:	f04f 0c0a 	mov.w	ip, #10
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	3401      	adds	r4, #1
 8003b60:	9305      	str	r3, [sp, #20]
 8003b62:	4620      	mov	r0, r4
 8003b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b68:	3a30      	subs	r2, #48	; 0x30
 8003b6a:	2a09      	cmp	r2, #9
 8003b6c:	d903      	bls.n	8003b76 <_vfiprintf_r+0x1ee>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0c5      	beq.n	8003afe <_vfiprintf_r+0x176>
 8003b72:	9105      	str	r1, [sp, #20]
 8003b74:	e7c3      	b.n	8003afe <_vfiprintf_r+0x176>
 8003b76:	4604      	mov	r4, r0
 8003b78:	2301      	movs	r3, #1
 8003b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b7e:	e7f0      	b.n	8003b62 <_vfiprintf_r+0x1da>
 8003b80:	ab03      	add	r3, sp, #12
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	462a      	mov	r2, r5
 8003b86:	4630      	mov	r0, r6
 8003b88:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <_vfiprintf_r+0x25c>)
 8003b8a:	a904      	add	r1, sp, #16
 8003b8c:	f3af 8000 	nop.w
 8003b90:	4607      	mov	r7, r0
 8003b92:	1c78      	adds	r0, r7, #1
 8003b94:	d1d6      	bne.n	8003b44 <_vfiprintf_r+0x1bc>
 8003b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b98:	07d9      	lsls	r1, r3, #31
 8003b9a:	d405      	bmi.n	8003ba8 <_vfiprintf_r+0x220>
 8003b9c:	89ab      	ldrh	r3, [r5, #12]
 8003b9e:	059a      	lsls	r2, r3, #22
 8003ba0:	d402      	bmi.n	8003ba8 <_vfiprintf_r+0x220>
 8003ba2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ba4:	f7ff fe33 	bl	800380e <__retarget_lock_release_recursive>
 8003ba8:	89ab      	ldrh	r3, [r5, #12]
 8003baa:	065b      	lsls	r3, r3, #25
 8003bac:	f53f af12 	bmi.w	80039d4 <_vfiprintf_r+0x4c>
 8003bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bb2:	e711      	b.n	80039d8 <_vfiprintf_r+0x50>
 8003bb4:	ab03      	add	r3, sp, #12
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	462a      	mov	r2, r5
 8003bba:	4630      	mov	r0, r6
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <_vfiprintf_r+0x25c>)
 8003bbe:	a904      	add	r1, sp, #16
 8003bc0:	f000 f882 	bl	8003cc8 <_printf_i>
 8003bc4:	e7e4      	b.n	8003b90 <_vfiprintf_r+0x208>
 8003bc6:	bf00      	nop
 8003bc8:	080045e4 	.word	0x080045e4
 8003bcc:	08004604 	.word	0x08004604
 8003bd0:	080045c4 	.word	0x080045c4
 8003bd4:	08004624 	.word	0x08004624
 8003bd8:	0800462a 	.word	0x0800462a
 8003bdc:	0800462e 	.word	0x0800462e
 8003be0:	00000000 	.word	0x00000000
 8003be4:	08003963 	.word	0x08003963

08003be8 <_printf_common>:
 8003be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	4616      	mov	r6, r2
 8003bee:	4699      	mov	r9, r3
 8003bf0:	688a      	ldr	r2, [r1, #8]
 8003bf2:	690b      	ldr	r3, [r1, #16]
 8003bf4:	4607      	mov	r7, r0
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	bfb8      	it	lt
 8003bfa:	4613      	movlt	r3, r2
 8003bfc:	6033      	str	r3, [r6, #0]
 8003bfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c02:	460c      	mov	r4, r1
 8003c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c08:	b10a      	cbz	r2, 8003c0e <_printf_common+0x26>
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	6033      	str	r3, [r6, #0]
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	0699      	lsls	r1, r3, #26
 8003c12:	bf42      	ittt	mi
 8003c14:	6833      	ldrmi	r3, [r6, #0]
 8003c16:	3302      	addmi	r3, #2
 8003c18:	6033      	strmi	r3, [r6, #0]
 8003c1a:	6825      	ldr	r5, [r4, #0]
 8003c1c:	f015 0506 	ands.w	r5, r5, #6
 8003c20:	d106      	bne.n	8003c30 <_printf_common+0x48>
 8003c22:	f104 0a19 	add.w	sl, r4, #25
 8003c26:	68e3      	ldr	r3, [r4, #12]
 8003c28:	6832      	ldr	r2, [r6, #0]
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	42ab      	cmp	r3, r5
 8003c2e:	dc28      	bgt.n	8003c82 <_printf_common+0x9a>
 8003c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c34:	1e13      	subs	r3, r2, #0
 8003c36:	6822      	ldr	r2, [r4, #0]
 8003c38:	bf18      	it	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	0692      	lsls	r2, r2, #26
 8003c3e:	d42d      	bmi.n	8003c9c <_printf_common+0xb4>
 8003c40:	4649      	mov	r1, r9
 8003c42:	4638      	mov	r0, r7
 8003c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c48:	47c0      	blx	r8
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d020      	beq.n	8003c90 <_printf_common+0xa8>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	68e5      	ldr	r5, [r4, #12]
 8003c52:	f003 0306 	and.w	r3, r3, #6
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	bf18      	it	ne
 8003c5a:	2500      	movne	r5, #0
 8003c5c:	6832      	ldr	r2, [r6, #0]
 8003c5e:	f04f 0600 	mov.w	r6, #0
 8003c62:	68a3      	ldr	r3, [r4, #8]
 8003c64:	bf08      	it	eq
 8003c66:	1aad      	subeq	r5, r5, r2
 8003c68:	6922      	ldr	r2, [r4, #16]
 8003c6a:	bf08      	it	eq
 8003c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bfc4      	itt	gt
 8003c74:	1a9b      	subgt	r3, r3, r2
 8003c76:	18ed      	addgt	r5, r5, r3
 8003c78:	341a      	adds	r4, #26
 8003c7a:	42b5      	cmp	r5, r6
 8003c7c:	d11a      	bne.n	8003cb4 <_printf_common+0xcc>
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e008      	b.n	8003c94 <_printf_common+0xac>
 8003c82:	2301      	movs	r3, #1
 8003c84:	4652      	mov	r2, sl
 8003c86:	4649      	mov	r1, r9
 8003c88:	4638      	mov	r0, r7
 8003c8a:	47c0      	blx	r8
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d103      	bne.n	8003c98 <_printf_common+0xb0>
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	3501      	adds	r5, #1
 8003c9a:	e7c4      	b.n	8003c26 <_printf_common+0x3e>
 8003c9c:	2030      	movs	r0, #48	; 0x30
 8003c9e:	18e1      	adds	r1, r4, r3
 8003ca0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003caa:	4422      	add	r2, r4
 8003cac:	3302      	adds	r3, #2
 8003cae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cb2:	e7c5      	b.n	8003c40 <_printf_common+0x58>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	4649      	mov	r1, r9
 8003cba:	4638      	mov	r0, r7
 8003cbc:	47c0      	blx	r8
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	d0e6      	beq.n	8003c90 <_printf_common+0xa8>
 8003cc2:	3601      	adds	r6, #1
 8003cc4:	e7d9      	b.n	8003c7a <_printf_common+0x92>
	...

08003cc8 <_printf_i>:
 8003cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ccc:	7e0f      	ldrb	r7, [r1, #24]
 8003cce:	4691      	mov	r9, r2
 8003cd0:	2f78      	cmp	r7, #120	; 0x78
 8003cd2:	4680      	mov	r8, r0
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	469a      	mov	sl, r3
 8003cd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cde:	d807      	bhi.n	8003cf0 <_printf_i+0x28>
 8003ce0:	2f62      	cmp	r7, #98	; 0x62
 8003ce2:	d80a      	bhi.n	8003cfa <_printf_i+0x32>
 8003ce4:	2f00      	cmp	r7, #0
 8003ce6:	f000 80d9 	beq.w	8003e9c <_printf_i+0x1d4>
 8003cea:	2f58      	cmp	r7, #88	; 0x58
 8003cec:	f000 80a4 	beq.w	8003e38 <_printf_i+0x170>
 8003cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cf8:	e03a      	b.n	8003d70 <_printf_i+0xa8>
 8003cfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cfe:	2b15      	cmp	r3, #21
 8003d00:	d8f6      	bhi.n	8003cf0 <_printf_i+0x28>
 8003d02:	a101      	add	r1, pc, #4	; (adr r1, 8003d08 <_printf_i+0x40>)
 8003d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d08:	08003d61 	.word	0x08003d61
 8003d0c:	08003d75 	.word	0x08003d75
 8003d10:	08003cf1 	.word	0x08003cf1
 8003d14:	08003cf1 	.word	0x08003cf1
 8003d18:	08003cf1 	.word	0x08003cf1
 8003d1c:	08003cf1 	.word	0x08003cf1
 8003d20:	08003d75 	.word	0x08003d75
 8003d24:	08003cf1 	.word	0x08003cf1
 8003d28:	08003cf1 	.word	0x08003cf1
 8003d2c:	08003cf1 	.word	0x08003cf1
 8003d30:	08003cf1 	.word	0x08003cf1
 8003d34:	08003e83 	.word	0x08003e83
 8003d38:	08003da5 	.word	0x08003da5
 8003d3c:	08003e65 	.word	0x08003e65
 8003d40:	08003cf1 	.word	0x08003cf1
 8003d44:	08003cf1 	.word	0x08003cf1
 8003d48:	08003ea5 	.word	0x08003ea5
 8003d4c:	08003cf1 	.word	0x08003cf1
 8003d50:	08003da5 	.word	0x08003da5
 8003d54:	08003cf1 	.word	0x08003cf1
 8003d58:	08003cf1 	.word	0x08003cf1
 8003d5c:	08003e6d 	.word	0x08003e6d
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	1d1a      	adds	r2, r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	602a      	str	r2, [r5, #0]
 8003d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0a4      	b.n	8003ebe <_printf_i+0x1f6>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	6829      	ldr	r1, [r5, #0]
 8003d78:	0606      	lsls	r6, r0, #24
 8003d7a:	f101 0304 	add.w	r3, r1, #4
 8003d7e:	d50a      	bpl.n	8003d96 <_printf_i+0xce>
 8003d80:	680e      	ldr	r6, [r1, #0]
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	2e00      	cmp	r6, #0
 8003d86:	da03      	bge.n	8003d90 <_printf_i+0xc8>
 8003d88:	232d      	movs	r3, #45	; 0x2d
 8003d8a:	4276      	negs	r6, r6
 8003d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d90:	230a      	movs	r3, #10
 8003d92:	485e      	ldr	r0, [pc, #376]	; (8003f0c <_printf_i+0x244>)
 8003d94:	e019      	b.n	8003dca <_printf_i+0x102>
 8003d96:	680e      	ldr	r6, [r1, #0]
 8003d98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d9c:	602b      	str	r3, [r5, #0]
 8003d9e:	bf18      	it	ne
 8003da0:	b236      	sxthne	r6, r6
 8003da2:	e7ef      	b.n	8003d84 <_printf_i+0xbc>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	1d19      	adds	r1, r3, #4
 8003daa:	6029      	str	r1, [r5, #0]
 8003dac:	0601      	lsls	r1, r0, #24
 8003dae:	d501      	bpl.n	8003db4 <_printf_i+0xec>
 8003db0:	681e      	ldr	r6, [r3, #0]
 8003db2:	e002      	b.n	8003dba <_printf_i+0xf2>
 8003db4:	0646      	lsls	r6, r0, #25
 8003db6:	d5fb      	bpl.n	8003db0 <_printf_i+0xe8>
 8003db8:	881e      	ldrh	r6, [r3, #0]
 8003dba:	2f6f      	cmp	r7, #111	; 0x6f
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2308      	moveq	r3, #8
 8003dc0:	230a      	movne	r3, #10
 8003dc2:	4852      	ldr	r0, [pc, #328]	; (8003f0c <_printf_i+0x244>)
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dca:	6865      	ldr	r5, [r4, #4]
 8003dcc:	2d00      	cmp	r5, #0
 8003dce:	bfa8      	it	ge
 8003dd0:	6821      	ldrge	r1, [r4, #0]
 8003dd2:	60a5      	str	r5, [r4, #8]
 8003dd4:	bfa4      	itt	ge
 8003dd6:	f021 0104 	bicge.w	r1, r1, #4
 8003dda:	6021      	strge	r1, [r4, #0]
 8003ddc:	b90e      	cbnz	r6, 8003de2 <_printf_i+0x11a>
 8003dde:	2d00      	cmp	r5, #0
 8003de0:	d04d      	beq.n	8003e7e <_printf_i+0x1b6>
 8003de2:	4615      	mov	r5, r2
 8003de4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003de8:	fb03 6711 	mls	r7, r3, r1, r6
 8003dec:	5dc7      	ldrb	r7, [r0, r7]
 8003dee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003df2:	4637      	mov	r7, r6
 8003df4:	42bb      	cmp	r3, r7
 8003df6:	460e      	mov	r6, r1
 8003df8:	d9f4      	bls.n	8003de4 <_printf_i+0x11c>
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d10b      	bne.n	8003e16 <_printf_i+0x14e>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	07de      	lsls	r6, r3, #31
 8003e02:	d508      	bpl.n	8003e16 <_printf_i+0x14e>
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	6861      	ldr	r1, [r4, #4]
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	bfde      	ittt	le
 8003e0c:	2330      	movle	r3, #48	; 0x30
 8003e0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e16:	1b52      	subs	r2, r2, r5
 8003e18:	6122      	str	r2, [r4, #16]
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f8cd a000 	str.w	sl, [sp]
 8003e24:	aa03      	add	r2, sp, #12
 8003e26:	f7ff fedf 	bl	8003be8 <_printf_common>
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d14c      	bne.n	8003ec8 <_printf_i+0x200>
 8003e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e32:	b004      	add	sp, #16
 8003e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e38:	4834      	ldr	r0, [pc, #208]	; (8003f0c <_printf_i+0x244>)
 8003e3a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e3e:	6829      	ldr	r1, [r5, #0]
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e46:	6029      	str	r1, [r5, #0]
 8003e48:	061d      	lsls	r5, r3, #24
 8003e4a:	d514      	bpl.n	8003e76 <_printf_i+0x1ae>
 8003e4c:	07df      	lsls	r7, r3, #31
 8003e4e:	bf44      	itt	mi
 8003e50:	f043 0320 	orrmi.w	r3, r3, #32
 8003e54:	6023      	strmi	r3, [r4, #0]
 8003e56:	b91e      	cbnz	r6, 8003e60 <_printf_i+0x198>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	f023 0320 	bic.w	r3, r3, #32
 8003e5e:	6023      	str	r3, [r4, #0]
 8003e60:	2310      	movs	r3, #16
 8003e62:	e7af      	b.n	8003dc4 <_printf_i+0xfc>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	f043 0320 	orr.w	r3, r3, #32
 8003e6a:	6023      	str	r3, [r4, #0]
 8003e6c:	2378      	movs	r3, #120	; 0x78
 8003e6e:	4828      	ldr	r0, [pc, #160]	; (8003f10 <_printf_i+0x248>)
 8003e70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e74:	e7e3      	b.n	8003e3e <_printf_i+0x176>
 8003e76:	0659      	lsls	r1, r3, #25
 8003e78:	bf48      	it	mi
 8003e7a:	b2b6      	uxthmi	r6, r6
 8003e7c:	e7e6      	b.n	8003e4c <_printf_i+0x184>
 8003e7e:	4615      	mov	r5, r2
 8003e80:	e7bb      	b.n	8003dfa <_printf_i+0x132>
 8003e82:	682b      	ldr	r3, [r5, #0]
 8003e84:	6826      	ldr	r6, [r4, #0]
 8003e86:	1d18      	adds	r0, r3, #4
 8003e88:	6961      	ldr	r1, [r4, #20]
 8003e8a:	6028      	str	r0, [r5, #0]
 8003e8c:	0635      	lsls	r5, r6, #24
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	d501      	bpl.n	8003e96 <_printf_i+0x1ce>
 8003e92:	6019      	str	r1, [r3, #0]
 8003e94:	e002      	b.n	8003e9c <_printf_i+0x1d4>
 8003e96:	0670      	lsls	r0, r6, #25
 8003e98:	d5fb      	bpl.n	8003e92 <_printf_i+0x1ca>
 8003e9a:	8019      	strh	r1, [r3, #0]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	4615      	mov	r5, r2
 8003ea0:	6123      	str	r3, [r4, #16]
 8003ea2:	e7ba      	b.n	8003e1a <_printf_i+0x152>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	1d1a      	adds	r2, r3, #4
 8003eaa:	602a      	str	r2, [r5, #0]
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	6862      	ldr	r2, [r4, #4]
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f000 fa9b 	bl	80043ec <memchr>
 8003eb6:	b108      	cbz	r0, 8003ebc <_printf_i+0x1f4>
 8003eb8:	1b40      	subs	r0, r0, r5
 8003eba:	6060      	str	r0, [r4, #4]
 8003ebc:	6863      	ldr	r3, [r4, #4]
 8003ebe:	6123      	str	r3, [r4, #16]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ec6:	e7a8      	b.n	8003e1a <_printf_i+0x152>
 8003ec8:	462a      	mov	r2, r5
 8003eca:	4649      	mov	r1, r9
 8003ecc:	4640      	mov	r0, r8
 8003ece:	6923      	ldr	r3, [r4, #16]
 8003ed0:	47d0      	blx	sl
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d0ab      	beq.n	8003e2e <_printf_i+0x166>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	079b      	lsls	r3, r3, #30
 8003eda:	d413      	bmi.n	8003f04 <_printf_i+0x23c>
 8003edc:	68e0      	ldr	r0, [r4, #12]
 8003ede:	9b03      	ldr	r3, [sp, #12]
 8003ee0:	4298      	cmp	r0, r3
 8003ee2:	bfb8      	it	lt
 8003ee4:	4618      	movlt	r0, r3
 8003ee6:	e7a4      	b.n	8003e32 <_printf_i+0x16a>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	4632      	mov	r2, r6
 8003eec:	4649      	mov	r1, r9
 8003eee:	4640      	mov	r0, r8
 8003ef0:	47d0      	blx	sl
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d09b      	beq.n	8003e2e <_printf_i+0x166>
 8003ef6:	3501      	adds	r5, #1
 8003ef8:	68e3      	ldr	r3, [r4, #12]
 8003efa:	9903      	ldr	r1, [sp, #12]
 8003efc:	1a5b      	subs	r3, r3, r1
 8003efe:	42ab      	cmp	r3, r5
 8003f00:	dcf2      	bgt.n	8003ee8 <_printf_i+0x220>
 8003f02:	e7eb      	b.n	8003edc <_printf_i+0x214>
 8003f04:	2500      	movs	r5, #0
 8003f06:	f104 0619 	add.w	r6, r4, #25
 8003f0a:	e7f5      	b.n	8003ef8 <_printf_i+0x230>
 8003f0c:	08004635 	.word	0x08004635
 8003f10:	08004646 	.word	0x08004646

08003f14 <_sbrk_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	2300      	movs	r3, #0
 8003f18:	4d05      	ldr	r5, [pc, #20]	; (8003f30 <_sbrk_r+0x1c>)
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fc fe32 	bl	8000b88 <_sbrk>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_sbrk_r+0x1a>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_sbrk_r+0x1a>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000314 	.word	0x20000314

08003f34 <__sread>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	460c      	mov	r4, r1
 8003f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3c:	f000 fab8 	bl	80044b0 <_read_r>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	bfab      	itete	ge
 8003f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f46:	89a3      	ldrhlt	r3, [r4, #12]
 8003f48:	181b      	addge	r3, r3, r0
 8003f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f4e:	bfac      	ite	ge
 8003f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f52:	81a3      	strhlt	r3, [r4, #12]
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <__swrite>:
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	461f      	mov	r7, r3
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	4605      	mov	r5, r0
 8003f60:	05db      	lsls	r3, r3, #23
 8003f62:	460c      	mov	r4, r1
 8003f64:	4616      	mov	r6, r2
 8003f66:	d505      	bpl.n	8003f74 <__swrite+0x1e>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f70:	f000 f9c4 	bl	80042fc <_lseek_r>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	4632      	mov	r2, r6
 8003f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	463b      	mov	r3, r7
 8003f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	f000 b869 	b.w	8004060 <_write_r>

08003f8e <__sseek>:
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	460c      	mov	r4, r1
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 f9b1 	bl	80042fc <_lseek_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	bf15      	itete	ne
 8003fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003faa:	81a3      	strheq	r3, [r4, #12]
 8003fac:	bf18      	it	ne
 8003fae:	81a3      	strhne	r3, [r4, #12]
 8003fb0:	bd10      	pop	{r4, pc}

08003fb2 <__sclose>:
 8003fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb6:	f000 b8d3 	b.w	8004160 <_close_r>
	...

08003fbc <__swbuf_r>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	460e      	mov	r6, r1
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	b118      	cbz	r0, 8003fce <__swbuf_r+0x12>
 8003fc6:	6983      	ldr	r3, [r0, #24]
 8003fc8:	b90b      	cbnz	r3, 8003fce <__swbuf_r+0x12>
 8003fca:	f7ff fb81 	bl	80036d0 <__sinit>
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <__swbuf_r+0x98>)
 8003fd0:	429c      	cmp	r4, r3
 8003fd2:	d12b      	bne.n	800402c <__swbuf_r+0x70>
 8003fd4:	686c      	ldr	r4, [r5, #4]
 8003fd6:	69a3      	ldr	r3, [r4, #24]
 8003fd8:	60a3      	str	r3, [r4, #8]
 8003fda:	89a3      	ldrh	r3, [r4, #12]
 8003fdc:	071a      	lsls	r2, r3, #28
 8003fde:	d52f      	bpl.n	8004040 <__swbuf_r+0x84>
 8003fe0:	6923      	ldr	r3, [r4, #16]
 8003fe2:	b36b      	cbz	r3, 8004040 <__swbuf_r+0x84>
 8003fe4:	6923      	ldr	r3, [r4, #16]
 8003fe6:	6820      	ldr	r0, [r4, #0]
 8003fe8:	b2f6      	uxtb	r6, r6
 8003fea:	1ac0      	subs	r0, r0, r3
 8003fec:	6963      	ldr	r3, [r4, #20]
 8003fee:	4637      	mov	r7, r6
 8003ff0:	4283      	cmp	r3, r0
 8003ff2:	dc04      	bgt.n	8003ffe <__swbuf_r+0x42>
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f000 f944 	bl	8004284 <_fflush_r>
 8003ffc:	bb30      	cbnz	r0, 800404c <__swbuf_r+0x90>
 8003ffe:	68a3      	ldr	r3, [r4, #8]
 8004000:	3001      	adds	r0, #1
 8004002:	3b01      	subs	r3, #1
 8004004:	60a3      	str	r3, [r4, #8]
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	6022      	str	r2, [r4, #0]
 800400c:	701e      	strb	r6, [r3, #0]
 800400e:	6963      	ldr	r3, [r4, #20]
 8004010:	4283      	cmp	r3, r0
 8004012:	d004      	beq.n	800401e <__swbuf_r+0x62>
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	07db      	lsls	r3, r3, #31
 8004018:	d506      	bpl.n	8004028 <__swbuf_r+0x6c>
 800401a:	2e0a      	cmp	r6, #10
 800401c:	d104      	bne.n	8004028 <__swbuf_r+0x6c>
 800401e:	4621      	mov	r1, r4
 8004020:	4628      	mov	r0, r5
 8004022:	f000 f92f 	bl	8004284 <_fflush_r>
 8004026:	b988      	cbnz	r0, 800404c <__swbuf_r+0x90>
 8004028:	4638      	mov	r0, r7
 800402a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <__swbuf_r+0x9c>)
 800402e:	429c      	cmp	r4, r3
 8004030:	d101      	bne.n	8004036 <__swbuf_r+0x7a>
 8004032:	68ac      	ldr	r4, [r5, #8]
 8004034:	e7cf      	b.n	8003fd6 <__swbuf_r+0x1a>
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <__swbuf_r+0xa0>)
 8004038:	429c      	cmp	r4, r3
 800403a:	bf08      	it	eq
 800403c:	68ec      	ldreq	r4, [r5, #12]
 800403e:	e7ca      	b.n	8003fd6 <__swbuf_r+0x1a>
 8004040:	4621      	mov	r1, r4
 8004042:	4628      	mov	r0, r5
 8004044:	f000 f81e 	bl	8004084 <__swsetup_r>
 8004048:	2800      	cmp	r0, #0
 800404a:	d0cb      	beq.n	8003fe4 <__swbuf_r+0x28>
 800404c:	f04f 37ff 	mov.w	r7, #4294967295
 8004050:	e7ea      	b.n	8004028 <__swbuf_r+0x6c>
 8004052:	bf00      	nop
 8004054:	080045e4 	.word	0x080045e4
 8004058:	08004604 	.word	0x08004604
 800405c:	080045c4 	.word	0x080045c4

08004060 <_write_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	4604      	mov	r4, r0
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	2200      	movs	r2, #0
 800406a:	4d05      	ldr	r5, [pc, #20]	; (8004080 <_write_r+0x20>)
 800406c:	602a      	str	r2, [r5, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	f7fc fd3d 	bl	8000aee <_write>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d102      	bne.n	800407e <_write_r+0x1e>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b103      	cbz	r3, 800407e <_write_r+0x1e>
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	20000314 	.word	0x20000314

08004084 <__swsetup_r>:
 8004084:	4b32      	ldr	r3, [pc, #200]	; (8004150 <__swsetup_r+0xcc>)
 8004086:	b570      	push	{r4, r5, r6, lr}
 8004088:	681d      	ldr	r5, [r3, #0]
 800408a:	4606      	mov	r6, r0
 800408c:	460c      	mov	r4, r1
 800408e:	b125      	cbz	r5, 800409a <__swsetup_r+0x16>
 8004090:	69ab      	ldr	r3, [r5, #24]
 8004092:	b913      	cbnz	r3, 800409a <__swsetup_r+0x16>
 8004094:	4628      	mov	r0, r5
 8004096:	f7ff fb1b 	bl	80036d0 <__sinit>
 800409a:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <__swsetup_r+0xd0>)
 800409c:	429c      	cmp	r4, r3
 800409e:	d10f      	bne.n	80040c0 <__swsetup_r+0x3c>
 80040a0:	686c      	ldr	r4, [r5, #4]
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040a8:	0719      	lsls	r1, r3, #28
 80040aa:	d42c      	bmi.n	8004106 <__swsetup_r+0x82>
 80040ac:	06dd      	lsls	r5, r3, #27
 80040ae:	d411      	bmi.n	80040d4 <__swsetup_r+0x50>
 80040b0:	2309      	movs	r3, #9
 80040b2:	6033      	str	r3, [r6, #0]
 80040b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	e03e      	b.n	800413e <__swsetup_r+0xba>
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <__swsetup_r+0xd4>)
 80040c2:	429c      	cmp	r4, r3
 80040c4:	d101      	bne.n	80040ca <__swsetup_r+0x46>
 80040c6:	68ac      	ldr	r4, [r5, #8]
 80040c8:	e7eb      	b.n	80040a2 <__swsetup_r+0x1e>
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <__swsetup_r+0xd8>)
 80040cc:	429c      	cmp	r4, r3
 80040ce:	bf08      	it	eq
 80040d0:	68ec      	ldreq	r4, [r5, #12]
 80040d2:	e7e6      	b.n	80040a2 <__swsetup_r+0x1e>
 80040d4:	0758      	lsls	r0, r3, #29
 80040d6:	d512      	bpl.n	80040fe <__swsetup_r+0x7a>
 80040d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040da:	b141      	cbz	r1, 80040ee <__swsetup_r+0x6a>
 80040dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040e0:	4299      	cmp	r1, r3
 80040e2:	d002      	beq.n	80040ea <__swsetup_r+0x66>
 80040e4:	4630      	mov	r0, r6
 80040e6:	f000 f99b 	bl	8004420 <_free_r>
 80040ea:	2300      	movs	r3, #0
 80040ec:	6363      	str	r3, [r4, #52]	; 0x34
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040f4:	81a3      	strh	r3, [r4, #12]
 80040f6:	2300      	movs	r3, #0
 80040f8:	6063      	str	r3, [r4, #4]
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	f043 0308 	orr.w	r3, r3, #8
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	b94b      	cbnz	r3, 800411e <__swsetup_r+0x9a>
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004114:	d003      	beq.n	800411e <__swsetup_r+0x9a>
 8004116:	4621      	mov	r1, r4
 8004118:	4630      	mov	r0, r6
 800411a:	f000 f927 	bl	800436c <__smakebuf_r>
 800411e:	89a0      	ldrh	r0, [r4, #12]
 8004120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004124:	f010 0301 	ands.w	r3, r0, #1
 8004128:	d00a      	beq.n	8004140 <__swsetup_r+0xbc>
 800412a:	2300      	movs	r3, #0
 800412c:	60a3      	str	r3, [r4, #8]
 800412e:	6963      	ldr	r3, [r4, #20]
 8004130:	425b      	negs	r3, r3
 8004132:	61a3      	str	r3, [r4, #24]
 8004134:	6923      	ldr	r3, [r4, #16]
 8004136:	b943      	cbnz	r3, 800414a <__swsetup_r+0xc6>
 8004138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800413c:	d1ba      	bne.n	80040b4 <__swsetup_r+0x30>
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	0781      	lsls	r1, r0, #30
 8004142:	bf58      	it	pl
 8004144:	6963      	ldrpl	r3, [r4, #20]
 8004146:	60a3      	str	r3, [r4, #8]
 8004148:	e7f4      	b.n	8004134 <__swsetup_r+0xb0>
 800414a:	2000      	movs	r0, #0
 800414c:	e7f7      	b.n	800413e <__swsetup_r+0xba>
 800414e:	bf00      	nop
 8004150:	2000007c 	.word	0x2000007c
 8004154:	080045e4 	.word	0x080045e4
 8004158:	08004604 	.word	0x08004604
 800415c:	080045c4 	.word	0x080045c4

08004160 <_close_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	2300      	movs	r3, #0
 8004164:	4d05      	ldr	r5, [pc, #20]	; (800417c <_close_r+0x1c>)
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f7fc fcdb 	bl	8000b26 <_close>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_close_r+0x1a>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_close_r+0x1a>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	20000314 	.word	0x20000314

08004180 <__sflush_r>:
 8004180:	898a      	ldrh	r2, [r1, #12]
 8004182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004184:	4605      	mov	r5, r0
 8004186:	0710      	lsls	r0, r2, #28
 8004188:	460c      	mov	r4, r1
 800418a:	d457      	bmi.n	800423c <__sflush_r+0xbc>
 800418c:	684b      	ldr	r3, [r1, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	dc04      	bgt.n	800419c <__sflush_r+0x1c>
 8004192:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	dc01      	bgt.n	800419c <__sflush_r+0x1c>
 8004198:	2000      	movs	r0, #0
 800419a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800419c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800419e:	2e00      	cmp	r6, #0
 80041a0:	d0fa      	beq.n	8004198 <__sflush_r+0x18>
 80041a2:	2300      	movs	r3, #0
 80041a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041a8:	682f      	ldr	r7, [r5, #0]
 80041aa:	602b      	str	r3, [r5, #0]
 80041ac:	d032      	beq.n	8004214 <__sflush_r+0x94>
 80041ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	075a      	lsls	r2, r3, #29
 80041b4:	d505      	bpl.n	80041c2 <__sflush_r+0x42>
 80041b6:	6863      	ldr	r3, [r4, #4]
 80041b8:	1ac0      	subs	r0, r0, r3
 80041ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041bc:	b10b      	cbz	r3, 80041c2 <__sflush_r+0x42>
 80041be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041c0:	1ac0      	subs	r0, r0, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	4602      	mov	r2, r0
 80041c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041c8:	4628      	mov	r0, r5
 80041ca:	6a21      	ldr	r1, [r4, #32]
 80041cc:	47b0      	blx	r6
 80041ce:	1c43      	adds	r3, r0, #1
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	d106      	bne.n	80041e2 <__sflush_r+0x62>
 80041d4:	6829      	ldr	r1, [r5, #0]
 80041d6:	291d      	cmp	r1, #29
 80041d8:	d82c      	bhi.n	8004234 <__sflush_r+0xb4>
 80041da:	4a29      	ldr	r2, [pc, #164]	; (8004280 <__sflush_r+0x100>)
 80041dc:	40ca      	lsrs	r2, r1
 80041de:	07d6      	lsls	r6, r2, #31
 80041e0:	d528      	bpl.n	8004234 <__sflush_r+0xb4>
 80041e2:	2200      	movs	r2, #0
 80041e4:	6062      	str	r2, [r4, #4]
 80041e6:	6922      	ldr	r2, [r4, #16]
 80041e8:	04d9      	lsls	r1, r3, #19
 80041ea:	6022      	str	r2, [r4, #0]
 80041ec:	d504      	bpl.n	80041f8 <__sflush_r+0x78>
 80041ee:	1c42      	adds	r2, r0, #1
 80041f0:	d101      	bne.n	80041f6 <__sflush_r+0x76>
 80041f2:	682b      	ldr	r3, [r5, #0]
 80041f4:	b903      	cbnz	r3, 80041f8 <__sflush_r+0x78>
 80041f6:	6560      	str	r0, [r4, #84]	; 0x54
 80041f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041fa:	602f      	str	r7, [r5, #0]
 80041fc:	2900      	cmp	r1, #0
 80041fe:	d0cb      	beq.n	8004198 <__sflush_r+0x18>
 8004200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004204:	4299      	cmp	r1, r3
 8004206:	d002      	beq.n	800420e <__sflush_r+0x8e>
 8004208:	4628      	mov	r0, r5
 800420a:	f000 f909 	bl	8004420 <_free_r>
 800420e:	2000      	movs	r0, #0
 8004210:	6360      	str	r0, [r4, #52]	; 0x34
 8004212:	e7c2      	b.n	800419a <__sflush_r+0x1a>
 8004214:	6a21      	ldr	r1, [r4, #32]
 8004216:	2301      	movs	r3, #1
 8004218:	4628      	mov	r0, r5
 800421a:	47b0      	blx	r6
 800421c:	1c41      	adds	r1, r0, #1
 800421e:	d1c7      	bne.n	80041b0 <__sflush_r+0x30>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0c4      	beq.n	80041b0 <__sflush_r+0x30>
 8004226:	2b1d      	cmp	r3, #29
 8004228:	d001      	beq.n	800422e <__sflush_r+0xae>
 800422a:	2b16      	cmp	r3, #22
 800422c:	d101      	bne.n	8004232 <__sflush_r+0xb2>
 800422e:	602f      	str	r7, [r5, #0]
 8004230:	e7b2      	b.n	8004198 <__sflush_r+0x18>
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004238:	81a3      	strh	r3, [r4, #12]
 800423a:	e7ae      	b.n	800419a <__sflush_r+0x1a>
 800423c:	690f      	ldr	r7, [r1, #16]
 800423e:	2f00      	cmp	r7, #0
 8004240:	d0aa      	beq.n	8004198 <__sflush_r+0x18>
 8004242:	0793      	lsls	r3, r2, #30
 8004244:	bf18      	it	ne
 8004246:	2300      	movne	r3, #0
 8004248:	680e      	ldr	r6, [r1, #0]
 800424a:	bf08      	it	eq
 800424c:	694b      	ldreq	r3, [r1, #20]
 800424e:	1bf6      	subs	r6, r6, r7
 8004250:	600f      	str	r7, [r1, #0]
 8004252:	608b      	str	r3, [r1, #8]
 8004254:	2e00      	cmp	r6, #0
 8004256:	dd9f      	ble.n	8004198 <__sflush_r+0x18>
 8004258:	4633      	mov	r3, r6
 800425a:	463a      	mov	r2, r7
 800425c:	4628      	mov	r0, r5
 800425e:	6a21      	ldr	r1, [r4, #32]
 8004260:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004264:	47e0      	blx	ip
 8004266:	2800      	cmp	r0, #0
 8004268:	dc06      	bgt.n	8004278 <__sflush_r+0xf8>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	e790      	b.n	800419a <__sflush_r+0x1a>
 8004278:	4407      	add	r7, r0
 800427a:	1a36      	subs	r6, r6, r0
 800427c:	e7ea      	b.n	8004254 <__sflush_r+0xd4>
 800427e:	bf00      	nop
 8004280:	20400001 	.word	0x20400001

08004284 <_fflush_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	690b      	ldr	r3, [r1, #16]
 8004288:	4605      	mov	r5, r0
 800428a:	460c      	mov	r4, r1
 800428c:	b913      	cbnz	r3, 8004294 <_fflush_r+0x10>
 800428e:	2500      	movs	r5, #0
 8004290:	4628      	mov	r0, r5
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	b118      	cbz	r0, 800429e <_fflush_r+0x1a>
 8004296:	6983      	ldr	r3, [r0, #24]
 8004298:	b90b      	cbnz	r3, 800429e <_fflush_r+0x1a>
 800429a:	f7ff fa19 	bl	80036d0 <__sinit>
 800429e:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <_fflush_r+0x6c>)
 80042a0:	429c      	cmp	r4, r3
 80042a2:	d11b      	bne.n	80042dc <_fflush_r+0x58>
 80042a4:	686c      	ldr	r4, [r5, #4]
 80042a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ef      	beq.n	800428e <_fflush_r+0xa>
 80042ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042b0:	07d0      	lsls	r0, r2, #31
 80042b2:	d404      	bmi.n	80042be <_fflush_r+0x3a>
 80042b4:	0599      	lsls	r1, r3, #22
 80042b6:	d402      	bmi.n	80042be <_fflush_r+0x3a>
 80042b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ba:	f7ff faa7 	bl	800380c <__retarget_lock_acquire_recursive>
 80042be:	4628      	mov	r0, r5
 80042c0:	4621      	mov	r1, r4
 80042c2:	f7ff ff5d 	bl	8004180 <__sflush_r>
 80042c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042c8:	4605      	mov	r5, r0
 80042ca:	07da      	lsls	r2, r3, #31
 80042cc:	d4e0      	bmi.n	8004290 <_fflush_r+0xc>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	059b      	lsls	r3, r3, #22
 80042d2:	d4dd      	bmi.n	8004290 <_fflush_r+0xc>
 80042d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042d6:	f7ff fa9a 	bl	800380e <__retarget_lock_release_recursive>
 80042da:	e7d9      	b.n	8004290 <_fflush_r+0xc>
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <_fflush_r+0x70>)
 80042de:	429c      	cmp	r4, r3
 80042e0:	d101      	bne.n	80042e6 <_fflush_r+0x62>
 80042e2:	68ac      	ldr	r4, [r5, #8]
 80042e4:	e7df      	b.n	80042a6 <_fflush_r+0x22>
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <_fflush_r+0x74>)
 80042e8:	429c      	cmp	r4, r3
 80042ea:	bf08      	it	eq
 80042ec:	68ec      	ldreq	r4, [r5, #12]
 80042ee:	e7da      	b.n	80042a6 <_fflush_r+0x22>
 80042f0:	080045e4 	.word	0x080045e4
 80042f4:	08004604 	.word	0x08004604
 80042f8:	080045c4 	.word	0x080045c4

080042fc <_lseek_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	2200      	movs	r2, #0
 8004306:	4d05      	ldr	r5, [pc, #20]	; (800431c <_lseek_r+0x20>)
 8004308:	602a      	str	r2, [r5, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f7fc fc2f 	bl	8000b6e <_lseek>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d102      	bne.n	800431a <_lseek_r+0x1e>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	b103      	cbz	r3, 800431a <_lseek_r+0x1e>
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	20000314 	.word	0x20000314

08004320 <__swhatbuf_r>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	460e      	mov	r6, r1
 8004324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004328:	4614      	mov	r4, r2
 800432a:	2900      	cmp	r1, #0
 800432c:	461d      	mov	r5, r3
 800432e:	b096      	sub	sp, #88	; 0x58
 8004330:	da08      	bge.n	8004344 <__swhatbuf_r+0x24>
 8004332:	2200      	movs	r2, #0
 8004334:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004338:	602a      	str	r2, [r5, #0]
 800433a:	061a      	lsls	r2, r3, #24
 800433c:	d410      	bmi.n	8004360 <__swhatbuf_r+0x40>
 800433e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004342:	e00e      	b.n	8004362 <__swhatbuf_r+0x42>
 8004344:	466a      	mov	r2, sp
 8004346:	f000 f8c5 	bl	80044d4 <_fstat_r>
 800434a:	2800      	cmp	r0, #0
 800434c:	dbf1      	blt.n	8004332 <__swhatbuf_r+0x12>
 800434e:	9a01      	ldr	r2, [sp, #4]
 8004350:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004354:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004358:	425a      	negs	r2, r3
 800435a:	415a      	adcs	r2, r3
 800435c:	602a      	str	r2, [r5, #0]
 800435e:	e7ee      	b.n	800433e <__swhatbuf_r+0x1e>
 8004360:	2340      	movs	r3, #64	; 0x40
 8004362:	2000      	movs	r0, #0
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	b016      	add	sp, #88	; 0x58
 8004368:	bd70      	pop	{r4, r5, r6, pc}
	...

0800436c <__smakebuf_r>:
 800436c:	898b      	ldrh	r3, [r1, #12]
 800436e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004370:	079d      	lsls	r5, r3, #30
 8004372:	4606      	mov	r6, r0
 8004374:	460c      	mov	r4, r1
 8004376:	d507      	bpl.n	8004388 <__smakebuf_r+0x1c>
 8004378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	6123      	str	r3, [r4, #16]
 8004380:	2301      	movs	r3, #1
 8004382:	6163      	str	r3, [r4, #20]
 8004384:	b002      	add	sp, #8
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	466a      	mov	r2, sp
 800438a:	ab01      	add	r3, sp, #4
 800438c:	f7ff ffc8 	bl	8004320 <__swhatbuf_r>
 8004390:	9900      	ldr	r1, [sp, #0]
 8004392:	4605      	mov	r5, r0
 8004394:	4630      	mov	r0, r6
 8004396:	f7ff fa5b 	bl	8003850 <_malloc_r>
 800439a:	b948      	cbnz	r0, 80043b0 <__smakebuf_r+0x44>
 800439c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043a0:	059a      	lsls	r2, r3, #22
 80043a2:	d4ef      	bmi.n	8004384 <__smakebuf_r+0x18>
 80043a4:	f023 0303 	bic.w	r3, r3, #3
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	81a3      	strh	r3, [r4, #12]
 80043ae:	e7e3      	b.n	8004378 <__smakebuf_r+0xc>
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <__smakebuf_r+0x7c>)
 80043b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	6020      	str	r0, [r4, #0]
 80043b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043bc:	81a3      	strh	r3, [r4, #12]
 80043be:	9b00      	ldr	r3, [sp, #0]
 80043c0:	6120      	str	r0, [r4, #16]
 80043c2:	6163      	str	r3, [r4, #20]
 80043c4:	9b01      	ldr	r3, [sp, #4]
 80043c6:	b15b      	cbz	r3, 80043e0 <__smakebuf_r+0x74>
 80043c8:	4630      	mov	r0, r6
 80043ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ce:	f000 f893 	bl	80044f8 <_isatty_r>
 80043d2:	b128      	cbz	r0, 80043e0 <__smakebuf_r+0x74>
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	81a3      	strh	r3, [r4, #12]
 80043e0:	89a0      	ldrh	r0, [r4, #12]
 80043e2:	4305      	orrs	r5, r0
 80043e4:	81a5      	strh	r5, [r4, #12]
 80043e6:	e7cd      	b.n	8004384 <__smakebuf_r+0x18>
 80043e8:	08003669 	.word	0x08003669

080043ec <memchr>:
 80043ec:	4603      	mov	r3, r0
 80043ee:	b510      	push	{r4, lr}
 80043f0:	b2c9      	uxtb	r1, r1
 80043f2:	4402      	add	r2, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	d101      	bne.n	80043fe <memchr+0x12>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e003      	b.n	8004406 <memchr+0x1a>
 80043fe:	7804      	ldrb	r4, [r0, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	428c      	cmp	r4, r1
 8004404:	d1f6      	bne.n	80043f4 <memchr+0x8>
 8004406:	bd10      	pop	{r4, pc}

08004408 <__malloc_lock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_lock+0x8>)
 800440a:	f7ff b9ff 	b.w	800380c <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	20000308 	.word	0x20000308

08004414 <__malloc_unlock>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__malloc_unlock+0x8>)
 8004416:	f7ff b9fa 	b.w	800380e <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	20000308 	.word	0x20000308

08004420 <_free_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4605      	mov	r5, r0
 8004424:	2900      	cmp	r1, #0
 8004426:	d040      	beq.n	80044aa <_free_r+0x8a>
 8004428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800442c:	1f0c      	subs	r4, r1, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	bfb8      	it	lt
 8004432:	18e4      	addlt	r4, r4, r3
 8004434:	f7ff ffe8 	bl	8004408 <__malloc_lock>
 8004438:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <_free_r+0x8c>)
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	b933      	cbnz	r3, 800444c <_free_r+0x2c>
 800443e:	6063      	str	r3, [r4, #4]
 8004440:	6014      	str	r4, [r2, #0]
 8004442:	4628      	mov	r0, r5
 8004444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004448:	f7ff bfe4 	b.w	8004414 <__malloc_unlock>
 800444c:	42a3      	cmp	r3, r4
 800444e:	d908      	bls.n	8004462 <_free_r+0x42>
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	1821      	adds	r1, r4, r0
 8004454:	428b      	cmp	r3, r1
 8004456:	bf01      	itttt	eq
 8004458:	6819      	ldreq	r1, [r3, #0]
 800445a:	685b      	ldreq	r3, [r3, #4]
 800445c:	1809      	addeq	r1, r1, r0
 800445e:	6021      	streq	r1, [r4, #0]
 8004460:	e7ed      	b.n	800443e <_free_r+0x1e>
 8004462:	461a      	mov	r2, r3
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	b10b      	cbz	r3, 800446c <_free_r+0x4c>
 8004468:	42a3      	cmp	r3, r4
 800446a:	d9fa      	bls.n	8004462 <_free_r+0x42>
 800446c:	6811      	ldr	r1, [r2, #0]
 800446e:	1850      	adds	r0, r2, r1
 8004470:	42a0      	cmp	r0, r4
 8004472:	d10b      	bne.n	800448c <_free_r+0x6c>
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	4401      	add	r1, r0
 8004478:	1850      	adds	r0, r2, r1
 800447a:	4283      	cmp	r3, r0
 800447c:	6011      	str	r1, [r2, #0]
 800447e:	d1e0      	bne.n	8004442 <_free_r+0x22>
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4401      	add	r1, r0
 8004486:	6011      	str	r1, [r2, #0]
 8004488:	6053      	str	r3, [r2, #4]
 800448a:	e7da      	b.n	8004442 <_free_r+0x22>
 800448c:	d902      	bls.n	8004494 <_free_r+0x74>
 800448e:	230c      	movs	r3, #12
 8004490:	602b      	str	r3, [r5, #0]
 8004492:	e7d6      	b.n	8004442 <_free_r+0x22>
 8004494:	6820      	ldr	r0, [r4, #0]
 8004496:	1821      	adds	r1, r4, r0
 8004498:	428b      	cmp	r3, r1
 800449a:	bf01      	itttt	eq
 800449c:	6819      	ldreq	r1, [r3, #0]
 800449e:	685b      	ldreq	r3, [r3, #4]
 80044a0:	1809      	addeq	r1, r1, r0
 80044a2:	6021      	streq	r1, [r4, #0]
 80044a4:	6063      	str	r3, [r4, #4]
 80044a6:	6054      	str	r4, [r2, #4]
 80044a8:	e7cb      	b.n	8004442 <_free_r+0x22>
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	2000030c 	.word	0x2000030c

080044b0 <_read_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4604      	mov	r4, r0
 80044b4:	4608      	mov	r0, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	2200      	movs	r2, #0
 80044ba:	4d05      	ldr	r5, [pc, #20]	; (80044d0 <_read_r+0x20>)
 80044bc:	602a      	str	r2, [r5, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	f7fc faf8 	bl	8000ab4 <_read>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_read_r+0x1e>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_read_r+0x1e>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	20000314 	.word	0x20000314

080044d4 <_fstat_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	2300      	movs	r3, #0
 80044d8:	4d06      	ldr	r5, [pc, #24]	; (80044f4 <_fstat_r+0x20>)
 80044da:	4604      	mov	r4, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	602b      	str	r3, [r5, #0]
 80044e2:	f7fc fb2b 	bl	8000b3c <_fstat>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	d102      	bne.n	80044f0 <_fstat_r+0x1c>
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	b103      	cbz	r3, 80044f0 <_fstat_r+0x1c>
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	bd38      	pop	{r3, r4, r5, pc}
 80044f2:	bf00      	nop
 80044f4:	20000314 	.word	0x20000314

080044f8 <_isatty_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	2300      	movs	r3, #0
 80044fc:	4d05      	ldr	r5, [pc, #20]	; (8004514 <_isatty_r+0x1c>)
 80044fe:	4604      	mov	r4, r0
 8004500:	4608      	mov	r0, r1
 8004502:	602b      	str	r3, [r5, #0]
 8004504:	f7fc fb29 	bl	8000b5a <_isatty>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_isatty_r+0x1a>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b103      	cbz	r3, 8004512 <_isatty_r+0x1a>
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20000314 	.word	0x20000314

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
